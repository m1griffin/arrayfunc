
/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_signed_char(signed int opcode, Py_ssize_t arraylen, signed char *data, Py_ssize_t *dataout, signed char param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_unsigned_char(signed int opcode, Py_ssize_t arraylen, unsigned char *data, Py_ssize_t *dataout, unsigned char param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_signed_short(signed int opcode, Py_ssize_t arraylen, signed short *data, Py_ssize_t *dataout, signed short param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_unsigned_short(signed int opcode, Py_ssize_t arraylen, unsigned short *data, Py_ssize_t *dataout, unsigned short param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_signed_int(signed int opcode, Py_ssize_t arraylen, signed int *data, Py_ssize_t *dataout, signed int param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_unsigned_int(signed int opcode, Py_ssize_t arraylen, unsigned int *data, Py_ssize_t *dataout, unsigned int param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_signed_long(signed int opcode, Py_ssize_t arraylen, signed long *data, Py_ssize_t *dataout, signed long param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_unsigned_long(signed int opcode, Py_ssize_t arraylen, unsigned long *data, Py_ssize_t *dataout, unsigned long param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_signed_long_long(signed int opcode, Py_ssize_t arraylen, signed long long *data, Py_ssize_t *dataout, signed long long param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_unsigned_long_long(signed int opcode, Py_ssize_t arraylen, unsigned long long *data, Py_ssize_t *dataout, unsigned long long param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_float(signed int opcode, Py_ssize_t arraylen, float *data, Py_ssize_t *dataout, float param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */

/*--------------------------------------------------------------------------- */
/* opcode = The operator or function code to select what to execute.
   arraylen = The length of the data arrays.
   data = The input data array.
   dataout = The output data array.
   param1 = The parameter to be applied to each array element.
   Returns 0 or a positive integer indicating the number of input elements 
         copied to the output array, or an error code.
*/
Py_ssize_t findindices_double(signed int opcode, Py_ssize_t arraylen, double *data, Py_ssize_t *dataout, double param1) { 

	// array index counter. 
	Py_ssize_t index, outindex; 

	// We need a separate index for the output array, because the input and
	// output indexes may not be the same.
	outindex = 0;

	switch(opcode) {
		// af_eq
		case OP_AF_EQ: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] == param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gt
		case OP_AF_GT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] > param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_gte
		case OP_AF_GTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] >= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lt
		case OP_AF_LT: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] < param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_lte
		case OP_AF_LTE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] <= param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
		// af_ne
		case OP_AF_NE: {
			for(index = 0; index < arraylen; index++) {
				if (data[index] != param1) {
					dataout[outindex] = index;
					outindex++;
				}
			}
			// Did we find any matches?
			if (outindex > 0) {
				return outindex;
			} else {
				return ARR_ERR_NOTFOUND;
			}
		}
	}
	// The operation code is unknown.
	return ARR_ERR_INVALIDOP;
}
/*--------------------------------------------------------------------------- */
