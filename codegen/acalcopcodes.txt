_OpCodes = {
	'unknown' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([0, False, 0, False, 0]),
	'pusharray' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([1, False, 1, False, 1]),
	'pushvar' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([2, False, 2, False, 1]),
	'pushconst' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([3, False, 3, False, 1]),
	'add' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([4, False, 4, False, -1]),
	'sub' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([5, False, 5, False, -1]),
	'mult' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([6, False, 6, False, -1]),
	'div' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([7, False, 7, False, -1]),
	'floordiv' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([8, False, 8, False, -1]),
	'mod' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([9, False, 9, False, -1]),
	'uadd' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([10, False, 10, False, 0]),
	'usub' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([11, True, 11, False, 0]),
	'pow' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([12, False, 12, False, -1]),
	'bitand' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([13, False, None, False, -1]),
	'bitor' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([14, False, None, False, -1]),
	'bitxor' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([15, False, None, False, -1]),
	'invert' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([16, False, None, False, 0]),
	'lshift' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([17, False, None, False, -1]),
	'rshift' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([18, False, None, False, -1]),
	'abs' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([19, False, 13, True, 0]),
	'math.acos' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 14, True, 0]),
	'math.acosh' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 15, True, 0]),
	'math.asin' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 16, True, 0]),
	'math.asinh' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 17, True, 0]),
	'math.atan' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 18, True, 0]),
	'math.atan2' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 19, True, -1]),
	'math.atanh' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 20, True, 0]),
	'math.ceil' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 21, True, 0]),
	'math.copysign' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 22, True, -1]),
	'math.cos' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 23, True, 0]),
	'math.cosh' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 24, True, 0]),
	'math.degrees' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 25, True, 0]),
	'math.erf' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 26, True, 0]),
	'math.erfc' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 27, True, 0]),
	'math.exp' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 28, True, 0]),
	'math.expm1' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 29, True, 0]),
	'math.fabs' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 30, True, 0]),
	'math.factorial' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([20, False, None, True, 0]),
	'math.floor' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 31, True, 0]),
	'math.fmod' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 32, True, -1]),
	'math.gamma' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 33, True, 0]),
	'math.hypot' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 34, True, -1]),
	'math.ldexp' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 35, True, -1]),
	'math.lgamma' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 36, True, 0]),
	'math.log' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 37, True, 0]),
	'math.log10' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 38, True, 0]),
	'math.log1p' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 39, True, 0]),
	'math.log2' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 40, True, 0]),
	'math.pow' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 41, True, -1]),
	'math.radians' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 42, True, 0]),
	'math.sin' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 43, True, 0]),
	'math.sinh' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 44, True, 0]),
	'math.sqrt' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 45, True, 0]),
	'math.tan' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 46, True, 0]),
	'math.tanh' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 47, True, 0]),
	'math.trunc' : collections.namedtuple('opcodes', ['intval', 'signedonly', 'floatval', 'mathlib', 'stack'])._make([None, False, 48, True, 0]),
	}



#define CALCOP_INT_UNKNOWN 0
#define CALCOP_INT_PUSHARRAY 1
#define CALCOP_INT_PUSHVAR 2
#define CALCOP_INT_PUSHCONST 3
#define CALCOP_INT_ADD 4
#define CALCOP_INT_SUB 5
#define CALCOP_INT_MULT 6
#define CALCOP_INT_DIV 7
#define CALCOP_INT_FLOORDIV 8
#define CALCOP_INT_MOD 9
#define CALCOP_INT_UADD 10
#define CALCOP_INT_USUB 11
#define CALCOP_INT_POW 12
#define CALCOP_INT_BITAND 13
#define CALCOP_INT_BITOR 14
#define CALCOP_INT_BITXOR 15
#define CALCOP_INT_INVERT 16
#define CALCOP_INT_LSHIFT 17
#define CALCOP_INT_RSHIFT 18
#define CALCOP_INT_ABS 19
#define CALCOP_INT_MATH_FACTORIAL 20



#define CALCOP_FLOAT_UNKNOWN 0
#define CALCOP_FLOAT_PUSHARRAY 1
#define CALCOP_FLOAT_PUSHVAR 2
#define CALCOP_FLOAT_PUSHCONST 3
#define CALCOP_FLOAT_ADD 4
#define CALCOP_FLOAT_SUB 5
#define CALCOP_FLOAT_MULT 6
#define CALCOP_FLOAT_DIV 7
#define CALCOP_FLOAT_FLOORDIV 8
#define CALCOP_FLOAT_MOD 9
#define CALCOP_FLOAT_UADD 10
#define CALCOP_FLOAT_USUB 11
#define CALCOP_FLOAT_POW 12
#define CALCOP_FLOAT_ABS 13
#define CALCOP_FLOAT_MATH_ACOS 14
#define CALCOP_FLOAT_MATH_ACOSH 15
#define CALCOP_FLOAT_MATH_ASIN 16
#define CALCOP_FLOAT_MATH_ASINH 17
#define CALCOP_FLOAT_MATH_ATAN 18
#define CALCOP_FLOAT_MATH_ATAN2 19
#define CALCOP_FLOAT_MATH_ATANH 20
#define CALCOP_FLOAT_MATH_CEIL 21
#define CALCOP_FLOAT_MATH_COPYSIGN 22
#define CALCOP_FLOAT_MATH_COS 23
#define CALCOP_FLOAT_MATH_COSH 24
#define CALCOP_FLOAT_MATH_DEGREES 25
#define CALCOP_FLOAT_MATH_ERF 26
#define CALCOP_FLOAT_MATH_ERFC 27
#define CALCOP_FLOAT_MATH_EXP 28
#define CALCOP_FLOAT_MATH_EXPM1 29
#define CALCOP_FLOAT_MATH_FABS 30
#define CALCOP_FLOAT_MATH_FLOOR 31
#define CALCOP_FLOAT_MATH_FMOD 32
#define CALCOP_FLOAT_MATH_GAMMA 33
#define CALCOP_FLOAT_MATH_HYPOT 34
#define CALCOP_FLOAT_MATH_LDEXP 35
#define CALCOP_FLOAT_MATH_LGAMMA 36
#define CALCOP_FLOAT_MATH_LOG 37
#define CALCOP_FLOAT_MATH_LOG10 38
#define CALCOP_FLOAT_MATH_LOG1P 39
#define CALCOP_FLOAT_MATH_LOG2 40
#define CALCOP_FLOAT_MATH_POW 41
#define CALCOP_FLOAT_MATH_RADIANS 42
#define CALCOP_FLOAT_MATH_SIN 43
#define CALCOP_FLOAT_MATH_SINH 44
#define CALCOP_FLOAT_MATH_SQRT 45
#define CALCOP_FLOAT_MATH_TAN 46
#define CALCOP_FLOAT_MATH_TANH 47
#define CALCOP_FLOAT_MATH_TRUNC 48



signed int intstackcodes[] = {0, 1, 1, 1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, 0};


signed int floatstackcodes[] = {0, 1, 1, 1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0};

#define OPCODEMAXINT 20
#define OPCODEMAXFLOAT 48
