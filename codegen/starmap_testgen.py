#!/usr/bin/env python3
##############################################################################
# Project:  arrayfunc
# Purpose:  Generate the unit tests for starmap and starmapi.
# Language: Python 3.4
# Date:     27-May-2014
#
###############################################################################
#
#   Copyright 2014 - 2015    Michael Griffin    <m12.griffin@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##############################################################################


# ==============================================================================

import itertools

import codegen_common


# ==============================================================================


# This is used to insert code to convert the test data to bytes type. 
bytesconverterdata = 'data = bytes(data)'
bytesconverterdata2 = 'data2 = bytes(data2)'
bytesconverterdataout = 'dataout = bytes(dataout)'


# ==============================================================================

# The basic class template for testing each array type for operator function.
type_template = '''
##############################################################################
class starmap_operator_%(typelabel)s(unittest.TestCase):
	"""Test for basic operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = '%(typecode)s'

'''


# The basic template for testing each array type for operator function. This covers
# starmap and starmapi with overflow checking on and off.
test_template = '''
	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmap(self):
		"""Test starmap %(opcodename)s  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		dataout = array.array('%(typecode)s', [0]*len(data))
		%(bytesconverterdataout)s

		expected = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout)
		%(starmapassertoperation)s


	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmap_ov(self):
		"""Test starmap %(opcodename)s with overflow checking disabled  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		dataout = array.array('%(typecode)s', [0]*len(data))
		%(bytesconverterdataout)s

		expected = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout, disovfl=True)
		%(starmapassertoperation)s


	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmap_lim(self):
		"""Test starmap %(opcodename)s with array limit  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		dataout = array.array('%(typecode)s', [0]*len(data))
		%(bytesconverterdataout)s
		limited = len(data) // 2

		pydataout = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		expected = pydataout[0:limited] + list(dataout)[limited:]

		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout, maxlen=limited)
		%(starmapassertoperation)s


	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmap_ov_lim(self):
		"""Test starmap %(opcodename)s with overflow checking disabled and array limit - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		dataout = array.array('%(typecode)s', [0]*len(data))
		%(bytesconverterdataout)s
		limited = len(data) // 2

		pydataout = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		expected = pydataout[0:limited] + list(dataout)[limited:]

		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout, disovfl=True, maxlen=limited)
		%(starmapassertoperation)s



	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmapi(self):
		"""Test starmapi %(opcodename)s  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s

		expected = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2)
		%(starmapiassertoperation)s


	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmapi_ov(self):
		"""Test starmapi %(opcodename)s with overflow checking disabled  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s

		expected = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2, disovfl=True)
		%(starmapiassertoperation)s


	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmapi_lim(self):
		"""Test starmapi %(opcodename)s with array limit  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		limited = len(data) // 2

		pydataout = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		expected = pydataout[0:limited] + list(data)[limited:]

		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2, maxlen=limited)
		%(starmapiassertoperation)s


	########################################################
	def test_operator_%(opcodename)s_%(testcount)s_starmapi_ov_lim(self):
		"""Test starmapi %(opcodename)s with overflow checking disabled and array limit  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_op_x)s])
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(yparamdata)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		limited = len(data) // 2

		pydataout = [%(pyequ)s for x,y in zip(list(data), list(data2))]
		expected = pydataout[0:limited] + list(data)[limited:]

		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2, disovfl=True, maxlen=limited)
		%(starmapiassertoperation)s



'''

# ==============================================================================


# The basic template for testing parameters.
param_template = '''
##############################################################################
class starmap_parameter_%(typelabel)s(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('%(typecode)s', [%(typeconvert)s(10)]*10)
		self.data2 = array.array('%(typecode)s', [%(typeconvert)s(12)]*10)
		self.dataout = array.array('%(typecode)s', [%(typeconvert)s(0)]*10)
		self.dataempty = array.array('%(typecode)s')
		self.datashort = array.array('%(typecode)s', [%(typeconvert)s(3)]*5)


		# For bytes types, we need a non-array data type.
		if '%(typelabel)s' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code %(typelabel)s.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################

'''
# ==============================================================================



# The basic class template for testing each array type for overflow.
intoverflow_type_template = '''
##############################################################################
class starmap_intoverflow_%(typelabel)s(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = '%(typecode)s'
		self.MaxLimit = arrayfunc.arraylimits.%(typecode)s_max
		self.MinLimit = arrayfunc.arraylimits.%(typecode)s_min


'''


intoverflow_template_stnd = '''
	########################################################
	def test_intoverflow_%(opcodename)s_%(testcount)s_starmap(self):
		"""Test starmap integer overflow in %(opcodename)s  - Array code %(typelabel)s - %(ovfl_comment)s.
		"""
		data = array.array('%(typecode)s', [%(ovfl_data)s]*10)
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(ovfl_param2)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		dataout = array.array('%(typecode)s', [0]*10)
		%(bytesconverterdataout)s

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_%(opcodename)s_%(testcount)s_starmapi(self):
		"""Test starmapi integer overflow in %(opcodename)s  - Array code %(typelabel)s - %(ovfl_comment)s.
		"""
		data = array.array('%(typecode)s', [%(ovfl_data)s]*10)
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(ovfl_param2)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2, disovfl=False)

'''


intoverflow_template_noovfl = '''
	########################################################
	def test_intoverflow_%(opcodename)s_%(testcount)s_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in %(opcodename)s  - Array code %(typelabel)s - %(ovfl_comment)s.
		"""
		data = array.array('%(typecode)s', [%(ovfl_data)s]*10)
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(ovfl_param2)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s
		dataout = array.array('%(typecode)s', [0]*10)
		%(bytesconverterdataout)s

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout)

	########################################################
	def test_intoverflow_%(opcodename)s_%(testcount)s_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in %(opcodename)s  - Array code %(typelabel)s - %(ovfl_comment)s.
		"""
		data = array.array('%(typecode)s', [%(ovfl_data)s]*10)
		%(bytesconverterdata)s
		testdata2 = list(itertools.repeat(%(ovfl_param2)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		%(bytesconverterdata2)s

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2)

'''


floatoverflow_template_stnd = '''
	########################################################
	def test_floatoverflow_%(opcodename)s_%(testcount)s_starmap(self):
		"""Test starmap floating point overflow in %(opcodename)s  - Array code %(typelabel)s - %(ovfl_comment)s.
		"""
		data = array.array('%(typecode)s', [%(ovfl_data)s]*10)
		testdata2 = list(itertools.repeat(%(ovfl_param2)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		dataout = array.array('%(typecode)s', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_%(opcodename)s_%(testcount)s_starmapi(self):
		"""Test starmapi floating point overflow in %(opcodename)s  - Array code %(typelabel)s - %(ovfl_comment)s.
		"""
		data = array.array('%(typecode)s', [%(ovfl_data)s]*10)
		testdata2 = list(itertools.repeat(%(ovfl_param2)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2, disovfl=False)

'''

# ==============================================================================

# The basic class template for testing each floating point library item for math errors.
floaterror_class_template = '''
##############################################################################
class starmap_floaterror_%(typelabel)s(unittest.TestCase):
	"""Test for floating point overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = '%(typecode)s'
		self.MaxLimit = arrayfunc.arraylimits.%(typecode)s_max
		self.MinLimit = arrayfunc.arraylimits.%(typecode)s_min


'''

# Math functions which take two parameters.
floaterror_template_2params = '''
	########################################################
	def test_floaterror_%(opcodename)s_starmap(self):
		"""Test starmap floating point error in %(opcodename)s  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_float_err_x)s])
		testdata2 = list(itertools.repeat(%(test_float_err_y)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)
		dataout = array.array('%(typecode)s', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, data, data2, dataout)

	########################################################
	def test_floaterror_%(opcodename)s_starmapi(self):
		"""Test starmapi floating point error in %(opcodename)s  - Array code %(typelabel)s.
		"""
		data = array.array('%(typecode)s', [%(test_float_err_x)s])
		testdata2 = list(itertools.repeat(%(test_float_err_y)s, len(data)))
		data2 = array.array('%(typecode)s', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, data, data2)

'''


# ==============================================================================


# The template used to generate the tests for nan, inf, -inf in parameters.
nan_param_template = '''
##############################################################################
class starmap_nan_param_%(opcodename)s_%(typelabel)s(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('%(typecode)s', [10.0] * 10)
		self.data2 = array.array('%(typecode)s', [10.0] * 10)

		self.dataok = array.array('%(typecode)s', [10.0] * 10)
		self.dataok2 = array.array('%(typecode)s', [10.0] * 10)
		self.dataout = array.array('%(typecode)s', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_%(opcodename)s_01(self):
		"""Test starmap for lim of nan  - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_%(opcodename)s_02(self):
		"""Test starmapi for lim of nan  - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_%(opcodename)s_03(self):
		"""Test starmap for lim of inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_%(opcodename)s_04(self):
		"""Test starmapi for lim of inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_%(opcodename)s_05(self):
		"""Test starmap for lim of -inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_%(opcodename)s_06(self):
		"""Test starmapi for lim of -inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_%(opcodename)s_07(self):
		"""Test starmap for ov of nan  - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_%(opcodename)s_08(self):
		"""Test starmapi for ov of nan  - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_%(opcodename)s_09(self):
		"""Test starmap for ov of inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_%(opcodename)s_10(self):
		"""Test starmapi for ov of inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_%(opcodename)s_11(self):
		"""Test starmap for ov of -inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_%(opcodename)s_12(self):
		"""Test starmapi for ov of -inf  - Array code %(typelabel)s.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.data, self.data2, disovfl=float('-inf'))


##############################################################################
'''



# ==============================================================================


# The template used to start off the tests for nan, inf, -inf in data arrays.
nan_data_header_template = '''
##############################################################################
class starmap_nan_data_%(opcodename)s_%(seq)s_%(typelabel)s(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in data.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('%(typecode)s', [%(paramdata)s] * 10)
		self.dataout = array.array('%(typecode)s', itertools.repeat(0.0, 10))

		self.datainf = array.array('%(typecode)s', [float('inf')] * 10)
		self.datanan = array.array('%(typecode)s', [float('nan')] * 10)
		self.dataninf = array.array('%(typecode)s', [float('-inf')] * 10)

		self.datainf2 = array.array('%(typecode)s', [float('inf')] * 10)
		self.datanan2 = array.array('%(typecode)s', [float('nan')] * 10)
		self.dataninf2 = array.array('%(typecode)s', [float('-inf')] * 10)

		self.dataok = array.array('%(typecode)s', [%(xparamdata)s] * 10)
		self.dataok2 = array.array('%(typecode)s', [%(yparamdata)s] * 10)
		self.dataout2 = array.array('%(typecode)s', itertools.repeat(0.0, 10))

		# We use this for some tests.
		self.resultone = array.array('%(typecode)s', itertools.repeat(1.0, 10))
		self.resultzero = array.array('%(typecode)s', itertools.repeat(0.0, 10))

'''



# The template used to generate the tests for nan, inf, -inf in data arrays
# when exceptions are not expected.
nan_data_noerror_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)



	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)

		for dataoutitem, expecteditem in zip(self.%(testarray)s, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)



	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)



	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		for dataoutitem, expecteditem in zip(self.%(testarray)s, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


'''


# The template used to generate the tests for nan, inf, -inf in data arrays
# when exceptions are expected.
nan_data_error_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2, self.dataout)

		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2)

		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)



	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		for dataoutitem, expecteditem in zip(self.%(testarray)s, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


'''




# The template used to generate the tests for nan, inf, -inf in data arrays
# when non-finite results are expected, but the C library result may not be the
# same as the native Python result.
nan_data_notfinite_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap for data of %(testlabel)s where an error is expected - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2, self.dataout)

		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi for data of %(testlabel)s where an error is expected - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2)

		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap for data of %(testlabel)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		# Test if both give non-finite results. The results may not be the same (e.g. NaN and inf).
		self.assertEqual(all([math.isfinite(x) for x in self.dataout]), all([math.isfinite(x) for x in expected]))


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi for data of %(testlabel)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]

		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		# Test if both give non-finite results. The results may not be the same (e.g. NaN and inf).
		self.assertEqual(all([math.isfinite(x) for x in self.%(testarray)s]), all([math.isfinite(x) for x in expected]))


'''



# The template used to generate the tests for nan, inf, -inf in data arrays
# when the results may not match the native Python results, but the result is
# known to be zero.
nan_data_zeroresult_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# The expected result is always zero.
		expected = array.array('%(typecode)s', itertools.repeat(0.0, len(self.%(testarray)s)))

		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)

		self.assertEqual(self.dataout, expected)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# The expected result is always zero.
		expected = array.array('%(typecode)s', itertools.repeat(0.0, len(self.%(testarray)s)))

		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)

		self.assertEqual(self.%(testarray)s, expected)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# The expected result is always zero.
		expected = array.array('%(typecode)s', itertools.repeat(0.0, len(self.%(testarray)s)))

		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		self.assertEqual(self.dataout, expected)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# The expected result is always zero.
		expected = array.array('%(typecode)s', itertools.repeat(0.0, len(self.%(testarray)s)))

		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		self.assertEqual(self.%(testarray)s, expected)


'''



# The template used to generate the tests for nan, inf, -inf in data arrays
# when the results may not match the native Python results, but the result is
# known to be nan.
nan_data_nanresult_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		# NaN cannot be compared using normal means.
		for dataoutitem in self.dataout:
			self.assertTrue(math.isnan(dataoutitem))


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		# NaN cannot be compared using normal means.
		for dataoutitem in self.%(testarray)s:
			self.assertTrue(math.isnan(dataoutitem))


'''


# The template used to generate the tests for when the second array is nan, inf, -inf
# and this will produce an arithmetic overflow error.
nan_data_ovfldataerr_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# This is the actual test.
		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking on - Array code %(typelabel)s.
		"""
		# This is the actual test.
		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# This is the actual test.
		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi array 1 of %(testlabel)s array 2 of %(testlabel2)s with overflow checking off - Array code %(typelabel)s.
		"""
		# This is the actual test.
		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)


'''


# The template used to generate the tests for nan, inf, -inf in data arrays
# for floordiv with inf or -inf. This is a special case due to the results of 
# dividing by infinity.
nan_data_floordiv_template = '''
	########################################################
	def test_%(testarray)s_%(opcodename)s_amap(self):
		"""Test amap for data of %(testlabel)s with overflow checking on and param data of %(paramdata)s  - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		if '%(opcodename)s' == 'af_floordiv':
			expected = [x / y for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		else:
			expected = [y / x for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]


		# This is the actual test. NaN, Inf, and -Inf are expected to raise errors.
		if not math.isfinite(expected[0]):
			with self.assertRaises(ArithmeticError):
				arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)
		else:
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)
			for dataoutitem, expecteditem in zip(list(self.dataout), expected):
				# NaN cannot be compared using normal means.
				if math.isnan(expecteditem):
					self.assertTrue(math.isnan(dataoutitem))
				elif math.isnan(dataoutitem):
					self.assertTrue(math.isnan(expecteditem))
				# Inf or -inf can be compared using an exact match.
				elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
					self.assertEqual(dataoutitem, expecteditem)
				# Anything else can be compared normally.
				else:
					deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
					self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


	########################################################
	def test_%(testarray)s_%(opcodename)s_amapi(self):
		"""Test amapi for data of %(testlabel)s with overflow checking on and param data of %(paramdata)s  - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		if '%(opcodename)s' == 'af_floordiv':
			expected = [x / y for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		else:
			expected = [y / x for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]


		# This is the actual test. NaN, Inf, and -Inf are expected to raise errors.
		if not math.isfinite(expected[0]):
			with self.assertRaises(ArithmeticError):
				arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)
		else:
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)
			for dataoutitem, expecteditem in zip(list(self.%(testarray)s), expected):
				# NaN cannot be compared using normal means.
				if math.isnan(expecteditem):
					self.assertTrue(math.isnan(dataoutitem))
				elif math.isnan(dataoutitem):
					self.assertTrue(math.isnan(expecteditem))
				# Inf or -inf can be compared using an exact match.
				elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
					self.assertEqual(dataoutitem, expecteditem)
				# Anything else can be compared normally.
				else:
					deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
					self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


	########################################################
	def test_%(testarray)s_%(opcodename)s_ov_amap(self):
		"""Test amap for data of %(testlabel)s with overflow checking off and param data of %(paramdata)s  - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		if '%(opcodename)s' == 'af_floordiv':
			expected = [x / y for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		else:
			expected = [y / x for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]


		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		for dataoutitem, expecteditem in zip(list(self.dataout), expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


	########################################################
	def test_%(testarray)s_%(opcodename)s_ov_amapi(self):
		"""Test amapi for data of %(testlabel)s with overflow checking off and param data of %(paramdata)s  - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		if '%(opcodename)s' == 'af_floordiv':
			expected = [x / y for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		else:
			expected = [y / x for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]


		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		for dataoutitem, expecteditem in zip(list(self.%(testarray)s), expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


'''


# The template used to generate the tests for nan, inf, -inf in data arrays
# for raise to power (pow) where we raise nan, inf, or -inf to some numeric value.
nan_data_powerror_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# pow(0.0, -inf) is a special case.
			expected = [float('inf')] * len(self.%(testarray)s)


		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2, self.dataout)

		# This is the actual test. NaN, Inf, and -Inf are expected to raise errors.
		if not math.isfinite(expected[0]):
			with self.assertRaises(ArithmeticError):
				arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)
		else:
			# Raise anything to the power of 0 produces a result of 1.0, so we get a value out. 
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)
			self.assertEqual(self.dataout, array.array('%(typecode)s', expected))


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# pow(0.0, -inf) is a special case.
			expected = [float('inf')] * len(self.%(testarray)s)


		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2)

		# This is the actual test. NaN, Inf, and -Inf are expected to raise errors.
		if not math.isfinite(expected[0]):
			with self.assertRaises(ArithmeticError):
				arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)
		else:
			# Raise anything to the power of 0 produces a result of 1.0, so we get a value out. 
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)
			self.assertEqual(self.%(testarray)s, array.array('%(typecode)s', expected))


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# pow(0.0, -inf) is a special case.
			expected = [float('inf')] * len(self.%(testarray)s)


		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# pow(0.0, -inf) is a special case.
			expected = [float('inf')] * len(self.%(testarray)s)


		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		for dataoutitem, expecteditem in zip(self.%(testarray)s, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


'''


# The template used to generate the tests for nan, inf, -inf in data arrays
# when exceptions are expected. This is a special version for fmod, and fmod_r.
nan_data_fmoderror_param_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# All error conditions expect NaN.
			expected = [float('nan')] * len(self.%(testarray)s)


		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2, self.dataout)

		# This is the actual test. NaN, Inf, and -Inf are expected to raise errors.
		if not math.isfinite(expected[0]):
			with self.assertRaises(ArithmeticError):
				arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)
		else:
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)
			self.assertEqual(self.dataout, array.array('%(typecode)s', expected))


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# All error conditions expect NaN.
			expected = [float('nan')] * len(self.%(testarray)s)


		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2)

		# This is the actual test. NaN, Inf, and -Inf are expected to raise errors.
		if not math.isfinite(expected[0]):
			with self.assertRaises(ArithmeticError):
				arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)
		else:
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)
			self.assertEqual(self.%(testarray)s, array.array('%(typecode)s', expected))


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# All error conditions expect NaN.
			expected = [float('nan')] * len(self.%(testarray)s)


		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		try:
			expected = [%(pyequ)s for x,y in zip(self.%(testarray)s, self.%(testarray2)s)]
		except:
			# All error conditions expect NaN.
			expected = [float('nan')] * len(self.%(testarray)s)


		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		for dataoutitem, expecteditem in zip(self.%(testarray)s, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


'''


# The template used to generate the tests for nan, inf, -inf in data arrays
# when exceptions are expected. This is a special version for af_mod, and af_mod_r.
nan_data_af_mod_error_param_template = '''
	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2, self.dataout)

		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s where an error is expected - Array code %(typelabel)s.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.dataok, self.dataok2)

		# This is the actual test.
		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmap(self):
		"""Test starmap for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		# All error conditions expect NaN.
		expected = [float('nan')] * len(self.%(testarray)s)


		# This is the actual test.
		arrayfunc.starmap(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, self.dataout, disovfl=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


	########################################################
	def test_%(testarray)s_%(testarray2)s_%(opcodename)s_ov_starmapi(self):
		"""Test starmapi for data of %(testlabel)s and %(paramdata)s with overflow checking off - Array code %(typelabel)s.
		"""
		# Calculate the expected result.
		# All error conditions expect NaN.
		expected = [float('nan')] * len(self.%(testarray)s)


		# This is the actual test.
		arrayfunc.starmapi(arrayfunc.aops.%(opcodename)s, self.%(testarray)s, self.%(testarray2)s, disovfl=True)

		for dataoutitem, expecteditem in zip(self.%(testarray)s, expected):
			# NaN cannot be compared using normal means.
			if math.isnan(expecteditem):
				self.assertTrue(math.isnan(dataoutitem))
			elif math.isnan(dataoutitem):
				self.assertTrue(math.isnan(expecteditem))
			# Inf or -inf can be compared using an exact match.
			elif (not math.isfinite(dataoutitem)) or (not math.isfinite(expecteditem)):
				self.assertEqual(dataoutitem, expecteditem)
			# Anything else can be compared normally.
			else:
				deltaval = min((abs(expecteditem), abs(dataoutitem))) / 100.0
				self.assertAlmostEqual(dataoutitem, expecteditem, delta=deltaval)


'''



# ==============================================================================

# These templates handle whether to do exact compares with integer arrays, or
# approximate compares with floating point compares.
starmap_exact_template = """self.assertEqual(list(dataout), expected)"""
starmap_almost_template = """for dataoutitem, expecteditem in zip(list(dataout), expected):
			self.assertAlmostEqual(dataoutitem, expecteditem, delta=abs(expecteditem)/100)"""

starmapi_exact_template = """self.assertEqual(list(data), expected)"""
starmapi_almost_template = """for dataoutitem, expecteditem in zip(list(data), expected):
			self.assertAlmostEqual(dataoutitem, expecteditem, delta=abs(expecteditem)/100)"""

# ==============================================================================

classend = """##############################################################################
"""

endtemplate = """
##############################################################################
if __name__ == '__main__':
	with open('arrayfunc_unittest.txt', 'a') as f:
		f.write('\\n\\n')
		f.write('starmap\\n\\n')
		trun = unittest.TextTestRunner(f)
		unittest.main(testRunner=trun)

##############################################################################
"""


# ==============================================================================



# ==============================================================================

# These are all the test code templates. 
test_templates = {'test_template' : test_template,
	'intoverflow_template_stnd' : intoverflow_template_stnd,
	'intoverflow_template_noovfl' : intoverflow_template_noovfl,
	'floatoverflow_template_stnd' : floatoverflow_template_stnd,
	'floaterror_template_2params' : floaterror_template_2params,
	'param_template' : param_template,
	'nan_param_template' : nan_param_template,


	'nan_data_notfinite_template' : nan_data_notfinite_template,
	'nan_data_zeroresult_template' : nan_data_zeroresult_template,
	'nan_data_nanresult_template' : nan_data_nanresult_template,
	'nan_data_ovfldataerr_template' : nan_data_ovfldataerr_template,


	'nan_data_powerror_template' : nan_data_powerror_template,
	'nan_data_fmoderror_param_template' : nan_data_fmoderror_param_template,
	'nan_data_af_mod_error_param_template' : nan_data_af_mod_error_param_template,
	'nan_data_floordiv_template' : nan_data_floordiv_template,

	'nan_data_error_template' : nan_data_error_template,
	'nan_data_noerror_template' : nan_data_noerror_template,


}



# ==============================================================================

# Read the operator and function definition data.
csvdatatmp = codegen_common.ReadCSVData('arrayfunc.csv')
csvdata = [x for x in csvdatatmp if x['#params'] != '0']


# ==============================================================================
# Test basic operations.

def makeoptests(csvdata, arraycode, arraylabel):
	"""Make a complete set of tests for all array types.
	"""

	# The type of unit test assert we use for testing the results depends on
	# whether we are comparing floating point or integer values.
	if arraycode in codegen_common.signedint:
		opdata = [x for x in csvdata if x['test_op_templ_isigned'] != '' and x['#params'] != '0']
		typeconvert = 'int'

	elif arraycode in codegen_common.unsignedint:
		opdata = [x for x in csvdata if x['test_op_templ_iunsigned'] != '' and x['#params'] != '0']
		typeconvert = 'int'

	elif arraycode in codegen_common.floatarrays:
		opdata = [x for x in csvdata if x['test_op_templ_float'] != '' and x['#params'] != '0']
		typeconvert = 'float'

	else:
		print('Unknow array code %s' % arraycode)


	# Create the records.
	testresults = []
	for rec in opdata:
		# Avoid changing the original record.
		testrec = {}
		testrec['typecode'] = arraycode
		testrec['typelabel'] = arraylabel

		testrec.update(rec)

		if arraycode in codegen_common.signedint:
			test_op_x = rec['test_op_x_isigned']
			test_op_y = rec['test_op_y_isigned']
			testtemplate = test_templates[rec['test_op_templ_isigned']]
			testrec['starmapassertoperation'] = starmap_exact_template
			testrec['starmapiassertoperation'] = starmapi_exact_template

		elif arraycode in codegen_common.unsignedint:
			test_op_x = rec['test_op_x_iunsigned']
			test_op_y = rec['test_op_y_iunsigned']
			testtemplate = test_templates[rec['test_op_templ_iunsigned']]
			testrec['starmapassertoperation'] = starmap_exact_template
			testrec['starmapiassertoperation'] = starmapi_exact_template

		elif arraycode in codegen_common.floatarrays:
			test_op_x = rec['test_op_x_float']
			test_op_y = rec['test_op_y_float']
			testtemplate = test_templates[rec['test_op_templ_float']]
			testrec['starmapassertoperation'] = starmap_almost_template
			testrec['starmapiassertoperation'] = starmapi_almost_template

		else:
			print('Unknow array code %s' % arraycode)


		pyop = rec['py_equation'] % {'op' : rec['pyoperator'], 'X' : 'data[x]', 'Y' : 'data2[x]', 'typeconvert' : typeconvert}
		testrec['pyequ'] = pyop
		testrec['test_op_x'] = test_op_x

		# Split the individual test values out.
		yparamdata = test_op_y.split(',')


		# Add in the byte converter for bytes data.
		if arraylabel == 'bytes':
			testrec['bytesconverterdata'] = bytesconverterdata
			testrec['bytesconverterdata2'] = bytesconverterdata2
			testrec['bytesconverterdataout'] = bytesconverterdataout
		else:
			testrec['bytesconverterdata'] = ''
			testrec['bytesconverterdata2'] = ''
			testrec['bytesconverterdataout'] = ''


		testcount = 0
		for testval in yparamdata:
			testcount += 1
			testrec['testcount'] = testcount
			testrec['yparamdata'] = testval
			testresults.append(testtemplate % testrec)

	return ''.join(testresults)



# ==============================================================================



# ==============================================================================

def makeoverflowtestset(csvdata, arraycode, arraylabel):
	"""Make a complete set of tests for overflow tests.
	"""
	# The type of unit test assert we use for testing the results depends on
	# whether we are comparing floating point or integer values.
	if arraycode in codegen_common.signedint:
		opdata = [x for x in csvdata if x['test_ovfl_templ_isigned'] != '' and x['#params'] != '0']

	elif arraycode in codegen_common.unsignedint:
		opdata = [x for x in csvdata if x['test_ovfl_templ_iunsigned'] != '' and x['#params'] != '0']

	elif arraycode in codegen_common.floatarrays:
		opdata = [x for x in csvdata if x['test_ovfl_templ_float'] != '' and x['#params'] != '0']

	else:
		print('Unknow array code %s' % arraycode)


	# Create the records.
	testresults = []
	for rec in opdata:
		# Avoid changing the original record.
		testrec = {}
		testrec['typecode'] = arraycode
		testrec['typelabel'] = arraylabel

		testrec.update(rec)

		if arraycode in codegen_common.signedint:
			test_op_x = rec['test_ovfl_x_isigned']
			test_op_y = rec['test_ovfl_y_isigned']
			testtemplate = rec['test_ovfl_templ_isigned']
			testcomment = rec['test_ovfl_comment_isigned']

		elif arraycode in codegen_common.unsignedint:
			test_op_x = rec['test_ovfl_x_iunsigned']
			test_op_y = rec['test_ovfl_y_iunsigned']
			testtemplate = rec['test_ovfl_templ_iunsigned']
			testcomment = rec['test_ovfl_comment_iunsigned']

		elif arraycode in codegen_common.floatarrays:
			test_op_x = rec['test_ovfl_x_float']
			test_op_y = rec['test_ovfl_y_float']
			testtemplate = rec['test_ovfl_templ_float']
			testcomment = rec['test_ovfl_comment_float']

		else:
			print('Unknow array code %s' % arraycode)


		# Split the individual test values out.
		xparamdata = test_op_x.split(',')
		yparamdata = test_op_y.split(',')

		# Split the list of test templates
		templatedata = testtemplate.split(',')
		# Split the comments.
		testcomment = testcomment.split(',')


		# Add in the byte converter for bytes data.
		if arraylabel == 'bytes':
			testrec['bytesconverterdata'] = bytesconverterdata
			testrec['bytesconverterdata2'] = bytesconverterdata2
			testrec['bytesconverterdataout'] = bytesconverterdataout
		else:
			testrec['bytesconverterdata'] = ''
			testrec['bytesconverterdata2'] = ''
			testrec['bytesconverterdataout'] = ''


		testcount = 0
		# Create multiple tests.
		for template, xparam, yparam, comment in itertools.zip_longest(templatedata, xparamdata, yparamdata, testcomment):
			testcount += 1
			testrec['testcount'] = testcount
			testrec['ovfl_comment'] = comment
			testrec['ovfl_data'] = xparam
			testrec['ovfl_param2'] = yparam
			testresults.append(test_templates[template] % testrec)

	return ''.join(testresults)


# ==============================================================================

def makefloaterrortestset(csvdata, arraycode):
	"""Make a complete set of tests for floating point math library error tests.
	"""

	# Separate out the instructions which need to be checked for overflow.
	recdata = [x for x in csvdata if x['test_float_err_template'] != '' and x['#params'] != '0']

	recset = []

	# Create the tests for one parameter.
	for instrdata in recdata:
		testrec = {}
		testrec['typecode'] = arraycode
		testrec['typelabel'] = arraycode
		testrec.update(instrdata)
		template = test_templates[testrec['test_float_err_template']]
		recset.append(template % testrec)


	recset.append(classend)

	return ''.join(recset)


# ==============================================================================

def makenanparamtestset(csvdata, arraycode):
	"""Make a complete set of tests for floating point nan, inf, and -inf parameters.
	These parameters are the optional control parameters.
	"""

	# Separate out the instructions which have floating point versions and 
	# which take one parameter.
	recdata = [x for x in csvdata if (x['c_code_template_float'] != '') and (x['#params'] != '0')]

	recset = []

	# Create the tests for one parameter.
	for instrdata in recdata:
		testrec = {}
		testrec['typecode'] = arraycode
		testrec['typelabel'] = arraycode
		testrec.update(instrdata)


		recset.append(nan_param_template % testrec)


	return ''.join(recset)

# ==============================================================================

def makenandatatests(csvdata, arraycode):
	"""Make a complete set of tests for floating point nan, inf, and -inf data arrays.
	"""

	# Separate out the instructions which have floating point versions and 
	# which take one parameter.
	recdata = [x for x in csvdata if x['test_starmap_nan_data1_template'] != '' and x['#params'] != '0']

	recset = []

	# Create the tests.
	for instrdata in recdata:

		testrec = {}
		testrec['typecode'] = arraycode
		testrec['typelabel'] = arraycode
		testrec.update(instrdata)


		# The equation for calculating the expected results.
		testrec['pyequ'] = testrec['py_equation'] % {'op' : testrec['pyoperator'], 'typeconvert' : ''}


		# Templates for first data array.
		nantemplate1 = test_templates[testrec['test_starmap_nan_data1_template']]
		inftemplate1 = test_templates[testrec['test_starmap_inf_data1_template']]
		ninftemplate1 = test_templates[testrec['test_starmap_ninf_data1_template']]

		# Templates for second data array.
		nantemplate2 = test_templates[testrec['test_starmap_nan_data2_template']]
		inftemplate2 = test_templates[testrec['test_starmap_inf_data2_template']]
		ninftemplate2 = test_templates[testrec['test_starmap_ninf_data2_template']]


		# Split the individual test values out.
		yparamvalues = testrec['test_op_y_float'].split(',')
		xparamvalues = testrec['test_op_x_float'].split(',')

		testrec['xparamdata'] = xparamvalues[0]


		for seqnum, paramdata in enumerate(yparamvalues):
			baseseq = seqnum
			testrec['seq'] = seqnum
			testrec['paramdata'] = paramdata

			testrec['yparamdata'] = paramdata


			# Construct the test class header.
			recset.append(nan_data_header_template % testrec)

			testrec['testarray2'] = 'data'
			testrec['testlabel2'] = paramdata

			# Construct the nan test text.
			testrec['testarray'] = 'datanan'
			testrec['testlabel'] = 'nan'
			recset.append(nantemplate1 % testrec)

			# Construct the inf test text.
			testrec['testarray'] = 'datainf'
			testrec['testlabel'] = 'inf'
			recset.append(inftemplate1 % testrec)

			# Construct the -inf test text.
			testrec['testarray'] = 'dataninf'
			testrec['testlabel'] = '-inf'
			recset.append(ninftemplate1 % testrec)

			recset.append(classend)


		# Now test with the data swapped.

		testrec['yparamdata'] = yparamvalues[0]

		for seqnum, paramdata in enumerate(xparamvalues):
			testrec['seq'] = seqnum + baseseq
			testrec['paramdata'] = paramdata

			testrec['xparamdata'] = paramdata

			# Construct the test class header.
			recset.append(nan_data_header_template % testrec)

			testrec['testarray'] = 'data'
			testrec['testlabel'] = paramdata

			# Construct the nan test text.
			testrec['testarray2'] = 'datanan'
			testrec['testlabel2'] = 'nan'
			recset.append(nantemplate2 % testrec)

			# Construct the inf test text.
			testrec['testarray2'] = 'datainf'
			testrec['testlabel2'] = 'inf'
			recset.append(inftemplate2 % testrec)

			# Construct the -inf test text.
			testrec['testarray2'] = 'dataninf'
			testrec['testlabel2'] = '-inf'
			recset.append(ninftemplate2 % testrec)

			recset.append(classend)

	return ''.join(recset)



# ==============================================================================

def FormatHeaderDate(headerdate, seqnum):
	"""Format the date for the copyright header.
	"""
	headerdate['testfilename'] = 'test_starmap' + str(seqnum)
	return codegen_common.HeaderTemplate % headerdate


def FormatFileName(seqnum):
	"""Format the file name.
	"""
	return 'test_starmap' + str(seqnum) + '.py'


# ==============================================================================


# We need to add another code for bytes.
testarraycodes = list(codegen_common.arraycodes)
testarraylabels = list(codegen_common.arraycodes)
testarraycodes.append('B')
testarraylabels.append('bytes')

# ==============================================================================

# Data for the copyright header files.
headerdate = codegen_common.FormatHeaderData('test_starmap', '03-Jul-2014', 'starmap and starmapi')

# ==============================================================================


with open(FormatFileName(1), 'w') as f:
	# The copyright header.
	f.write(FormatHeaderDate(headerdate, 1))

	# Output the generated code for basic operator tests.
	for arraycode, arraylabel in zip(testarraycodes, testarraylabels):
		f.write(type_template % codegen_common.arraytypeclass[arraylabel])
		f.write(''.join(makeoptests(csvdata, arraycode, arraylabel)))
	f.write(endtemplate)



with open(FormatFileName(2), 'w') as f:
	# The copyright header.
	f.write(FormatHeaderDate(headerdate, 2))

	# Output the generated code for integer overflow tests.
	for arraycode, arraylabel in zip(testarraycodes, testarraylabels):
		f.write(intoverflow_type_template % codegen_common.arraytypeclass[arraylabel])
		f.write(''.join(makeoverflowtestset(csvdata, arraycode, arraylabel)))

	# Output the generated code for floating point overflow tests.
	for arraycode in codegen_common.floatarrays:
		f.write(floaterror_class_template % codegen_common.arraytypeclass[arraycode])
		f.write(''.join(makefloaterrortestset(csvdata, arraycode)))

	# Test number and type of parameters.
	for arraylabel in testarraylabels:
		f.write(param_template % codegen_common.arraytypeclass[arraylabel])

	# Test for nan, inf, -inf in parameters.
	for arraycode in codegen_common.floatarrays:
		f.write(''.join(makenanparamtestset(csvdata, arraycode)))

	f.write(endtemplate)


# Tests involving NaN, inf, and -inf.
with open(FormatFileName(3), 'w') as f:
	# The copyright header.
	f.write(FormatHeaderDate(headerdate, 3))

	# Test for nan, inf, -inf in data.
	for arraycode in codegen_common.floatarrays:
		f.write(''.join(makenandatatests(csvdata, arraycode)))
	f.write(endtemplate)





# ==============================================================================

