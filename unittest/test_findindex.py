#!/usr/bin/env python3
##############################################################################
# Project:  arrayfunc
# Module:   test_findindex.py
# Purpose:  arrayfunc unit test.
# Language: Python 3.4
# Date:     20-May-2014.
# Ver:      11-May-2019.
#
###############################################################################
#
#   Copyright 2014 - 2019    Michael Griffin    <m12.griffin@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##############################################################################
"""This conducts unit tests for findindex.
"""

##############################################################################
import sys

import array
import itertools
import math
import operator
import platform
import copy

import unittest

import arrayfunc

##############################################################################

##############################################################################

# The following code is all auto-generated.


 

##############################################################################
class findindex_general_even_arraysize_with_simd_b(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code b. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code b. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code b. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code b. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code b. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code b. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code b. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code b. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code b. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code b. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code b. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code b. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code b. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code b. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code b. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_b(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code b. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code b. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code b. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code b. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code b. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code b. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_b(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code b. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code b. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code b. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code b. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code b. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code b. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code b. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code b. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code b. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code b. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code b. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code b. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code b. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code b. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code b. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_b(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code b. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code b. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code b. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code b. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code b. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code b. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('b', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_B(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code B. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code B. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code B. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code B. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code B. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code B. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code B. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code B. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code B. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code B. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code B. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code B. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code B. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code B. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code B. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_B(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code B. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code B. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code B. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code B. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code B. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code B. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_B(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code B. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code B. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code B. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code B. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code B. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code B. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code B. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code B. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code B. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code B. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code B. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code B. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code B. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code B. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code B. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_B(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code B. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code B. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code B. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code B. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code B. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code B. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('B', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_h(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code h. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code h. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code h. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code h. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code h. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code h. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code h. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code h. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code h. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code h. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code h. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code h. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code h. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code h. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code h. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_h(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code h. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code h. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code h. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code h. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code h. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code h. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_h(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code h. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code h. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code h. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code h. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code h. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code h. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code h. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code h. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code h. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code h. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code h. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code h. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code h. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code h. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code h. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_h(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code h. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code h. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code h. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code h. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code h. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code h. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('h', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_H(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code H. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code H. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code H. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code H. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code H. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code H. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code H. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code H. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code H. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code H. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code H. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code H. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code H. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code H. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code H. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_H(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code H. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code H. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code H. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code H. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code H. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code H. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_H(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code H. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code H. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code H. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code H. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code H. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code H. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code H. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code H. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code H. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code H. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code H. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code H. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code H. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code H. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code H. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_H(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code H. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code H. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code H. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code H. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code H. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code H. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('H', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_i(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code i. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code i. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code i. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code i. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code i. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code i. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code i. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code i. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code i. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code i. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code i. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code i. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code i. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code i. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code i. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_i(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code i. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code i. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code i. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code i. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code i. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code i. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_i(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code i. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code i. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code i. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code i. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code i. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code i. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code i. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code i. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code i. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code i. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code i. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code i. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code i. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code i. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code i. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_i(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code i. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code i. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code i. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code i. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code i. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code i. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('i', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_I(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code I. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code I. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code I. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code I. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code I. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code I. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code I. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code I. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code I. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code I. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code I. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code I. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code I. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code I. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code I. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_I(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code I. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code I. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code I. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code I. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code I. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code I. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_I(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code I. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code I. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code I. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code I. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code I. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code I. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code I. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code I. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code I. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code I. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code I. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code I. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code I. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code I. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code I. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_I(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code I. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code I. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code I. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code I. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code I. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code I. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('I', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_l(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code l. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code l. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code l. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code l. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code l. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code l. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code l. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code l. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code l. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code l. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code l. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code l. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code l. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code l. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code l. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_l(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code l. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code l. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code l. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code l. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code l. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code l. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_l(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code l. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code l. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code l. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code l. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code l. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code l. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code l. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code l. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code l. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code l. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code l. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code l. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code l. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code l. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code l. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_l(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code l. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code l. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code l. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code l. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code l. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code l. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('l', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_L(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code L. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code L. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code L. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code L. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code L. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code L. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code L. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code L. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code L. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code L. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code L. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code L. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code L. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code L. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code L. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_L(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code L. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code L. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code L. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code L. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code L. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code L. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_L(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code L. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code L. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code L. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code L. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code L. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code L. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code L. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code L. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code L. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code L. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code L. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code L. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code L. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code L. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code L. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_L(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code L. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code L. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code L. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code L. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code L. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code L. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('L', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code q. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code q. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code q. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code q. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code q. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code q. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code q. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code q. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code q. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code q. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code q. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code q. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code q. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code q. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code q. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code q. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code q. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code q. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code q. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code q. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code q. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code q. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code q. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code q. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code q. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code q. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code q. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code q. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_Q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code Q. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code Q. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code Q. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code Q. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code Q. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code Q. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_Q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code Q. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code Q. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code Q. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code Q. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code Q. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code Q. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_Q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code Q. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code Q. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code Q. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code Q. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code Q. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code Q. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_Q(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code Q. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code Q. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = int(99)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = int(101)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = int(100)
		arrayval = testval - 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = int(101)
		arrayval = int(100)
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(101)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code Q. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code Q. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = int(100)
		arrayval = testval + 1
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code Q. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = int(99)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code Q. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = int(100)
		arrayval = testval
		testdata = array.array('Q', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code f. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code f. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code f. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code f. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code f. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code f. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code f. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code f. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code f. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code f. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code f. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code f. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code f. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code f. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code f. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code f. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code f. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code f. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code f. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code f. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code f. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code f. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code f. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code f. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code f. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code f. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code f. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code f. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code f. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code f. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code f. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code f. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code f. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code f. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code f. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code f. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code f. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code f. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code f. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code f. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code f. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code f. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code d. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code d. General test even length array with SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code d. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code d. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code d. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code d. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code d. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code d. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code d. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code d. General test even length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code d. General test even length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code d. General test even length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code d. General test even length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code d. General test even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code d. General test even length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code d. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code d. General test odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code d. General test odd length array with SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code d. General test odd length array with SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code d. General test odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code d. General test odd length array with SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code d. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code d. General test even length array without SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code d. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code d. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code d. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code d. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code d. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code d. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code d. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code d. General test even length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code d. General test even length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code d. General test even length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code d. General test even length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code d. General test even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code d. General test even length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_general_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic general function operation.
	test_template_findindex
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_basic_eq_a1(self):
		"""Test findindex for eq  - Array code d. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a2(self):
		"""Test findindex for eq  - Array code d. General test odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = float(99)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_eq_a3(self):
		"""Test findindex for eq  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_gt_b1(self):
		"""Test findindex for gt  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b2(self):
		"""Test findindex for gt  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_gt_b3(self):
		"""Test findindex for gt  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ge_c1(self):
		"""Test findindex for ge  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = float(101)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c2(self):
		"""Test findindex for ge  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c3(self):
		"""Test findindex for ge  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is greater than the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval + 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c4(self):
		"""Test findindex for ge  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ge_c5(self):
		"""Test findindex for ge  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is equal to the test value.
		testval = float(100)
		arrayval = testval - 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_lt_d1(self):
		"""Test findindex for lt  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d2(self):
		"""Test findindex for lt  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_lt_d3(self):
		"""Test findindex for lt  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_le_e1(self):
		"""Test findindex for le  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are less than the test value.
		testval = float(101)
		arrayval = float(100)
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e2(self):
		"""Test findindex for le  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are greater than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e3(self):
		"""Test findindex for le  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(101)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e4(self):
		"""Test findindex for le  - Array code d. General test odd length array without SIMD.
		"""
		# All data values are equal to the test value.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_le_e5(self):
		"""Test findindex for le  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is less than the test value.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = arrayval - 2

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_basic_ne_f1(self):
		"""Test findindex for ne  - Array code d. General test odd length array without SIMD.
		"""
		# All data and test values are not the same.
		testval = float(100)
		arrayval = testval + 1
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f2(self):
		"""Test findindex for ne  - Array code d. General test odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = float(99)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_basic_ne_f3(self):
		"""Test findindex for ne  - Array code d. General test odd length array without SIMD.
		"""
		# One test value near the end of the array is not the same.
		testval = float(100)
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################


##############################################################################
class findindex_parameter_b(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('b', [100]*100)
		self.dataempty = array.array('b')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code b.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code b.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_B(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('B', [100]*100)
		self.dataempty = array.array('B')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code B.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code B.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_h(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('h', [100]*100)
		self.dataempty = array.array('h')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code h.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code h.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_H(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('H', [100]*100)
		self.dataempty = array.array('H')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code H.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code H.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_i(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('i', [100]*100)
		self.dataempty = array.array('i')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code i.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code i.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_I(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('I', [100]*100)
		self.dataempty = array.array('I')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code I.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code I.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_l(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('l', [100]*100)
		self.dataempty = array.array('l')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code l.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code l.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_L(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('L', [100]*100)
		self.dataempty = array.array('L')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code L.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code L.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_q(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('q', [100]*100)
		self.dataempty = array.array('q')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code q.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code q.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_Q(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('Q', [100]*100)
		self.dataempty = array.array('Q')
		self.testdata = int(100)
		self.baddata = float(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code Q.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_f(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [100]*100)
		self.dataempty = array.array('f')
		self.testdata = float(100)
		self.baddata = int(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code f.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code f.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_parameter_d(unittest.TestCase):
	"""Test for correct parameters for findindex.
	param_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [100]*100)
		self.dataempty = array.array('d')
		self.testdata = float(100)
		self.baddata = int(100)


	########################################################
	def test_findindex_param_a1(self):
		"""Test exception when no parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a2(self):
		"""Test exception when one parameter passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a3(self):
		"""Test exception when two parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all()


	########################################################
	def test_findindex_param_a4(self):
		"""Test exception when six parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, 99, 0, 99)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1, 2, 3, 4], 99)


	########################################################
	def test_findindex_param_b1(self):
		"""Test exception with invalid keyword parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, xx=2)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all([1,2,3], xx=2)


	########################################################
	def test_findindex_param_b2(self):
		"""Test exception with invalid maxlen keyword parameter type passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, maxlen='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c1(self):
		"""Test exception with invalid first parameter value  - Array code d.
		"""
		with self.assertRaises(ValueError):
			result = arrayfunc.findindex('!', self.data, self.testdata)


	########################################################
	def test_findindex_param_c3(self):
		"""Test exception with invalid first parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex(62, self.data, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_c4(self):
		"""Test exception with invalid array parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', 99, self.testdata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_d1(self):
		"""Test exception with invalid array parameter type  - Array code d.
		"""
		with self.assertRaises(IndexError):
			result = arrayfunc.findindex('==', self.dataempty, self.testdata)


	########################################################
	def test_findindex_param_e1(self):
		"""Test exception with invalid compare parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, 'e')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_e2(self):
		"""Test exception with invalid compare parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.baddata)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


	########################################################
	def test_findindex_param_f1(self):
		"""Test exception with invalid nosimd keyword parameter type passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.findindex('==', self.data, self.testdata, nosimd='x')

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = all(1)


##############################################################################


##############################################################################
class findindex_overflow_b(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('b', [100]*100)
		self.MinVal = arrayfunc.arraylimits.b_min
		self.Maxval = arrayfunc.arraylimits.b_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code b.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code b.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code b.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_B(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('B', [100]*100)
		self.MinVal = arrayfunc.arraylimits.B_min
		self.Maxval = arrayfunc.arraylimits.B_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code B.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code B.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code B.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_h(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('h', [100]*100)
		self.MinVal = arrayfunc.arraylimits.h_min
		self.Maxval = arrayfunc.arraylimits.h_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code h.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code h.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code h.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_H(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('H', [100]*100)
		self.MinVal = arrayfunc.arraylimits.H_min
		self.Maxval = arrayfunc.arraylimits.H_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code H.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code H.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code H.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_i(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('i', [100]*100)
		self.MinVal = arrayfunc.arraylimits.i_min
		self.Maxval = arrayfunc.arraylimits.i_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code i.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code i.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code i.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_I(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('I', [100]*100)
		self.MinVal = arrayfunc.arraylimits.I_min
		self.Maxval = arrayfunc.arraylimits.I_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code I.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code I.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code I.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_l(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('l', [100]*100)
		self.MinVal = arrayfunc.arraylimits.l_min
		self.Maxval = arrayfunc.arraylimits.l_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code l.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code l.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code l.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_q(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('q', [100]*100)
		self.MinVal = arrayfunc.arraylimits.q_min
		self.Maxval = arrayfunc.arraylimits.q_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code q.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal - 1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code q.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval + 1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code q.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################


##############################################################################
class findindex_overflow_f(unittest.TestCase):
	"""Test for parameter overflow.
	overflow_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [100]*100)
		self.MinVal = arrayfunc.arraylimits.f_min
		self.Maxval = arrayfunc.arraylimits.f_max


	########################################################
	def test_overflow_01_min(self):
		"""Test parameter overflow min  - Array code f.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.MinVal * 1.1)

	########################################################
	def test_overflow_02_max(self):
		"""Test parameter overflow max  - Array code f.
		"""
		with self.assertRaises(OverflowError):
			result = arrayfunc.findindex('==', self.data, self.Maxval * 1.1)

	########################################################
	def test_overflow_03_ok(self):
		"""Test no overflow. These should not overflow  - Array code f.
		"""
		result = arrayfunc.findindex('==', self.data, self.MinVal)
		result = arrayfunc.findindex('==', self.data, self.Maxval)

##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_nan_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_nan
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_nan_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_nan_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.nan
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.nan
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.nan
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_nan_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite nan odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.nan

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_inf_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_inf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_inf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval - 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_inf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_inf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code f. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('f', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array with SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval )
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf even length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################

 

##############################################################################
class findindex_nonfinite_neginf_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test for basic fininte number operation.
	test_template_findindex_nonfinite_neginf
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0
		
		self.arraylength = 96 + arrayextension

		self.ARR_ERR_NOTFOUND = -1


	########################################################
	def test_findindex_neginf_eq_a1(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a2(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a3(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_eq_a4(self):
		"""Test findindex for eq  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y == testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('==', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_gt_b1(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b2(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b3(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_gt_b4(self):
		"""Test findindex for gt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval + 1.0

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y > testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_ge_c1(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c2(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c3(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ge_c4(self):
		"""Test findindex for ge  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y >= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('>=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d1(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d2(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d3(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_lt_d4(self):
		"""Test findindex for lt  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y < testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



	########################################################
	def test_findindex_neginf_le_e1(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e2(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e3(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = 100.0
		arrayval = -math.inf
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_le_e4(self):
		"""Test findindex for le  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y <= testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('<=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f1(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are the same.
		testval = -math.inf
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, self.ARR_ERR_NOTFOUND)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f2(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# All data and test values are different.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f3(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array is the same.
		testval = -math.inf
		arrayval = 100.0
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = testval

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, 0)
		self.assertEqual(result, expected)


	########################################################
	def test_findindex_neginf_ne_f4(self):
		"""Test findindex for ne  - Array code d. Test nonfinite negative inf odd length array without SIMD.
		"""
		# One test value near the end of the array matches.
		testval = 100.0
		arrayval = testval
		testdata = array.array('d', [arrayval] * self.arraylength)
		testdata[-2] = -math.inf

		# Verify test compatibility.
		pyfind = [x for x,y in enumerate(testdata) if y != testval]
		expected = pyfind[0] if len(pyfind) > 0 else self.ARR_ERR_NOTFOUND

		# The actual test.
		result = arrayfunc.findindex('!=', testdata, testval , nosimd=True)
		self.assertEqual(result, len(testdata) - 2)
		self.assertEqual(result, expected)



##############################################################################


##############################################################################
if __name__ == '__main__':

	# Check to see if the log file option has been selected. This is an option
	# which we have added in order to decide where to output the results.
	if '-l' in sys.argv:
		# Remove the option from the argument list so that "unittest" does 
		# not complain about unknown options.
		sys.argv.remove('-l')

		with open('arrayfunc_unittest.txt', 'a') as f:
			f.write('\n\n')
			f.write('findindex\n\n')
			trun = unittest.TextTestRunner(f)
			unittest.main(testRunner=trun)
	else:
		unittest.main()

##############################################################################
