#!/usr/bin/env python3
##############################################################################
# Project:  arrayfunc
# Module:   test_starmap2.py
# Purpose:  arrayfunc unit test.
# Language: Python 3.4
# Date:     03-Jul-2014.
# Ver:      20-May-2015.
#
###############################################################################
#
#   Copyright 2014 - 2015    Michael Griffin    <m12.griffin@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##############################################################################
"""This conducts unit tests for starmap and starmapi.
"""

##############################################################################
import array
import itertools
import math
import operator
import platform

import unittest

import arrayfunc

##############################################################################

##############################################################################

# The following code is all auto-generated.



##############################################################################
class starmap_intoverflow_b(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'b'
		self.MaxLimit = arrayfunc.arraylimits.b_max
		self.MinLimit = arrayfunc.arraylimits.b_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code b - Exceed max value.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code b - Exceed max value.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_add_2_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code b - Exceed min value.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_2_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code b - Exceed min value.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2)


	########################################################
	def test_intoverflow_af_div_2_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_2_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_3_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code b - Negate.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_3_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code b - Negate.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2)


	########################################################
	def test_intoverflow_af_div_r_2_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_3_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code b - Negate.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code b - Negate.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code b - Negate.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code b - Negate.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_r_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code b - Negate.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code b - Negate.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2)


	########################################################
	def test_intoverflow_af_mod_2_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code b - Div by zero.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2)


	########################################################
	def test_intoverflow_af_mod_r_2_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code b - Div by zero.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code b - max positive.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code b - max positive.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_2_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code b - min positive.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_2_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code b - min positive.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_3_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code b - max negative.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_3_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code b - max negative.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_4_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code b - min negative.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_4_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code b - min negative.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_5_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code b - complement.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_5_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code b - complement.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_1_starmap(self):
		"""Test starmap integer overflow in af_pow  - Array code b - raised to negative power.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow  - Array code b - raised to negative power.
		"""
		data = array.array('b', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_r_1_starmap(self):
		"""Test starmap integer overflow in af_pow_r  - Array code b - raised to negative power.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow_r  - Array code b - raised to negative power.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code b - greater than max.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code b - greater than max.
		"""
		data = array.array('b', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_2_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code b - less than min.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code b - less than min.
		"""
		data = array.array('b', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code b - greater than max.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code b - greater than max.
		"""
		data = array.array('b', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_2_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code b - less than min.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('b', testdata2)
		
		dataout = array.array('b', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code b - less than min.
		"""
		data = array.array('b', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('b', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_B(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'B'
		self.MaxLimit = arrayfunc.arraylimits.B_max
		self.MinLimit = arrayfunc.arraylimits.B_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code B - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code B - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code B - divide by zero.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_1_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code B - divide by zero.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code B - divide by zero.
		"""
		data = array.array('B', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code B - divide by zero.
		"""
		data = array.array('B', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code B - divide by zero.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code B - divide by zero.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code B - divide by zero.
		"""
		data = array.array('B', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code B - divide by zero.
		"""
		data = array.array('B', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code B - divide by zero.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code B - divide by zero.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code B - divide by zero.
		"""
		data = array.array('B', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code B - divide by zero.
		"""
		data = array.array('B', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code B - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code B - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code B - greater than max.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code B - greater than max.
		"""
		data = array.array('B', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code B - greater than max.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		
		dataout = array.array('B', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code B - greater than max.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_h(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'h'
		self.MaxLimit = arrayfunc.arraylimits.h_max
		self.MinLimit = arrayfunc.arraylimits.h_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code h - Exceed max value.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code h - Exceed max value.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_add_2_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code h - Exceed min value.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_2_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code h - Exceed min value.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2)


	########################################################
	def test_intoverflow_af_div_2_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_2_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_3_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code h - Negate.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_3_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code h - Negate.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2)


	########################################################
	def test_intoverflow_af_div_r_2_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_3_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code h - Negate.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code h - Negate.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code h - Negate.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code h - Negate.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_r_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code h - Negate.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code h - Negate.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2)


	########################################################
	def test_intoverflow_af_mod_2_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code h - Div by zero.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2)


	########################################################
	def test_intoverflow_af_mod_r_2_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code h - Div by zero.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code h - max positive.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code h - max positive.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_2_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code h - min positive.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_2_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code h - min positive.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_3_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code h - max negative.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_3_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code h - max negative.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_4_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code h - min negative.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_4_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code h - min negative.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_5_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code h - complement.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_5_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code h - complement.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_1_starmap(self):
		"""Test starmap integer overflow in af_pow  - Array code h - raised to negative power.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow  - Array code h - raised to negative power.
		"""
		data = array.array('h', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_r_1_starmap(self):
		"""Test starmap integer overflow in af_pow_r  - Array code h - raised to negative power.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow_r  - Array code h - raised to negative power.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code h - greater than max.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code h - greater than max.
		"""
		data = array.array('h', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_2_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code h - less than min.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code h - less than min.
		"""
		data = array.array('h', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code h - greater than max.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code h - greater than max.
		"""
		data = array.array('h', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_2_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code h - less than min.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('h', testdata2)
		
		dataout = array.array('h', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code h - less than min.
		"""
		data = array.array('h', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('h', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_H(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'H'
		self.MaxLimit = arrayfunc.arraylimits.H_max
		self.MinLimit = arrayfunc.arraylimits.H_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code H - max overflow.
		"""
		data = array.array('H', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code H - max overflow.
		"""
		data = array.array('H', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code H - divide by zero.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_1_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code H - divide by zero.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code H - divide by zero.
		"""
		data = array.array('H', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code H - divide by zero.
		"""
		data = array.array('H', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code H - divide by zero.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code H - divide by zero.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code H - divide by zero.
		"""
		data = array.array('H', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code H - divide by zero.
		"""
		data = array.array('H', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code H - divide by zero.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code H - divide by zero.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code H - divide by zero.
		"""
		data = array.array('H', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code H - divide by zero.
		"""
		data = array.array('H', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code H - max overflow.
		"""
		data = array.array('H', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code H - max overflow.
		"""
		data = array.array('H', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code H - greater than max.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code H - greater than max.
		"""
		data = array.array('H', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code H - greater than max.
		"""
		data = array.array('H', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		
		dataout = array.array('H', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code H - greater than max.
		"""
		data = array.array('H', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('H', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_i(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'i'
		self.MaxLimit = arrayfunc.arraylimits.i_max
		self.MinLimit = arrayfunc.arraylimits.i_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code i - Exceed max value.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code i - Exceed max value.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_add_2_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code i - Exceed min value.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_2_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code i - Exceed min value.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2)


	########################################################
	def test_intoverflow_af_div_2_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_2_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_3_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code i - Negate.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_3_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code i - Negate.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2)


	########################################################
	def test_intoverflow_af_div_r_2_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_3_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code i - Negate.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code i - Negate.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code i - Negate.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code i - Negate.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_r_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code i - Negate.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code i - Negate.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2)


	########################################################
	def test_intoverflow_af_mod_2_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code i - Div by zero.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2)


	########################################################
	def test_intoverflow_af_mod_r_2_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code i - Div by zero.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code i - max positive.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code i - max positive.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_2_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code i - min positive.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_2_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code i - min positive.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_3_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code i - max negative.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_3_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code i - max negative.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_4_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code i - min negative.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_4_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code i - min negative.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_5_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code i - complement.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_5_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code i - complement.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_1_starmap(self):
		"""Test starmap integer overflow in af_pow  - Array code i - raised to negative power.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow  - Array code i - raised to negative power.
		"""
		data = array.array('i', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_r_1_starmap(self):
		"""Test starmap integer overflow in af_pow_r  - Array code i - raised to negative power.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow_r  - Array code i - raised to negative power.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code i - greater than max.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code i - greater than max.
		"""
		data = array.array('i', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_2_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code i - less than min.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code i - less than min.
		"""
		data = array.array('i', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code i - greater than max.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code i - greater than max.
		"""
		data = array.array('i', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_2_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code i - less than min.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('i', testdata2)
		
		dataout = array.array('i', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code i - less than min.
		"""
		data = array.array('i', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('i', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_I(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'I'
		self.MaxLimit = arrayfunc.arraylimits.I_max
		self.MinLimit = arrayfunc.arraylimits.I_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code I - max overflow.
		"""
		data = array.array('I', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code I - max overflow.
		"""
		data = array.array('I', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code I - divide by zero.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_1_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code I - divide by zero.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code I - divide by zero.
		"""
		data = array.array('I', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code I - divide by zero.
		"""
		data = array.array('I', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code I - divide by zero.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code I - divide by zero.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code I - divide by zero.
		"""
		data = array.array('I', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code I - divide by zero.
		"""
		data = array.array('I', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code I - divide by zero.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code I - divide by zero.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code I - divide by zero.
		"""
		data = array.array('I', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code I - divide by zero.
		"""
		data = array.array('I', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code I - max overflow.
		"""
		data = array.array('I', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code I - max overflow.
		"""
		data = array.array('I', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code I - greater than max.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code I - greater than max.
		"""
		data = array.array('I', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code I - greater than max.
		"""
		data = array.array('I', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		
		dataout = array.array('I', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code I - greater than max.
		"""
		data = array.array('I', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('I', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_l(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'l'
		self.MaxLimit = arrayfunc.arraylimits.l_max
		self.MinLimit = arrayfunc.arraylimits.l_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code l - Exceed max value.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code l - Exceed max value.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_add_2_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code l - Exceed min value.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_2_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code l - Exceed min value.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2)


	########################################################
	def test_intoverflow_af_div_2_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_2_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_3_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code l - Negate.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_3_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code l - Negate.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2)


	########################################################
	def test_intoverflow_af_div_r_2_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_3_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code l - Negate.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code l - Negate.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code l - Negate.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code l - Negate.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_r_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code l - Negate.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code l - Negate.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2)


	########################################################
	def test_intoverflow_af_mod_2_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code l - Div by zero.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2)


	########################################################
	def test_intoverflow_af_mod_r_2_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code l - Div by zero.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code l - max positive.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code l - max positive.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_2_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code l - min positive.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_2_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code l - min positive.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_3_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code l - max negative.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_3_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code l - max negative.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_4_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code l - min negative.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_4_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code l - min negative.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_5_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code l - complement.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_5_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code l - complement.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_1_starmap(self):
		"""Test starmap integer overflow in af_pow  - Array code l - raised to negative power.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow  - Array code l - raised to negative power.
		"""
		data = array.array('l', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_r_1_starmap(self):
		"""Test starmap integer overflow in af_pow_r  - Array code l - raised to negative power.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow_r  - Array code l - raised to negative power.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code l - greater than max.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code l - greater than max.
		"""
		data = array.array('l', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_2_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code l - less than min.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code l - less than min.
		"""
		data = array.array('l', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code l - greater than max.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code l - greater than max.
		"""
		data = array.array('l', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_2_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code l - less than min.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('l', testdata2)
		
		dataout = array.array('l', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code l - less than min.
		"""
		data = array.array('l', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('l', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_L(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'L'
		self.MaxLimit = arrayfunc.arraylimits.L_max
		self.MinLimit = arrayfunc.arraylimits.L_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code L - max overflow.
		"""
		data = array.array('L', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code L - max overflow.
		"""
		data = array.array('L', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code L - divide by zero.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_1_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code L - divide by zero.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code L - divide by zero.
		"""
		data = array.array('L', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code L - divide by zero.
		"""
		data = array.array('L', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code L - divide by zero.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code L - divide by zero.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code L - divide by zero.
		"""
		data = array.array('L', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code L - divide by zero.
		"""
		data = array.array('L', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code L - divide by zero.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code L - divide by zero.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code L - divide by zero.
		"""
		data = array.array('L', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code L - divide by zero.
		"""
		data = array.array('L', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code L - max overflow.
		"""
		data = array.array('L', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code L - max overflow.
		"""
		data = array.array('L', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code L - greater than max.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code L - greater than max.
		"""
		data = array.array('L', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code L - greater than max.
		"""
		data = array.array('L', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		
		dataout = array.array('L', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code L - greater than max.
		"""
		data = array.array('L', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('L', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
# Cannot test if 'q' or 'Q' arrays are not supported in this architecture.
@unittest.skipIf('q' not in array.typecodes, 'Skip test if array type not supported on this platform.')
class starmap_intoverflow_q(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'q'
		self.MaxLimit = arrayfunc.arraylimits.q_max
		self.MinLimit = arrayfunc.arraylimits.q_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code q - Exceed max value.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code q - Exceed max value.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_add_2_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code q - Exceed min value.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_2_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code q - Exceed min value.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2)


	########################################################
	def test_intoverflow_af_div_2_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_2_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_3_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code q - Negate.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_3_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code q - Negate.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_div_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_div_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_div_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2)


	########################################################
	def test_intoverflow_af_div_r_2_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_3_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code q - Negate.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code q - Negate.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code q - Negate.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code q - Negate.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_floordiv_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_floordiv_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_floordiv_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2)


	########################################################
	def test_intoverflow_af_floordiv_r_2_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_3_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code q - Negate.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_3_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code q - Negate.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2)


	########################################################
	def test_intoverflow_af_mod_2_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code q - Div by zero.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmap(self):
		"""Test starmap integer overflow checking disabled in af_mod_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout)

	########################################################
	def test_intoverflow_af_mod_r_1_disabled_starmapi(self):
		"""Test starmapi integer overflow checking disabled in af_mod_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2)


	########################################################
	def test_intoverflow_af_mod_r_2_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code q - Div by zero.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code q - max positive.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code q - max positive.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_2_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code q - min positive.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_2_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code q - min positive.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_3_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code q - max negative.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_3_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code q - max negative.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_4_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code q - min negative.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_4_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code q - min negative.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-2, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_5_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code q - complement.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_5_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code q - complement.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_1_starmap(self):
		"""Test starmap integer overflow in af_pow  - Array code q - raised to negative power.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow  - Array code q - raised to negative power.
		"""
		data = array.array('q', [0]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_pow_r_1_starmap(self):
		"""Test starmap integer overflow in af_pow_r  - Array code q - raised to negative power.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_pow_r  - Array code q - raised to negative power.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code q - greater than max.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code q - greater than max.
		"""
		data = array.array('q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(-1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_2_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code q - less than min.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code q - less than min.
		"""
		data = array.array('q', [self.MinLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code q - greater than max.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code q - greater than max.
		"""
		data = array.array('q', [-1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_2_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code q - less than min.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('q', testdata2)
		
		dataout = array.array('q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code q - less than min.
		"""
		data = array.array('q', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MinLimit, len(data)))
		data2 = array.array('q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
# Cannot test if 'q' or 'Q' arrays are not supported in this architecture.
@unittest.skipIf('Q' not in array.typecodes, 'Skip test if array type not supported on this platform.')
class starmap_intoverflow_Q(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'Q'
		self.MaxLimit = arrayfunc.arraylimits.Q_max
		self.MinLimit = arrayfunc.arraylimits.Q_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code Q - max overflow.
		"""
		data = array.array('Q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code Q - max overflow.
		"""
		data = array.array('Q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_1_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code Q - divide by zero.
		"""
		data = array.array('Q', [0]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code Q - max overflow.
		"""
		data = array.array('Q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code Q - max overflow.
		"""
		data = array.array('Q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code Q - greater than max.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code Q - greater than max.
		"""
		data = array.array('Q', [1]*10)
		
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code Q - greater than max.
		"""
		data = array.array('Q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		
		dataout = array.array('Q', [0]*10)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code Q - greater than max.
		"""
		data = array.array('Q', [self.MaxLimit]*10)
		
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('Q', testdata2)
		

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_f(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'f'
		self.MaxLimit = arrayfunc.arraylimits.f_max
		self.MinLimit = arrayfunc.arraylimits.f_min



	########################################################
	def test_floatoverflow_af_add_1_starmap(self):
		"""Test starmap floating point overflow in af_add  - Array code f - max overflow.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_add_1_starmapi(self):
		"""Test starmapi floating point overflow in af_add  - Array code f - max overflow.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_add_2_starmap(self):
		"""Test starmap floating point overflow in af_add  - Array code f - min overflow.
		"""
		data = array.array('f', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_add_2_starmapi(self):
		"""Test starmapi floating point overflow in af_add  - Array code f - min overflow.
		"""
		data = array.array('f', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_div_1_starmap(self):
		"""Test starmap floating point overflow in af_div  - Array code f - divide by zero.
		"""
		data = array.array('f', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_div_1_starmapi(self):
		"""Test starmapi floating point overflow in af_div  - Array code f - divide by zero.
		"""
		data = array.array('f', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_div_r_1_starmap(self):
		"""Test starmap floating point overflow in af_div_r  - Array code f - divide by zero.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_div_r  - Array code f - divide by zero.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_floordiv_1_starmap(self):
		"""Test starmap floating point overflow in af_floordiv  - Array code f - divide by zero.
		"""
		data = array.array('f', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi floating point overflow in af_floordiv  - Array code f - divide by zero.
		"""
		data = array.array('f', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap floating point overflow in af_floordiv_r  - Array code f - divide by zero.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_floordiv_r  - Array code f - divide by zero.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_mod_1_starmap(self):
		"""Test starmap floating point overflow in af_mod  - Array code f - divide by zero.
		"""
		data = array.array('f', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_mod_1_starmapi(self):
		"""Test starmapi floating point overflow in af_mod  - Array code f - divide by zero.
		"""
		data = array.array('f', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_mod_r_1_starmap(self):
		"""Test starmap floating point overflow in af_mod_r  - Array code f - divide by zero.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_mod_r  - Array code f - divide by zero.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_mult_1_starmap(self):
		"""Test starmap floating point overflow in af_mult  - Array code f - max overflow.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(2.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_mult_1_starmapi(self):
		"""Test starmapi floating point overflow in af_mult  - Array code f - max overflow.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(2.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_pow_1_starmap(self):
		"""Test starmap floating point overflow in af_pow  - Array code f - 0 raised to negative power.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(-1.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_pow_1_starmapi(self):
		"""Test starmapi floating point overflow in af_pow  - Array code f - 0 raised to negative power.
		"""
		data = array.array('f', [0.0]*10)
		testdata2 = list(itertools.repeat(-1.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_pow_r_1_starmap(self):
		"""Test starmap floating point overflow in af_pow_r  - Array code f - 0 raised to negative power.
		"""
		data = array.array('f', [-1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_pow_r  - Array code f - 0 raised to negative power.
		"""
		data = array.array('f', [-1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_1_starmap(self):
		"""Test starmap floating point overflow in af_sub  - Array code f - greater than max.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_1_starmapi(self):
		"""Test starmapi floating point overflow in af_sub  - Array code f - greater than max.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_2_starmap(self):
		"""Test starmap floating point overflow in af_sub  - Array code f - less than min.
		"""
		data = array.array('f', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_2_starmapi(self):
		"""Test starmapi floating point overflow in af_sub  - Array code f - less than min.
		"""
		data = array.array('f', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_r_1_starmap(self):
		"""Test starmap floating point overflow in af_sub_r  - Array code f - greater than max.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_sub_r  - Array code f - greater than max.
		"""
		data = array.array('f', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_r_2_starmap(self):
		"""Test starmap floating point overflow in af_sub_r  - Array code f - less than min.
		"""
		data = array.array('f', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi floating point overflow in af_sub_r  - Array code f - less than min.
		"""
		data = array.array('f', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_d(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'd'
		self.MaxLimit = arrayfunc.arraylimits.d_max
		self.MinLimit = arrayfunc.arraylimits.d_min



	########################################################
	def test_floatoverflow_af_add_1_starmap(self):
		"""Test starmap floating point overflow in af_add  - Array code d - max overflow.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_add_1_starmapi(self):
		"""Test starmapi floating point overflow in af_add  - Array code d - max overflow.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_add_2_starmap(self):
		"""Test starmap floating point overflow in af_add  - Array code d - min overflow.
		"""
		data = array.array('d', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_add_2_starmapi(self):
		"""Test starmapi floating point overflow in af_add  - Array code d - min overflow.
		"""
		data = array.array('d', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_div_1_starmap(self):
		"""Test starmap floating point overflow in af_div  - Array code d - divide by zero.
		"""
		data = array.array('d', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_div_1_starmapi(self):
		"""Test starmapi floating point overflow in af_div  - Array code d - divide by zero.
		"""
		data = array.array('d', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_div_r_1_starmap(self):
		"""Test starmap floating point overflow in af_div_r  - Array code d - divide by zero.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_div_r  - Array code d - divide by zero.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_floordiv_1_starmap(self):
		"""Test starmap floating point overflow in af_floordiv  - Array code d - divide by zero.
		"""
		data = array.array('d', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi floating point overflow in af_floordiv  - Array code d - divide by zero.
		"""
		data = array.array('d', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap floating point overflow in af_floordiv_r  - Array code d - divide by zero.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_floordiv_r  - Array code d - divide by zero.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_mod_1_starmap(self):
		"""Test starmap floating point overflow in af_mod  - Array code d - divide by zero.
		"""
		data = array.array('d', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_mod_1_starmapi(self):
		"""Test starmapi floating point overflow in af_mod  - Array code d - divide by zero.
		"""
		data = array.array('d', [1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_mod_r_1_starmap(self):
		"""Test starmap floating point overflow in af_mod_r  - Array code d - divide by zero.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_mod_r  - Array code d - divide by zero.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(1.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_mult_1_starmap(self):
		"""Test starmap floating point overflow in af_mult  - Array code d - max overflow.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(2.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_mult_1_starmapi(self):
		"""Test starmapi floating point overflow in af_mult  - Array code d - max overflow.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(2.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_pow_1_starmap(self):
		"""Test starmap floating point overflow in af_pow  - Array code d - 0 raised to negative power.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(-1.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_pow_1_starmapi(self):
		"""Test starmapi floating point overflow in af_pow  - Array code d - 0 raised to negative power.
		"""
		data = array.array('d', [0.0]*10)
		testdata2 = list(itertools.repeat(-1.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_pow_r_1_starmap(self):
		"""Test starmap floating point overflow in af_pow_r  - Array code d - 0 raised to negative power.
		"""
		data = array.array('d', [-1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_pow_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_pow_r  - Array code d - 0 raised to negative power.
		"""
		data = array.array('d', [-1.0]*10)
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_1_starmap(self):
		"""Test starmap floating point overflow in af_sub  - Array code d - greater than max.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_1_starmapi(self):
		"""Test starmapi floating point overflow in af_sub  - Array code d - greater than max.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_2_starmap(self):
		"""Test starmap floating point overflow in af_sub  - Array code d - less than min.
		"""
		data = array.array('d', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_2_starmapi(self):
		"""Test starmapi floating point overflow in af_sub  - Array code d - less than min.
		"""
		data = array.array('d', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_r_1_starmap(self):
		"""Test starmap floating point overflow in af_sub_r  - Array code d - greater than max.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi floating point overflow in af_sub_r  - Array code d - greater than max.
		"""
		data = array.array('d', [self.MaxLimit]*10)
		testdata2 = list(itertools.repeat(self.MinLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


	########################################################
	def test_floatoverflow_af_sub_r_2_starmap(self):
		"""Test starmap floating point overflow in af_sub_r  - Array code d - less than min.
		"""
		data = array.array('d', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*10)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_floatoverflow_af_sub_r_2_starmapi(self):
		"""Test starmapi floating point overflow in af_sub_r  - Array code d - less than min.
		"""
		data = array.array('d', [self.MinLimit]*10)
		testdata2 = list(itertools.repeat(self.MaxLimit/10.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_intoverflow_bytes(unittest.TestCase):
	"""Test for integer overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'B'
		self.MaxLimit = arrayfunc.arraylimits.B_max
		self.MinLimit = arrayfunc.arraylimits.B_min



	########################################################
	def test_intoverflow_af_add_1_starmap(self):
		"""Test starmap integer overflow in af_add  - Array code bytes - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_add, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_add_1_starmapi(self):
		"""Test starmapi integer overflow in af_add  - Array code bytes - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_1_starmap(self):
		"""Test starmap integer overflow in af_div  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_1_starmapi(self):
		"""Test starmapi integer overflow in af_div  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_div_r_1_starmap(self):
		"""Test starmap integer overflow in af_div_r  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [0]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_div_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_div_r  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [0]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_floordiv_r_1_starmap(self):
		"""Test starmap integer overflow in af_floordiv_r  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [0]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_floordiv_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_floordiv_r  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [0]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_1_starmap(self):
		"""Test starmap integer overflow in af_mod  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(0, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mod_r_1_starmap(self):
		"""Test starmap integer overflow in af_mod_r  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [0]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mod_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_mod_r  - Array code bytes - divide by zero.
		"""
		data = array.array('B', [0]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_mult_1_starmap(self):
		"""Test starmap integer overflow in af_mult  - Array code bytes - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_mult_1_starmapi(self):
		"""Test starmapi integer overflow in af_mult  - Array code bytes - max overflow.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(2, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_1_starmap(self):
		"""Test starmap integer overflow in af_sub  - Array code bytes - greater than max.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub  - Array code bytes - greater than max.
		"""
		data = array.array('B', [1]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(self.MaxLimit, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, data, data2, disovfl=False)


	########################################################
	def test_intoverflow_af_sub_r_1_starmap(self):
		"""Test starmap integer overflow in af_sub_r  - Array code bytes - greater than max.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)
		dataout = array.array('B', [0]*10)
		dataout = bytes(dataout)

		with self.assertRaises(OverflowError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, data, data2, dataout, disovfl=False)

	########################################################
	def test_intoverflow_af_sub_r_1_starmapi(self):
		"""Test starmapi integer overflow in af_sub_r  - Array code bytes - greater than max.
		"""
		data = array.array('B', [self.MaxLimit]*10)
		data = bytes(data)
		testdata2 = list(itertools.repeat(1, len(data)))
		data2 = array.array('B', testdata2)
		data2 = bytes(data2)

		with self.assertRaises(OverflowError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, data, data2, disovfl=False)


##############################################################################
class starmap_floaterror_f(unittest.TestCase):
	"""Test for floating point overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'f'
		self.MaxLimit = arrayfunc.arraylimits.f_max
		self.MinLimit = arrayfunc.arraylimits.f_min



	########################################################
	def test_floaterror_math_fmod_starmap(self):
		"""Test starmap floating point error in math_fmod  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, data, data2, dataout)

	########################################################
	def test_floaterror_math_fmod_starmapi(self):
		"""Test starmapi floating point error in math_fmod  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, data, data2)


	########################################################
	def test_floaterror_math_fmod_r_starmap(self):
		"""Test starmap floating point error in math_fmod_r  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, data, data2, dataout)

	########################################################
	def test_floaterror_math_fmod_r_starmapi(self):
		"""Test starmapi floating point error in math_fmod_r  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, data, data2)


	########################################################
	def test_floaterror_math_pow_starmap(self):
		"""Test starmap floating point error in math_pow  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, data, data2, dataout)

	########################################################
	def test_floaterror_math_pow_starmapi(self):
		"""Test starmapi floating point error in math_pow  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, data, data2)


	########################################################
	def test_floaterror_math_pow_r_starmap(self):
		"""Test starmap floating point error in math_pow_r  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('f', testdata2)
		dataout = array.array('f', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, data, data2, dataout)

	########################################################
	def test_floaterror_math_pow_r_starmapi(self):
		"""Test starmapi floating point error in math_pow_r  - Array code f.
		"""
		data = array.array('f', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('f', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, data, data2)

##############################################################################

##############################################################################
class starmap_floaterror_d(unittest.TestCase):
	"""Test for floating point overflow operator function.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# The unit test code is auto-generated by a script, so we evaluate
		# the array type code to decide in each instance whether to use
		# an exact or approximate compare of the results. The following array 
		# type code is inserted by the script.
		self.TypeCode = 'd'
		self.MaxLimit = arrayfunc.arraylimits.d_max
		self.MinLimit = arrayfunc.arraylimits.d_min



	########################################################
	def test_floaterror_math_fmod_starmap(self):
		"""Test starmap floating point error in math_fmod  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, data, data2, dataout)

	########################################################
	def test_floaterror_math_fmod_starmapi(self):
		"""Test starmapi floating point error in math_fmod  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, data, data2)


	########################################################
	def test_floaterror_math_fmod_r_starmap(self):
		"""Test starmap floating point error in math_fmod_r  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, data, data2, dataout)

	########################################################
	def test_floaterror_math_fmod_r_starmapi(self):
		"""Test starmapi floating point error in math_fmod_r  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(0.0, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, data, data2)


	########################################################
	def test_floaterror_math_pow_starmap(self):
		"""Test starmap floating point error in math_pow  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, data, data2, dataout)

	########################################################
	def test_floaterror_math_pow_starmapi(self):
		"""Test starmapi floating point error in math_pow  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, data, data2)


	########################################################
	def test_floaterror_math_pow_r_starmap(self):
		"""Test starmap floating point error in math_pow_r  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('d', testdata2)
		dataout = array.array('d', [0]*len(data))

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, data, data2, dataout)

	########################################################
	def test_floaterror_math_pow_r_starmapi(self):
		"""Test starmapi floating point error in math_pow_r  - Array code d.
		"""
		data = array.array('d', [-10.5,0.0,10.4])
		testdata2 = list(itertools.repeat(-4.5, len(data)))
		data2 = array.array('d', testdata2)

		with self.assertRaises(ArithmeticError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, data, data2)

##############################################################################

##############################################################################
class starmap_parameter_b(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('b', [int(10)]*10)
		self.data2 = array.array('b', [int(12)]*10)
		self.dataout = array.array('b', [int(0)]*10)
		self.dataempty = array.array('b')
		self.datashort = array.array('b', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'b' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code b.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code b.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code b.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code b.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_B(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('B', [int(10)]*10)
		self.data2 = array.array('B', [int(12)]*10)
		self.dataout = array.array('B', [int(0)]*10)
		self.dataempty = array.array('B')
		self.datashort = array.array('B', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'B' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code B.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code B.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code B.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code B.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_h(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('h', [int(10)]*10)
		self.data2 = array.array('h', [int(12)]*10)
		self.dataout = array.array('h', [int(0)]*10)
		self.dataempty = array.array('h')
		self.datashort = array.array('h', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'h' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code h.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code h.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code h.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code h.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_H(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('H', [int(10)]*10)
		self.data2 = array.array('H', [int(12)]*10)
		self.dataout = array.array('H', [int(0)]*10)
		self.dataempty = array.array('H')
		self.datashort = array.array('H', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'H' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code H.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code H.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code H.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code H.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_i(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('i', [int(10)]*10)
		self.data2 = array.array('i', [int(12)]*10)
		self.dataout = array.array('i', [int(0)]*10)
		self.dataempty = array.array('i')
		self.datashort = array.array('i', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'i' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code i.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code i.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code i.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code i.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_I(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('I', [int(10)]*10)
		self.data2 = array.array('I', [int(12)]*10)
		self.dataout = array.array('I', [int(0)]*10)
		self.dataempty = array.array('I')
		self.datashort = array.array('I', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'I' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code I.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code I.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code I.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code I.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_l(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('l', [int(10)]*10)
		self.data2 = array.array('l', [int(12)]*10)
		self.dataout = array.array('l', [int(0)]*10)
		self.dataempty = array.array('l')
		self.datashort = array.array('l', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'l' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code l.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code l.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code l.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code l.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_L(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('L', [int(10)]*10)
		self.data2 = array.array('L', [int(12)]*10)
		self.dataout = array.array('L', [int(0)]*10)
		self.dataempty = array.array('L')
		self.datashort = array.array('L', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'L' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code L.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code L.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code L.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code L.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
# Cannot test if 'q' or 'Q' arrays are not supported in this architecture.
@unittest.skipIf('q' not in array.typecodes, 'Skip test if array type not supported on this platform.')
class starmap_parameter_q(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('q', [int(10)]*10)
		self.data2 = array.array('q', [int(12)]*10)
		self.dataout = array.array('q', [int(0)]*10)
		self.dataempty = array.array('q')
		self.datashort = array.array('q', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'q' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code q.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code q.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
# Cannot test if 'q' or 'Q' arrays are not supported in this architecture.
@unittest.skipIf('Q' not in array.typecodes, 'Skip test if array type not supported on this platform.')
class starmap_parameter_Q(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('Q', [int(10)]*10)
		self.data2 = array.array('Q', [int(12)]*10)
		self.dataout = array.array('Q', [int(0)]*10)
		self.dataempty = array.array('Q')
		self.datashort = array.array('Q', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'Q' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code Q.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code Q.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code Q.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code Q.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_f(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [float(10)]*10)
		self.data2 = array.array('f', [float(12)]*10)
		self.dataout = array.array('f', [float(0)]*10)
		self.dataempty = array.array('f')
		self.datashort = array.array('f', [float(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'f' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code f.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code f.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code f.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_d(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [float(10)]*10)
		self.data2 = array.array('d', [float(12)]*10)
		self.dataout = array.array('d', [float(0)]*10)
		self.dataempty = array.array('d')
		self.datashort = array.array('d', [float(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'd' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code d.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code d.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code d.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_parameter_bytes(unittest.TestCase):
	"""Test for correct parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('B', [int(10)]*10)
		self.data2 = array.array('B', [int(12)]*10)
		self.dataout = array.array('B', [int(0)]*10)
		self.dataempty = array.array('B')
		self.datashort = array.array('B', [int(3)]*5)


		# For bytes types, we need a non-array data type.
		if 'bytes' == 'bytes':
			self.data = bytes(self.data)
			self.data2 = bytes(self.data2)
			self.dataout = bytes(self.dataout)
			self.dataempty = bytes(self.dataempty)
			self.datashort = bytes(self.datashort)


	########################################################
	def test_param_starmap_no_params(self):
		"""Test starmap exception when no parameters passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap()

	########################################################
	def test_param_starmapi_no_params(self):
		"""Test starmapi exception when no parameters passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi()


	########################################################
	def test_param_starmap_one_params(self):
		"""Test starmap exception when one parameter passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add)

	########################################################
	def test_param_starmapi_one_params(self):
		"""Test starmapi  exception when one parameter passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add)


	########################################################
	def test_param_starmap_two_params(self):
		"""Test starmap exception when two parameters are passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data)

	########################################################
	def test_param_starmapi_two_params(self):
		"""Test starmapi  exception when two parameters are passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data)


	########################################################
	def test_param_starmap_three_params(self):
		"""Test starmap exception when three parameters are passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2)


	########################################################
	def test_param_starmap_seven_params(self):
		"""Test starmap exception when to mmany (seven) parameters are passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, 3, maxlen=2, disovfl=False)

	########################################################
	def test_param_starmapi_six_params(self):
		"""Test starmapi  exception when to mmany (six) parameters are passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, 3, maxlen=2, disovfl=False)


	########################################################
	def test_param_starmap_invalid_keyword_params(self):
		"""Test starmap exception with invalid keyword parameters passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, xx=2)

	########################################################
	def test_param_starmapi_invalid_keyword_params(self):
		"""Test starmapi exception with invalid keyword parameters passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, xx=2)


	########################################################
	def test_param_starmap_invalid_keyword_param_type(self):
		"""Test starmap exception with invalid keyword parameter type passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen='x')


	########################################################
	def test_param_starmapi_invalid_keyword_param_type(self):
		"""Test starmapi exception with invalid keyword parameter type passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen='x')


	########################################################
	def test_param_starmap_invalid_opcode_param_value(self):
		"""Test starmap exception with invalid opcode parameter value passed  - Array code bytes.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmap(-1, self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_value(self):
		"""Test starmapi exception with invalid opcode parameter value passed  - Array code bytes.
		"""
		with self.assertRaises(ValueError):
			arrayfunc.starmapi(-1, self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_opcode_param_type(self):
		"""Test starmap exception with invalid opcode parameter type passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap('a', self.data, self.data2, self.dataout)


	########################################################
	def test_param_starmapi_invalid_opcode_param_type(self):
		"""Test starmapi exception with invalid opcode parameter type passed  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi('a', self.data, self.data2)


	########################################################
	def test_param_starmap_invalid_first_array_param_type(self):
		"""Test starmap exception with invalid first array parameter type  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_type(self):
		"""Test starmap exception with invalid second array parameter type  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, 99, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_type(self):
		"""Test starmap exception with invalid third array parameter type  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, 99)


	########################################################
	def test_param_starmapi_invalid_first_array_param_type(self):
		"""Test starmapi exception with invalid first array parameter type  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, 99, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_invalid_second_array_param_type(self):
		"""Test starmapi exception with invalid second array parameter type  - Array code bytes.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, 99, self.dataout)



	########################################################
	def test_param_starmap_invalid_first_array_param_length(self):
		"""Test starmap exception with invalid first array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.dataempty, self.data2, self.dataout)

	########################################################
	def test_param_starmap_invalid_second_array_param_length(self):
		"""Test starmap exception with invalid second array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataout)

	########################################################
	def test_param_starmap_invalid_third_array_param_length(self):
		"""Test starmap exception with invalid third array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.dataempty, self.dataempty)


	########################################################
	def test_param_starmapi_invalid_first_array_param_length(self):
		"""Test starmapi exception with invalid first array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataempty, self.data2)

	########################################################
	def test_param_starmapi_invalid_second_array_param_length(self):
		"""Test starmapi exception with invalid second array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.dataempty)




	########################################################
	def test_param_starmap_unequal_first_array_param_length(self):
		"""Test starmap exception with unequal first array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.datashort, self.data2, self.dataout)

	########################################################
	def test_param_starmapi_unequal_first_array_param_length(self):
		"""Test starmapi exception with unequal first array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.datashort, self.data2)


	########################################################
	def test_param_starmap_unequal_second_array_param_length(self):
		"""Test starmap exception with unequal second array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.datashort, self.dataout)

	########################################################
	def test_param_starmapi_unequal_second_array_param_length(self):
		"""Test starmapi exception with unequal second array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.datashort)


	########################################################
	def test_param_starmap_unequal_third_array_param_length(self):
		"""Test starmap exception with unequal third array parameter length  - Array code bytes.
		"""
		with self.assertRaises(IndexError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.datashort)



##############################################################################


##############################################################################
class starmap_nan_param_af_add_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_add_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_add, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_add_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_add_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_add_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_add_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_add_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_add_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_add, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_add, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_add_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_add_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_add_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_add_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_add_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_div_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_div_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_div, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_div, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_div_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_div_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_div_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_div_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_div_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_floordiv_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_floordiv_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_floordiv_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_floordiv_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_floordiv_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_floordiv_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_mod_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_mod_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_mod, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_mod, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_mod_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_mod_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_mod_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_mod_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_mult_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_mult_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mult, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_mult_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mult, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_mult_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_mult_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_mult_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mult_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mult_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mult, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_mult, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_mult_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mult, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_mult, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_mult_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_mult_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_mult_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_mult_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_pow_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_pow_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_pow, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_pow, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_pow_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_pow_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_pow_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_pow_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_sub_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_sub_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_sub, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_sub, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_sub_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_sub_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_sub_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_sub_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_eq_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_eq_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_eq, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_eq_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_eq, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_eq_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_eq_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_eq_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_eq_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_eq_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_eq, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_eq, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_eq_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_eq, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_eq, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_eq_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_eq_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_eq_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_eq_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_gt_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_gt_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_gt_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_gt_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_gt_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_gt_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gt_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gt_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_gt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_gt_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_gt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_gt_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_gt_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_gt_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_gt_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_gte_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_gte_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_gte_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_gte_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_gte_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_gte_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gte_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gte_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_gte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_gte_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_gte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_gte_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_gte_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_gte_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_gte_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_lt_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_lt_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_lt_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_lt_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_lt_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_lt_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lt_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lt_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_lt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_lt_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_lt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_lt_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_lt_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_lt_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_lt_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_lte_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_lte_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_lte_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_lte_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_lte_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_lte_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lte_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lte_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_lte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_lte_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_lte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_lte_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_lte_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_lte_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_lte_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_ne_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_ne_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_ne, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_ne_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_ne, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_ne_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_ne_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_ne_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_ne_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_ne_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_ne, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_ne, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_ne_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_ne, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_ne, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_ne_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_ne_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_ne_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_ne_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_atan2_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_atan2_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_atan2, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_atan2_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_atan2_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_atan2_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_atan2_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_copysign_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_copysign_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_copysign, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_copysign_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_copysign_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_copysign_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_copysign_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_copysign_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_copysign_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_copysign, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_copysign, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_copysign_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_copysign_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_copysign_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_copysign_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_copysign_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_fmod_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_fmod_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_fmod, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_fmod_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_fmod_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_fmod_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_fmod_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_hypot_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_hypot_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_hypot, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_hypot_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_hypot_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_hypot_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_hypot_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_ldexp_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_ldexp_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_ldexp_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_ldexp_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_ldexp_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_ldexp_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_ldexp_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_ldexp_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_ldexp_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_ldexp_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_ldexp_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_ldexp_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_ldexp_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_pow_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_pow_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_pow, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_pow, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_pow_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_pow_r_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_pow_r_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_r_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_r_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_r_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_r_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_r_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_r_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_r_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_r_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_r_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_r_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_pow_r_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_gt_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_gt_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gt_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gt_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_gt_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_gte_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_gte_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gte_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gte_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_gte_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_lt_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_lt_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lt_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lt_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_lt_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_lte_f(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('f', [10.0] * 10)
		self.data2 = array.array('f', [10.0] * 10)

		self.dataok = array.array('f', [10.0] * 10)
		self.dataok2 = array.array('f', [10.0] * 10)
		self.dataout = array.array('f', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_lte_01(self):
		"""Test starmap for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_02(self):
		"""Test starmapi for lim of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_03(self):
		"""Test starmap for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_04(self):
		"""Test starmapi for lim of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_05(self):
		"""Test starmap for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lte_06(self):
		"""Test starmapi for lim of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lte_07(self):
		"""Test starmap for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_08(self):
		"""Test starmapi for ov of nan  - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_09(self):
		"""Test starmap for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_10(self):
		"""Test starmapi for ov of inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_11(self):
		"""Test starmap for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_lte_12(self):
		"""Test starmapi for ov of -inf  - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_add_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_add_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_add, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_add_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_add_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_add_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_add_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_add_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_add_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_add, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_add, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_add_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_add, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_add_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_add_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_add_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_add, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_add_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_add, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_div_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_div_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_div, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_div, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_div_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_div_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_div_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_div_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_div_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_div_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_div_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_div_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_div_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_div_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_div_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_div_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_div_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_floordiv_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_floordiv_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_floordiv_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_floordiv_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_floordiv_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_floordiv_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_floordiv_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_floordiv_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_floordiv_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_floordiv_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_floordiv_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_mod_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_mod_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_mod, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_mod, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_mod_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_mod_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_mod_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_mod_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_mod_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mod_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_mod_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_mod_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mod_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_mod_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mod_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_mult_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_mult_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mult, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_mult_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mult, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_mult_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_mult_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_mult_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mult_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_mult_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_mult, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_mult, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_mult_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_mult, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_mult, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_mult_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_mult_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_mult_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_mult, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_mult_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_mult, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_pow_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_pow_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_pow, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_pow, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_pow_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_pow_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_pow_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_pow_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_pow_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_pow_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_pow_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_pow_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_pow_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_pow_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_pow_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_sub_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_sub_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_sub, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_sub, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_sub_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_sub_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_sub_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_sub_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_sub_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_sub_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_sub_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_sub_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_sub_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_sub_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_sub_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_eq_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_eq_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_eq, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_eq_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_eq, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_eq_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_eq_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_eq_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_eq_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_eq_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_eq, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_eq, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_eq_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_eq, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_eq, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_eq_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_eq_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_eq_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_eq, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_eq_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_eq, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_gt_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_gt_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_gt_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_gt_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_gt_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_gt_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gt_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gt_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_gt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_gt_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_gt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_gt_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_gt_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_gt_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_gt_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_gte_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_gte_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_gte_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_gte_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_gte_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_gte_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gte_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_gte_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_gte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_gte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_gte_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_gte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_gte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_gte_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_gte_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_gte_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_gte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_gte_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_gte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_lt_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_lt_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_lt_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_lt_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_lt_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_lt_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lt_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lt_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_lt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_lt_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_lt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_lt_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_lt_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_lt_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_lt_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_lte_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_lte_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_lte_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_lte_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_lte_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_lte_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lte_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_lte_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_lte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_lte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_lte_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_lte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_lte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_lte_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_lte_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_lte_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_lte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_lte_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_lte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_af_ne_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_af_ne_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_ne, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_af_ne_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_ne, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_af_ne_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_af_ne_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_af_ne_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_af_ne_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_af_ne_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.af_ne, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.af_ne, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_af_ne_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.af_ne, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.af_ne, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_af_ne_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_af_ne_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_af_ne_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.af_ne, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_af_ne_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.af_ne, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_atan2_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_atan2_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_atan2, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_atan2_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_atan2_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_atan2_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_atan2_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_atan2_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_atan2_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_atan2_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_atan2_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_atan2_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_atan2_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_atan2_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_copysign_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_copysign_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_copysign, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_copysign_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_copysign_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_copysign_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_copysign_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_copysign_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_copysign_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_copysign, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_copysign, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_copysign_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_copysign_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_copysign_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_copysign_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_copysign, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_copysign_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_copysign, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_fmod_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_fmod_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_fmod, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_fmod_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_fmod_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_fmod_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_fmod_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_fmod_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_fmod_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_fmod_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_fmod_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_fmod_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_fmod_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_fmod_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_hypot_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_hypot_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_hypot, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_hypot_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_hypot_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_hypot_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_hypot_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_hypot_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_hypot_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_hypot_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_hypot_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_hypot_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_hypot_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_hypot_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_ldexp_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_ldexp_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_ldexp_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_ldexp_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_ldexp_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_ldexp_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_ldexp_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_ldexp_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_ldexp_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_ldexp_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_ldexp_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_ldexp_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_ldexp, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_ldexp_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_ldexp, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_pow_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_pow_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_pow, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_pow, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_pow_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_math_pow_r_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_math_pow_r_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_r_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_math_pow_r_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_r_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_math_pow_r_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_r_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_math_pow_r_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_r_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_math_pow_r_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_r_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_math_pow_r_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.math_pow_r, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_math_pow_r_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.math_pow_r, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_gt_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_gt_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gt_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gt_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gt_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gt_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_gt_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_gte_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_gte_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gte_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_gte_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_gte_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_gte_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_gte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_gte_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_gte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_lt_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_lt_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lt_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lt_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lt_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lt_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lt, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_lt_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lt, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
class starmap_nan_param_aops_subst_lte_d(unittest.TestCase):
	"""Test floating point arrays for nan, inf, -inf in parameters.
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.data = array.array('d', [10.0] * 10)
		self.data2 = array.array('d', [10.0] * 10)

		self.dataok = array.array('d', [10.0] * 10)
		self.dataok2 = array.array('d', [10.0] * 10)
		self.dataout = array.array('d', itertools.repeat(0.0, 10))


	########################################################
	def test_nan_aops_subst_lte_01(self):
		"""Test starmap for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, self.dataout, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_02(self):
		"""Test starmapi for lim of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, maxlen=len(self.data) // 2)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, maxlen=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_03(self):
		"""Test starmap for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_04(self):
		"""Test starmapi for lim of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, maxlen=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_05(self):
		"""Test starmap for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lte_06(self):
		"""Test starmapi for lim of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, maxlen=float('-inf'))


	########################################################
	def test_nan_aops_subst_lte_07(self):
		"""Test starmap for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, self.dataout, disovfl=True)
		arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.dataok2, self.data2, self.dataout, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_08(self):
		"""Test starmapi for ov of nan  - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.dataok, self.data2, disovfl=True)
		arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.dataok2, self.data2, disovfl=False)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, disovfl=float('nan'))


	########################################################
	def test_nan_aops_subst_lte_09(self):
		"""Test starmap for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_10(self):
		"""Test starmapi for ov of inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, disovfl=float('inf'))


	########################################################
	def test_nan_aops_subst_lte_11(self):
		"""Test starmap for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmap(arrayfunc.aops.aops_subst_lte, self.data, self.data2, self.dataout, disovfl=float('-inf'))


	########################################################
	def test_nan_aops_subst_lte_12(self):
		"""Test starmapi for ov of -inf  - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.starmapi(arrayfunc.aops.aops_subst_lte, self.data, self.data2, disovfl=float('-inf'))


##############################################################################

##############################################################################
if __name__ == '__main__':
    unittest.main()

##############################################################################
