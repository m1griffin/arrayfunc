#!/usr/bin/env python3
##############################################################################
# Project:  arrayfunc
# Module:   test_amax.py
# Purpose:  arrayfunc unit test.
# Language: Python 3.4
# Date:     11-Jun-2014.
# Ver:      06-Mar-2020.
#
###############################################################################
#
#   Copyright 2014 - 2020    Michael Griffin    <m12.griffin@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##############################################################################
"""This conducts unit tests for amax.
"""

##############################################################################
import sys

import array
import itertools
import math
import operator
import platform
import copy

import unittest

import arrayfunc

##############################################################################

##############################################################################

# The following code is all auto-generated.




##############################################################################
class amax_general_even_arraysize_with_simd_b(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('b', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('b', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('b', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('b', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('b', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code b. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code b. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code b. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code b. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code b. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code b. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_b(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min

		self.gentest = array.array('b', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code b. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code b. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code b. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code b. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_b(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('b', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('b', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('b', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('b', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('b', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code b. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code b. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code b. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code b. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code b. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code b. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_b(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min

		self.gentest = array.array('b', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code b. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code b. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code b. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code b. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_b(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('b', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('b', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('b', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('b', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('b', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code b. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code b. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code b. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code b. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code b. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code b. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_b(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min

		self.gentest = array.array('b', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code b. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code b. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code b. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code b. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_b(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('b', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('b', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('b', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('b', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('b', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code b. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code b. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code b. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code b. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code b. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code b. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_b(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.b_max
		MinVal = arrayfunc.arraylimits.b_min

		self.gentest = array.array('b', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code b. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code b. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code b. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code b. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_B(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('B', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('B', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('B', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('B', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('B', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code B. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code B. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code B. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code B. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code B. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code B. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_B(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min

		self.gentest = array.array('B', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code B. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code B. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code B. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code B. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_B(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('B', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('B', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('B', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('B', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('B', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code B. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code B. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code B. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code B. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code B. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code B. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_B(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min

		self.gentest = array.array('B', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code B. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code B. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code B. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code B. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_B(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('B', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('B', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('B', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('B', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('B', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code B. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code B. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code B. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code B. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code B. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code B. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_B(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min

		self.gentest = array.array('B', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code B. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code B. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code B. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code B. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_B(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('B', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('B', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('B', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('B', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('B', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code B. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code B. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code B. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code B. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code B. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code B. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_B(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.B_max
		MinVal = arrayfunc.arraylimits.B_min

		self.gentest = array.array('B', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code B. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code B. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code B. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code B. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_h(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('h', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('h', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('h', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('h', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('h', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code h. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code h. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code h. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code h. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code h. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code h. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_h(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min

		self.gentest = array.array('h', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code h. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code h. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code h. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code h. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_h(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('h', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('h', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('h', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('h', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('h', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code h. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code h. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code h. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code h. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code h. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code h. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_h(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min

		self.gentest = array.array('h', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code h. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code h. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code h. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code h. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_h(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('h', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('h', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('h', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('h', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('h', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code h. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code h. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code h. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code h. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code h. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code h. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_h(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min

		self.gentest = array.array('h', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code h. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code h. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code h. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code h. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_h(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('h', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('h', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('h', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('h', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('h', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code h. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code h. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code h. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code h. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code h. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code h. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_h(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.h_max
		MinVal = arrayfunc.arraylimits.h_min

		self.gentest = array.array('h', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code h. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code h. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code h. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code h. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_H(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('H', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('H', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('H', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('H', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('H', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code H. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code H. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code H. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code H. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code H. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code H. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_H(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min

		self.gentest = array.array('H', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code H. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code H. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code H. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code H. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_H(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('H', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('H', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('H', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('H', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('H', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code H. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code H. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code H. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code H. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code H. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code H. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_H(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min

		self.gentest = array.array('H', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code H. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code H. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code H. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code H. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_H(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('H', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('H', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('H', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('H', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('H', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code H. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code H. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code H. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code H. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code H. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code H. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_H(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min

		self.gentest = array.array('H', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code H. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code H. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code H. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code H. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_H(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('H', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('H', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('H', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('H', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('H', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code H. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code H. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code H. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code H. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code H. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code H. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_H(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.H_max
		MinVal = arrayfunc.arraylimits.H_min

		self.gentest = array.array('H', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code H. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code H. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code H. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code H. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_i(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('i', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('i', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('i', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('i', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('i', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code i. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code i. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code i. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code i. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code i. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code i. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_i(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min

		self.gentest = array.array('i', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code i. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code i. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code i. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code i. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_i(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('i', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('i', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('i', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('i', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('i', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code i. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code i. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code i. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code i. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code i. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code i. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_i(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min

		self.gentest = array.array('i', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code i. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code i. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code i. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code i. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_i(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('i', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('i', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('i', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('i', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('i', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code i. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code i. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code i. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code i. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code i. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code i. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_i(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min

		self.gentest = array.array('i', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code i. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code i. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code i. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code i. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_i(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('i', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('i', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('i', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('i', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('i', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code i. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code i. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code i. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code i. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code i. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code i. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_i(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.i_max
		MinVal = arrayfunc.arraylimits.i_min

		self.gentest = array.array('i', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code i. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code i. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code i. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code i. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_I(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('I', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('I', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('I', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('I', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('I', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code I. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code I. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code I. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code I. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code I. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code I. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_I(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min

		self.gentest = array.array('I', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code I. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code I. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code I. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code I. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_I(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('I', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('I', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('I', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('I', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('I', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code I. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code I. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code I. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code I. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code I. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code I. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_I(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min

		self.gentest = array.array('I', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code I. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code I. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code I. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code I. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_I(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('I', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('I', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('I', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('I', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('I', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code I. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code I. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code I. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code I. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code I. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code I. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_I(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min

		self.gentest = array.array('I', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code I. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code I. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code I. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code I. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_I(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('I', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('I', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('I', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('I', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('I', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code I. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code I. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code I. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code I. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code I. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code I. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_I(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.I_max
		MinVal = arrayfunc.arraylimits.I_min

		self.gentest = array.array('I', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code I. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code I. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code I. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code I. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_l(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('l', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('l', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('l', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('l', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('l', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code l. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code l. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code l. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code l. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code l. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code l. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_l(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min

		self.gentest = array.array('l', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code l. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code l. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code l. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code l. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_l(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('l', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('l', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('l', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('l', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('l', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code l. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code l. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code l. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code l. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code l. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code l. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_l(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min

		self.gentest = array.array('l', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code l. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code l. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code l. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code l. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_l(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('l', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('l', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('l', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('l', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('l', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code l. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code l. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code l. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code l. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code l. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code l. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_l(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min

		self.gentest = array.array('l', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code l. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code l. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code l. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code l. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_l(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('l', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('l', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('l', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('l', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('l', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code l. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code l. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code l. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code l. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code l. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code l. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_l(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.l_max
		MinVal = arrayfunc.arraylimits.l_min

		self.gentest = array.array('l', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code l. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code l. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code l. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code l. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_L(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('L', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('L', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('L', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('L', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('L', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code L. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code L. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code L. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code L. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code L. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code L. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_L(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min

		self.gentest = array.array('L', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code L. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code L. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code L. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code L. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_L(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('L', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('L', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('L', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('L', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('L', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code L. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code L. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code L. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code L. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code L. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code L. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_L(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min

		self.gentest = array.array('L', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code L. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code L. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code L. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code L. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_L(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('L', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('L', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('L', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('L', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('L', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code L. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code L. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code L. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code L. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code L. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code L. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_L(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min

		self.gentest = array.array('L', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code L. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code L. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code L. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code L. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_L(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('L', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('L', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('L', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('L', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('L', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code L. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code L. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code L. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code L. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code L. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code L. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_L(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.L_max
		MinVal = arrayfunc.arraylimits.L_min

		self.gentest = array.array('L', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code L. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code L. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code L. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code L. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code q. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code q. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code q. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code q. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code q. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code q. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min

		self.gentest = array.array('q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code q. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code q. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code q. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code q. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code q. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code q. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code q. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code q. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code q. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code q. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min

		self.gentest = array.array('q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code q. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code q. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code q. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code q. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code q. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code q. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code q. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code q. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code q. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code q. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min

		self.gentest = array.array('q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code q. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code q. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code q. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code q. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code q. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code q. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code q. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code q. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code q. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code q. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.q_max
		MinVal = arrayfunc.arraylimits.q_min

		self.gentest = array.array('q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code q. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code q. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code q. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code q. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_Q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('Q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('Q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('Q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code Q. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code Q. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code Q. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code Q. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code Q. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code Q. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_Q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min

		self.gentest = array.array('Q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code Q. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code Q. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code Q. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code Q. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_Q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('Q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('Q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('Q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code Q. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code Q. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code Q. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code Q. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code Q. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code Q. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_Q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min

		self.gentest = array.array('Q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code Q. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code Q. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code Q. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code Q. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_Q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('Q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('Q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('Q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code Q. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code Q. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code Q. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code Q. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code Q. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code Q. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_Q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min

		self.gentest = array.array('Q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code Q. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code Q. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code Q. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code Q. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_Q(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('Q', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('Q', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('Q', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('Q', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code Q. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code Q. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code Q. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code Q. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code Q. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code Q. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_Q(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.Q_max
		MinVal = arrayfunc.arraylimits.Q_min

		self.gentest = array.array('Q', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code Q. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code Q. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code Q. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code Q. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('f', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('f', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('f', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('f', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('f', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code f. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code f. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code f. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code f. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code f. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code f. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		self.gentest = array.array('f', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code f. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code f. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code f. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code f. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('f', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('f', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('f', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('f', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('f', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code f. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code f. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code f. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code f. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code f. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code f. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		self.gentest = array.array('f', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code f. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code f. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code f. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code f. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('f', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('f', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('f', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('f', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('f', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code f. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code f. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code f. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code f. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code f. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code f. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		self.gentest = array.array('f', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code f. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code f. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code f. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code f. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('f', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('f', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('f', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('f', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('f', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code f. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code f. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code f. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code f. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code f. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code f. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		self.gentest = array.array('f', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code f. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code f. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code f. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code f. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('d', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('d', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('d', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('d', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('d', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code d. General test even length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code d. Test increasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code d. Test decreasing values even length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code d. Test finding max for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code d. Test finding value from array that contains min for data type even length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code d. Test optional maxlen parameter even length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		self.gentest = array.array('d', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code d. Test invalid parameter type even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code d. Test missing parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code d. Test excess parameters even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code d. Test invalid keyword parameter even length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('d', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('d', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('d', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('d', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('d', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code d. General test odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.gentest )
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code d. Test increasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.inctest )
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code d. Test decreasing values odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.dectest )
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code d. Test finding max for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest )
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code d. Test finding value from array that contains min for data type odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest )
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code d. Test optional maxlen parameter odd length array with SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 )
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		self.gentest = array.array('d', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code d. Test invalid parameter type odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code d. Test missing parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code d. Test excess parameters odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code d. Test invalid keyword parameter odd length array with SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 )

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('d', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('d', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('d', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('d', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('d', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code d. General test even length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code d. Test increasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code d. Test decreasing values even length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code d. Test finding max for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code d. Test finding value from array that contains min for data type even length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code d. Test optional maxlen parameter even length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		self.gentest = array.array('d', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code d. Test invalid parameter type even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code d. Test missing parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code d. Test excess parameters even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code d. Test invalid keyword parameter even length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################



##############################################################################
class amax_general_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test amax for basic general function operation.
	op_template_general
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min


		# This is generated by a common template, so we need to make 
		# sure that in cases where we are using floating point values 
		# we don't pass floating point values for range().
		# Plus, double precision calcuations will overflow when calculating 
		# the step value unless we convert to integer first. Python
		# integers have no upper limit, and so will not overflow.
		MaxInt = int(MaxVal)
		MinInt = int(MinVal)


		# Create some arbitrary data over a wide range of the data type. This
		# creates evenly spaced data over a range straddling the mid point of the data.
		midpoint = (MaxInt + MinInt) // 2
		startval = (midpoint + MinInt) // 2
		endval = (midpoint + MaxInt) // 2
		stepval = (MaxInt - MinInt) // 100

		halfrangeinc = list(range(startval, endval, stepval))
		halfrangedec = list(range(endval, startval, -stepval))

		gendata = list(itertools.chain.from_iterable(zip(halfrangeinc, halfrangedec)))
		incdata = halfrangeinc
		decdata = halfrangedec
		maxvaldata = list(itertools.chain(halfrangeinc, [MaxVal], halfrangedec))
		minvaldata = list((itertools.chain(halfrangeinc, [MinVal], halfrangedec)))


		# Test arrays.
		self.gentest = array.array('d', [x for x,y in zip(itertools.cycle(gendata), range(arraylength))])
		self.inctest = array.array('d', [x for x,y in zip(itertools.cycle(incdata), range(arraylength))])
		self.dectest = array.array('d', [x for x,y in zip(itertools.cycle(decdata), range(arraylength))])
		self.maxvaltest = array.array('d', [x for x,y in zip(itertools.cycle(maxvaldata), range(arraylength))])
		self.minvaltest = array.array('d', [x for x,y in zip(itertools.cycle(minvaldata), range(arraylength))])


	########################################################
	def test_amax_general_function_01(self):
		"""Test amax  - Array code d. General test odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.gentest , nosimd=True)
		self.assertEqual(result, max(self.gentest))


	########################################################
	def test_amax_general_function_02(self):
		"""Test amax  - Array code d. Test increasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.inctest , nosimd=True)
		self.assertEqual(result, max(self.inctest))


	########################################################
	def test_amax_general_function_03(self):
		"""Test amax  - Array code d. Test decreasing values odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.dectest , nosimd=True)
		self.assertEqual(result, max(self.dectest))


	########################################################
	def test_amax_general_function_04(self):
		"""Test amax  - Array code d. Test finding max for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest))


	########################################################
	def test_amax_general_function_05(self):
		"""Test amax  - Array code d. Test finding value from array that contains min for data type odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.minvaltest , nosimd=True)
		self.assertEqual(result, max(self.minvaltest))


	########################################################
	def test_amax_general_function_06(self):
		"""Test amax  - Array code d. Test optional maxlen parameter odd length array without SIMD.
		"""
		result = arrayfunc.amax(self.maxvaltest, maxlen=5 , nosimd=True)
		self.assertEqual(result, max(self.maxvaltest[:5]))



##############################################################################



##############################################################################
class amax_parameter_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test amax for basic parameter tests.
	op_template_params
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""

		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension


		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		self.gentest = array.array('d', [MaxVal // 2] * arraylength)


	########################################################
	def test_amax_param_function_01(self):
		"""Test amax  - Array code d. Test invalid parameter type odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(1 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(1)


	########################################################
	def test_amax_param_function_02(self):
		"""Test amax  - Array code d. Test missing parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax()

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max()


	########################################################
	def test_amax_param_function_03(self):
		"""Test amax  - Array code d. Test excess parameters odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, 5, 2, 2 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, 2)


	########################################################
	def test_amax_param_function_04(self):
		"""Test amax  - Array code d. Test invalid keyword parameter odd length array without SIMD.
		"""
		with self.assertRaises(TypeError):
			result = arrayfunc.amax(self.gentest, xxxx=5 , nosimd=True)

		# Check that the exception raised corresponds to the native Python behaviour.
		with self.assertRaises(TypeError):
			result = max(self.gentest, xxxx=5)


##############################################################################


##############################################################################
class amax_nonfinite_0_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 0 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 1 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 2 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 3 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_even_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 4 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 0 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 1 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 2 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 3 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_odd_arraysize_with_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 4 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 0 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 1 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 2 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 3 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_even_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  even length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  even length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  even length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  even length array data shifted 4 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 0 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 1 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 2 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 3 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_odd_arraysize_without_simd_f(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.f_max
		MinVal = arrayfunc.arraylimits.f_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('f', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('f', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('f', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('f', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code f. Test NaN data with  odd length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code f. Test Inf data with  odd length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code f. Test Negative Inf data with  odd length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code f. Test mixed non-finite data with  odd length array data shifted 4 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 0 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 1 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 2 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 3 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_even_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 4 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 0 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 0 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 1 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 1 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 2 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 2 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 3 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 3 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_odd_arraysize_with_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_nan )
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_inf )
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 4 with SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf )
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 4 with SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed )
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 0 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 1 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 2 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 3 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_even_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'even' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  even length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  even length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  even length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  even length array data shifted 4 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_0_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 0
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 0 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 0 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_1_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 1
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 1 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 1 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_2_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 2
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 2 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 2 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_3_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 3
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 3 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 3 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
class amax_nonfinite_4_odd_arraysize_without_simd_d(unittest.TestCase):
	"""Test with floating point nan, inf -inf.
	nonfinite_template
	"""

	########################################################
	def setUp(self):
		"""Initialise.
		"""
		# We use a template to generate this code, so the following
		# compare is inserted into the template to generate code which
		# spills over past the SIMD handler.
		if 'odd' == 'odd':
			arrayextension = 5
		else:
			arrayextension = 0

		arraylength = 96 + arrayextension

		MaxVal = arrayfunc.arraylimits.d_max
		MinVal = arrayfunc.arraylimits.d_min

		# Create some test data containing a mixture of values.
		halfrangedata = list(range(int(MinVal / 2), int(MaxVal / 2), int(MaxVal) - int(MinVal) // 100))

		nanvaldatabase = list(itertools.chain(halfrangedata, [math.nan, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		infvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		ninfvaldatabase = list(itertools.chain(halfrangedata, [-math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))
		mixedvaldatabase = list(itertools.chain(halfrangedata, [math.inf, -math.inf, -10.0, MaxVal, 10.0, MinVal], halfrangedata))


		# Rotate the values in place in order to create different combinations. 
		# This is being generated through a template to allow us to create 
		# different combinations to help test the effects of having the
		# special values in various locations. This is primarily of use
		# for the SIMD tests which do operations in parallel.
		rotplaces = 4
		nanvaldata = nanvaldatabase[rotplaces:] + nanvaldatabase[:rotplaces]
		infvaldata = infvaldatabase[rotplaces:] + infvaldatabase[:rotplaces]
		ninfvaldata = ninfvaldatabase[rotplaces:] + ninfvaldatabase[:rotplaces]
		mixedvaldata = mixedvaldatabase[rotplaces:] + mixedvaldatabase[:rotplaces]

		# Now create the arrays used in the tests.
		self.data_nan = array.array('d', [x for x,y in zip(itertools.cycle(nanvaldata), range(arraylength))])
		self.data_inf = array.array('d', [x for x,y in zip(itertools.cycle(infvaldata), range(arraylength))])
		self.data_ninf = array.array('d', [x for x,y in zip(itertools.cycle(ninfvaldata), range(arraylength))])
		self.data_mixed = array.array('d', [x for x,y in zip(itertools.cycle(mixedvaldata), range(arraylength))])



	########################################################
	def test_amax_nonfinite_nan_01(self):
		"""Test amax  - Array code d. Test NaN data with  odd length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_nan , nosimd=True)
		result2 = max(self.data_nan)
		# We don't actually test the result as there is no meaningful order
		# comparison with NaN. 


	########################################################
	def test_amax_nonfinite_inf_02(self):
		"""Test amax  - Array code d. Test Inf data with  odd length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_inf , nosimd=True)
		self.assertEqual(result, max(self.data_inf))


	########################################################
	def test_amax_nonfinite_ninf_03(self):
		"""Test amax  - Array code d. Test Negative Inf data with  odd length array data shifted 4 without SIMD.
		"""
		result = arrayfunc.amax(self.data_ninf , nosimd=True)
		self.assertEqual(result, max(self.data_ninf))


	########################################################
	def test_amax_nonfinite_mixed_04(self):
		"""Test amax  - Array code d. Test mixed non-finite data with  odd length array data shifted 4 without SIMD.
		"""
		# The mixed test does not include NaN, as there is no meaningful order
		# comparison with NaN. 
		result = arrayfunc.amax(self.data_mixed , nosimd=True)
		self.assertEqual(result, max(self.data_mixed))



##############################################################################

##############################################################################
if __name__ == '__main__':

	# Check to see if the log file option has been selected. This is an option
	# which we have added in order to decide where to output the results.
	if '-l' in sys.argv:
		# Remove the option from the argument list so that "unittest" does 
		# not complain about unknown options.
		sys.argv.remove('-l')

		with open('af_unittest.txt', 'a') as f:
			f.write('\n\n')
			f.write('amax\n\n')
			trun = unittest.TextTestRunner(f)
			unittest.main(testRunner=trun)
	else:
		unittest.main()

##############################################################################
