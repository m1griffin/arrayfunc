#!/usr/bin/env python3
##############################################################################
# Project:  arrayfunc
# Module:   test_fma.py
# Purpose:  arrayfunc unit test.
# Language: Python 3.4
# Date:     30-Nov-2018.
# Ver:      17-Dec-2018.
#
###############################################################################
#
#   Copyright 2014 - 2018    Michael Griffin    <m12.griffin@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
##############################################################################
"""This conducts unit tests for fma.
"""

##############################################################################
import sys

import array
import itertools
import math
import operator
import platform
import copy

import unittest

import arrayfunc

##############################################################################

##############################################################################

# The following code is all auto-generated.




##############################################################################
class fma_general_optionsnone_f(unittest.TestCase):
	"""Test for basic general function operation using no options.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('f', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('f', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - no options - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					# No array limits used.

					arrayfunc.fma(datax, y, z)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - no options - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					# No array limits used.

					arrayfunc.fma(self.datax, y, z, self.dataout)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - no options - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(datax, self.datay, z)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - no options - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(self.datax, self.datay, z, self.dataout)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - no options - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(datax, y, self.dataz)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - no options - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - no options - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - no options - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsmaxlen_f(unittest.TestCase):
	"""Test for basic general function operation using maxlen option.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('f', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('f', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - maxlen option - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					expected = expected[0:self.limited] + list(self.datax)[self.limited:]

					arrayfunc.fma(datax, y, z, maxlen=self.limited)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - maxlen option - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

					arrayfunc.fma(self.datax, y, z, self.dataout, maxlen=self.limited)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - maxlen option - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, self.datay, z, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - maxlen option - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, self.datay, z, self.dataout, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - maxlen option - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, y, self.dataz, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - maxlen option - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - maxlen option - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.datax)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, maxlen=self.limited)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - maxlen option - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout, maxlen=self.limited)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsmatherror_f(unittest.TestCase):
	"""Test for basic general function operation using matherror option.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('f', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('f', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - matherror option - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					# No array limits used.

					arrayfunc.fma(datax, y, z, matherrors=True)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - matherror option - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					# No array limits used.

					arrayfunc.fma(self.datax, y, z, self.dataout, matherrors=True)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - matherror option - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(datax, self.datay, z, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - matherror option - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(self.datax, self.datay, z, self.dataout, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - matherror option - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(datax, y, self.dataz, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - matherror option - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - matherror option - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz, matherrors=True)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - matherror option - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout, matherrors=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsmaxlenmatherrors_f(unittest.TestCase):
	"""Test for basic general function operation using maxlen and matherrors option.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('f', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('f', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - maxlen and matherrors option - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					expected = expected[0:self.limited] + list(self.datax)[self.limited:]

					arrayfunc.fma(datax, y, z, maxlen=self.limited, matherrors=True)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - maxlen and matherrors option - Array code f.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

					arrayfunc.fma(self.datax, y, z, self.dataout, maxlen=self.limited, matherrors=True)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - maxlen and matherrors option - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, self.datay, z, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - maxlen and matherrors option - Array code f.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, self.datay, z, self.dataout, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - maxlen and matherrors option - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, y, self.dataz, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - maxlen and matherrors option - Array code f.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - maxlen and matherrors option - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.datax)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, maxlen=self.limited, matherrors=True)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - maxlen and matherrors option - Array code f.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout, maxlen=self.limited, matherrors=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_param_errors_types_f(unittest.TestCase):
	"""Test for invalid parameters.
	param_int_invalid_template
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		xdata = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]
		arraysize = len(xdata)

		# Floating point test data.
		self.floatarrayx = array.array('f', xdata)
		self.floatarrayy = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.floatarrayz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.floatarrayout = array.array('f', itertools.repeat(0.0, arraysize))

		# Take an arbitrary value from each data array for when we need only a single value.
		self.floatnumx = self.floatarrayx[1]
		self.floatnumy = self.floatarrayy[1]
		self.floatnumz = self.floatarrayz[1]
		self.floatnumout = 0.0

		# Integer test data.
		self.intarrayx = array.array('i', [int(x) for x in self.floatarrayx])
		self.intarrayy = array.array('i', [int(x) for x in self.floatarrayy])
		self.intarrayz = array.array('i', [int(x) for x in self.floatarrayz])
		self.intarrayout = array.array('i', [int(x) for x in self.floatarrayout])
		self.intarrayout = array.array('i', [0] * arraysize)

		# Take an arbitrary value from each data array for when we need only a single value.
		self.intnumx = self.intarrayx[1]
		self.intnumy = self.intarrayy[1]
		self.intnumz = self.intarrayz[1]
		self.intnumout = 0

		# Bytes test data.
		self.bytesx = bytes([abs(int(x)) for x in self.floatarrayx])
		self.bytesy = bytes([abs(int(x)) for x in self.floatarrayy])
		self.bytesz = bytes([abs(int(x)) for x in self.floatarrayz])
		self.bytesout = bytes([abs(int(x)) for x in self.floatarrayout])

		# String data.
		self.strx = ''.join([str(x) for x in self.bytesx])
		self.stry = ''.join([str(x) for x in self.bytesy])
		self.strz = ''.join([str(x) for x in self.bytesz])
		self.strout = ''.join([str(x) for x in self.bytesout])



	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_floatnum_0(self):
		"""Test fma as *floatarray_floatarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_intarray_1(self):
		"""Test fma as *floatarray_floatarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_intnum_2(self):
		"""Test fma as *floatarray_floatarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_bytes_3(self):
		"""Test fma as *floatarray_floatarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_str_4(self):
		"""Test fma as *floatarray_floatarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_floatnum_5(self):
		"""Test fma as *floatarray_floatarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_intarray_6(self):
		"""Test fma as *floatarray_floatarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_intnum_7(self):
		"""Test fma as *floatarray_floatarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_bytes_8(self):
		"""Test fma as *floatarray_floatarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_str_9(self):
		"""Test fma as *floatarray_floatarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_floatarray_10(self):
		"""Test fma as *floatarray_floatarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_floatnum_11(self):
		"""Test fma as *floatarray_floatarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_intarray_12(self):
		"""Test fma as *floatarray_floatarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_intnum_13(self):
		"""Test fma as *floatarray_floatarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_bytes_14(self):
		"""Test fma as *floatarray_floatarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_str_15(self):
		"""Test fma as *floatarray_floatarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_none_16(self):
		"""Test fma as *floatarray_floatarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_floatarray_17(self):
		"""Test fma as *floatarray_floatarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_floatnum_18(self):
		"""Test fma as *floatarray_floatarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_intarray_19(self):
		"""Test fma as *floatarray_floatarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_intnum_20(self):
		"""Test fma as *floatarray_floatarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_bytes_21(self):
		"""Test fma as *floatarray_floatarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_str_22(self):
		"""Test fma as *floatarray_floatarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_none_23(self):
		"""Test fma as *floatarray_floatarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_floatarray_24(self):
		"""Test fma as *floatarray_floatarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_floatnum_25(self):
		"""Test fma as *floatarray_floatarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_intarray_26(self):
		"""Test fma as *floatarray_floatarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_intnum_27(self):
		"""Test fma as *floatarray_floatarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_bytes_28(self):
		"""Test fma as *floatarray_floatarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_str_29(self):
		"""Test fma as *floatarray_floatarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_none_30(self):
		"""Test fma as *floatarray_floatarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_floatarray_31(self):
		"""Test fma as *floatarray_floatarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_floatnum_32(self):
		"""Test fma as *floatarray_floatarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_intarray_33(self):
		"""Test fma as *floatarray_floatarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_intnum_34(self):
		"""Test fma as *floatarray_floatarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_bytes_35(self):
		"""Test fma as *floatarray_floatarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_str_36(self):
		"""Test fma as *floatarray_floatarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_none_37(self):
		"""Test fma as *floatarray_floatarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_floatnum_38(self):
		"""Test fma as *floatarray_floatnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_intarray_39(self):
		"""Test fma as *floatarray_floatnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_intnum_40(self):
		"""Test fma as *floatarray_floatnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_bytes_41(self):
		"""Test fma as *floatarray_floatnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_str_42(self):
		"""Test fma as *floatarray_floatnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_floatnum_43(self):
		"""Test fma as *floatarray_floatnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_intarray_44(self):
		"""Test fma as *floatarray_floatnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_intnum_45(self):
		"""Test fma as *floatarray_floatnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_bytes_46(self):
		"""Test fma as *floatarray_floatnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_str_47(self):
		"""Test fma as *floatarray_floatnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_floatarray_48(self):
		"""Test fma as *floatarray_floatnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_floatnum_49(self):
		"""Test fma as *floatarray_floatnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_intarray_50(self):
		"""Test fma as *floatarray_floatnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_intnum_51(self):
		"""Test fma as *floatarray_floatnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_bytes_52(self):
		"""Test fma as *floatarray_floatnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_str_53(self):
		"""Test fma as *floatarray_floatnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_none_54(self):
		"""Test fma as *floatarray_floatnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_floatarray_55(self):
		"""Test fma as *floatarray_floatnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_floatnum_56(self):
		"""Test fma as *floatarray_floatnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_intarray_57(self):
		"""Test fma as *floatarray_floatnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_intnum_58(self):
		"""Test fma as *floatarray_floatnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_bytes_59(self):
		"""Test fma as *floatarray_floatnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_str_60(self):
		"""Test fma as *floatarray_floatnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_none_61(self):
		"""Test fma as *floatarray_floatnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_floatarray_62(self):
		"""Test fma as *floatarray_floatnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_floatnum_63(self):
		"""Test fma as *floatarray_floatnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_intarray_64(self):
		"""Test fma as *floatarray_floatnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_intnum_65(self):
		"""Test fma as *floatarray_floatnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_bytes_66(self):
		"""Test fma as *floatarray_floatnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_str_67(self):
		"""Test fma as *floatarray_floatnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_none_68(self):
		"""Test fma as *floatarray_floatnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_floatarray_69(self):
		"""Test fma as *floatarray_floatnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_floatnum_70(self):
		"""Test fma as *floatarray_floatnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_intarray_71(self):
		"""Test fma as *floatarray_floatnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_intnum_72(self):
		"""Test fma as *floatarray_floatnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_bytes_73(self):
		"""Test fma as *floatarray_floatnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_str_74(self):
		"""Test fma as *floatarray_floatnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_none_75(self):
		"""Test fma as *floatarray_floatnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_floatarray_76(self):
		"""Test fma as *floatarray_intarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_floatnum_77(self):
		"""Test fma as *floatarray_intarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_intarray_78(self):
		"""Test fma as *floatarray_intarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_intnum_79(self):
		"""Test fma as *floatarray_intarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_bytes_80(self):
		"""Test fma as *floatarray_intarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_str_81(self):
		"""Test fma as *floatarray_intarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_none_82(self):
		"""Test fma as *floatarray_intarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_floatarray_83(self):
		"""Test fma as *floatarray_intarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_floatnum_84(self):
		"""Test fma as *floatarray_intarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_intarray_85(self):
		"""Test fma as *floatarray_intarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_intnum_86(self):
		"""Test fma as *floatarray_intarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_bytes_87(self):
		"""Test fma as *floatarray_intarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_str_88(self):
		"""Test fma as *floatarray_intarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_none_89(self):
		"""Test fma as *floatarray_intarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_floatarray_90(self):
		"""Test fma as *floatarray_intarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_floatnum_91(self):
		"""Test fma as *floatarray_intarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_intarray_92(self):
		"""Test fma as *floatarray_intarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_intnum_93(self):
		"""Test fma as *floatarray_intarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_bytes_94(self):
		"""Test fma as *floatarray_intarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_str_95(self):
		"""Test fma as *floatarray_intarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_none_96(self):
		"""Test fma as *floatarray_intarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_floatarray_97(self):
		"""Test fma as *floatarray_intarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_floatnum_98(self):
		"""Test fma as *floatarray_intarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_intarray_99(self):
		"""Test fma as *floatarray_intarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_intnum_100(self):
		"""Test fma as *floatarray_intarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_bytes_101(self):
		"""Test fma as *floatarray_intarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_str_102(self):
		"""Test fma as *floatarray_intarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_none_103(self):
		"""Test fma as *floatarray_intarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_floatarray_104(self):
		"""Test fma as *floatarray_intarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_floatnum_105(self):
		"""Test fma as *floatarray_intarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_intarray_106(self):
		"""Test fma as *floatarray_intarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_intnum_107(self):
		"""Test fma as *floatarray_intarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_bytes_108(self):
		"""Test fma as *floatarray_intarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_str_109(self):
		"""Test fma as *floatarray_intarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_none_110(self):
		"""Test fma as *floatarray_intarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_floatarray_111(self):
		"""Test fma as *floatarray_intarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_floatnum_112(self):
		"""Test fma as *floatarray_intarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_intarray_113(self):
		"""Test fma as *floatarray_intarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_intnum_114(self):
		"""Test fma as *floatarray_intarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_bytes_115(self):
		"""Test fma as *floatarray_intarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_str_116(self):
		"""Test fma as *floatarray_intarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_none_117(self):
		"""Test fma as *floatarray_intarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_floatarray_118(self):
		"""Test fma as *floatarray_intnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_floatnum_119(self):
		"""Test fma as *floatarray_intnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_intarray_120(self):
		"""Test fma as *floatarray_intnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_intnum_121(self):
		"""Test fma as *floatarray_intnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_bytes_122(self):
		"""Test fma as *floatarray_intnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_str_123(self):
		"""Test fma as *floatarray_intnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_none_124(self):
		"""Test fma as *floatarray_intnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_floatarray_125(self):
		"""Test fma as *floatarray_intnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_floatnum_126(self):
		"""Test fma as *floatarray_intnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_intarray_127(self):
		"""Test fma as *floatarray_intnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_intnum_128(self):
		"""Test fma as *floatarray_intnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_bytes_129(self):
		"""Test fma as *floatarray_intnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_str_130(self):
		"""Test fma as *floatarray_intnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_none_131(self):
		"""Test fma as *floatarray_intnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_floatarray_132(self):
		"""Test fma as *floatarray_intnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_floatnum_133(self):
		"""Test fma as *floatarray_intnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_intarray_134(self):
		"""Test fma as *floatarray_intnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_intnum_135(self):
		"""Test fma as *floatarray_intnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_bytes_136(self):
		"""Test fma as *floatarray_intnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_str_137(self):
		"""Test fma as *floatarray_intnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_none_138(self):
		"""Test fma as *floatarray_intnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_floatarray_139(self):
		"""Test fma as *floatarray_intnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_floatnum_140(self):
		"""Test fma as *floatarray_intnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_intarray_141(self):
		"""Test fma as *floatarray_intnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_intnum_142(self):
		"""Test fma as *floatarray_intnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_bytes_143(self):
		"""Test fma as *floatarray_intnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_str_144(self):
		"""Test fma as *floatarray_intnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_none_145(self):
		"""Test fma as *floatarray_intnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_floatarray_146(self):
		"""Test fma as *floatarray_intnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_floatnum_147(self):
		"""Test fma as *floatarray_intnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_intarray_148(self):
		"""Test fma as *floatarray_intnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_intnum_149(self):
		"""Test fma as *floatarray_intnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_bytes_150(self):
		"""Test fma as *floatarray_intnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_str_151(self):
		"""Test fma as *floatarray_intnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_none_152(self):
		"""Test fma as *floatarray_intnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_floatarray_153(self):
		"""Test fma as *floatarray_intnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_floatnum_154(self):
		"""Test fma as *floatarray_intnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_intarray_155(self):
		"""Test fma as *floatarray_intnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_intnum_156(self):
		"""Test fma as *floatarray_intnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_bytes_157(self):
		"""Test fma as *floatarray_intnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_str_158(self):
		"""Test fma as *floatarray_intnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_none_159(self):
		"""Test fma as *floatarray_intnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_floatarray_160(self):
		"""Test fma as *floatarray_bytes_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_floatnum_161(self):
		"""Test fma as *floatarray_bytes_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_intarray_162(self):
		"""Test fma as *floatarray_bytes_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_intnum_163(self):
		"""Test fma as *floatarray_bytes_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_bytes_164(self):
		"""Test fma as *floatarray_bytes_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_str_165(self):
		"""Test fma as *floatarray_bytes_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_none_166(self):
		"""Test fma as *floatarray_bytes_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_floatarray_167(self):
		"""Test fma as *floatarray_bytes_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_floatnum_168(self):
		"""Test fma as *floatarray_bytes_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_intarray_169(self):
		"""Test fma as *floatarray_bytes_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_intnum_170(self):
		"""Test fma as *floatarray_bytes_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_bytes_171(self):
		"""Test fma as *floatarray_bytes_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_str_172(self):
		"""Test fma as *floatarray_bytes_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_none_173(self):
		"""Test fma as *floatarray_bytes_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_floatarray_174(self):
		"""Test fma as *floatarray_bytes_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_floatnum_175(self):
		"""Test fma as *floatarray_bytes_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_intarray_176(self):
		"""Test fma as *floatarray_bytes_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_intnum_177(self):
		"""Test fma as *floatarray_bytes_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_bytes_178(self):
		"""Test fma as *floatarray_bytes_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_str_179(self):
		"""Test fma as *floatarray_bytes_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_none_180(self):
		"""Test fma as *floatarray_bytes_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_floatarray_181(self):
		"""Test fma as *floatarray_bytes_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_floatnum_182(self):
		"""Test fma as *floatarray_bytes_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_intarray_183(self):
		"""Test fma as *floatarray_bytes_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_intnum_184(self):
		"""Test fma as *floatarray_bytes_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_bytes_185(self):
		"""Test fma as *floatarray_bytes_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_str_186(self):
		"""Test fma as *floatarray_bytes_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_none_187(self):
		"""Test fma as *floatarray_bytes_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_floatarray_188(self):
		"""Test fma as *floatarray_bytes_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_floatnum_189(self):
		"""Test fma as *floatarray_bytes_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_intarray_190(self):
		"""Test fma as *floatarray_bytes_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_intnum_191(self):
		"""Test fma as *floatarray_bytes_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_bytes_192(self):
		"""Test fma as *floatarray_bytes_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_str_193(self):
		"""Test fma as *floatarray_bytes_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_none_194(self):
		"""Test fma as *floatarray_bytes_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_floatarray_195(self):
		"""Test fma as *floatarray_bytes_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_floatnum_196(self):
		"""Test fma as *floatarray_bytes_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_intarray_197(self):
		"""Test fma as *floatarray_bytes_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_intnum_198(self):
		"""Test fma as *floatarray_bytes_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_bytes_199(self):
		"""Test fma as *floatarray_bytes_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_str_200(self):
		"""Test fma as *floatarray_bytes_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_none_201(self):
		"""Test fma as *floatarray_bytes_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_floatarray_202(self):
		"""Test fma as *floatarray_str_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_floatnum_203(self):
		"""Test fma as *floatarray_str_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_intarray_204(self):
		"""Test fma as *floatarray_str_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_intnum_205(self):
		"""Test fma as *floatarray_str_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_bytes_206(self):
		"""Test fma as *floatarray_str_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_str_207(self):
		"""Test fma as *floatarray_str_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_none_208(self):
		"""Test fma as *floatarray_str_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_floatarray_209(self):
		"""Test fma as *floatarray_str_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_floatnum_210(self):
		"""Test fma as *floatarray_str_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_intarray_211(self):
		"""Test fma as *floatarray_str_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_intnum_212(self):
		"""Test fma as *floatarray_str_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_bytes_213(self):
		"""Test fma as *floatarray_str_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_str_214(self):
		"""Test fma as *floatarray_str_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_none_215(self):
		"""Test fma as *floatarray_str_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_floatarray_216(self):
		"""Test fma as *floatarray_str_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_floatnum_217(self):
		"""Test fma as *floatarray_str_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_intarray_218(self):
		"""Test fma as *floatarray_str_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_intnum_219(self):
		"""Test fma as *floatarray_str_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_bytes_220(self):
		"""Test fma as *floatarray_str_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_str_221(self):
		"""Test fma as *floatarray_str_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_none_222(self):
		"""Test fma as *floatarray_str_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_floatarray_223(self):
		"""Test fma as *floatarray_str_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_floatnum_224(self):
		"""Test fma as *floatarray_str_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_intarray_225(self):
		"""Test fma as *floatarray_str_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_intnum_226(self):
		"""Test fma as *floatarray_str_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_bytes_227(self):
		"""Test fma as *floatarray_str_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_str_228(self):
		"""Test fma as *floatarray_str_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_none_229(self):
		"""Test fma as *floatarray_str_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_floatarray_230(self):
		"""Test fma as *floatarray_str_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_floatnum_231(self):
		"""Test fma as *floatarray_str_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_intarray_232(self):
		"""Test fma as *floatarray_str_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_intnum_233(self):
		"""Test fma as *floatarray_str_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_bytes_234(self):
		"""Test fma as *floatarray_str_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_str_235(self):
		"""Test fma as *floatarray_str_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_none_236(self):
		"""Test fma as *floatarray_str_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_floatarray_237(self):
		"""Test fma as *floatarray_str_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_floatnum_238(self):
		"""Test fma as *floatarray_str_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_intarray_239(self):
		"""Test fma as *floatarray_str_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_intnum_240(self):
		"""Test fma as *floatarray_str_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_bytes_241(self):
		"""Test fma as *floatarray_str_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_str_242(self):
		"""Test fma as *floatarray_str_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_none_243(self):
		"""Test fma as *floatarray_str_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_floatarray_244(self):
		"""Test fma as *floatnum_floatarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_floatnum_245(self):
		"""Test fma as *floatnum_floatarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_intarray_246(self):
		"""Test fma as *floatnum_floatarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_intnum_247(self):
		"""Test fma as *floatnum_floatarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_bytes_248(self):
		"""Test fma as *floatnum_floatarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_str_249(self):
		"""Test fma as *floatnum_floatarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_none_250(self):
		"""Test fma as *floatnum_floatarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_floatarray_251(self):
		"""Test fma as *floatnum_floatarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_floatnum_252(self):
		"""Test fma as *floatnum_floatarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_intarray_253(self):
		"""Test fma as *floatnum_floatarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_intnum_254(self):
		"""Test fma as *floatnum_floatarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_bytes_255(self):
		"""Test fma as *floatnum_floatarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_str_256(self):
		"""Test fma as *floatnum_floatarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_none_257(self):
		"""Test fma as *floatnum_floatarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_floatarray_258(self):
		"""Test fma as *floatnum_floatarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_floatnum_259(self):
		"""Test fma as *floatnum_floatarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_intarray_260(self):
		"""Test fma as *floatnum_floatarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_intnum_261(self):
		"""Test fma as *floatnum_floatarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_bytes_262(self):
		"""Test fma as *floatnum_floatarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_str_263(self):
		"""Test fma as *floatnum_floatarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_none_264(self):
		"""Test fma as *floatnum_floatarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_floatarray_265(self):
		"""Test fma as *floatnum_floatarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_floatnum_266(self):
		"""Test fma as *floatnum_floatarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_intarray_267(self):
		"""Test fma as *floatnum_floatarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_intnum_268(self):
		"""Test fma as *floatnum_floatarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_bytes_269(self):
		"""Test fma as *floatnum_floatarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_str_270(self):
		"""Test fma as *floatnum_floatarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_none_271(self):
		"""Test fma as *floatnum_floatarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_floatarray_272(self):
		"""Test fma as *floatnum_floatarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_floatnum_273(self):
		"""Test fma as *floatnum_floatarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_intarray_274(self):
		"""Test fma as *floatnum_floatarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_intnum_275(self):
		"""Test fma as *floatnum_floatarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_bytes_276(self):
		"""Test fma as *floatnum_floatarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_str_277(self):
		"""Test fma as *floatnum_floatarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_none_278(self):
		"""Test fma as *floatnum_floatarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_floatarray_279(self):
		"""Test fma as *floatnum_floatarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_floatnum_280(self):
		"""Test fma as *floatnum_floatarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_intarray_281(self):
		"""Test fma as *floatnum_floatarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_intnum_282(self):
		"""Test fma as *floatnum_floatarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_bytes_283(self):
		"""Test fma as *floatnum_floatarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_str_284(self):
		"""Test fma as *floatnum_floatarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_none_285(self):
		"""Test fma as *floatnum_floatarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_floatarray_286(self):
		"""Test fma as *floatnum_floatnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_floatnum_287(self):
		"""Test fma as *floatnum_floatnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_intarray_288(self):
		"""Test fma as *floatnum_floatnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_intnum_289(self):
		"""Test fma as *floatnum_floatnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_bytes_290(self):
		"""Test fma as *floatnum_floatnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_str_291(self):
		"""Test fma as *floatnum_floatnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_none_292(self):
		"""Test fma as *floatnum_floatnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_floatarray_293(self):
		"""Test fma as *floatnum_floatnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_floatnum_294(self):
		"""Test fma as *floatnum_floatnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_intarray_295(self):
		"""Test fma as *floatnum_floatnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_intnum_296(self):
		"""Test fma as *floatnum_floatnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_bytes_297(self):
		"""Test fma as *floatnum_floatnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_str_298(self):
		"""Test fma as *floatnum_floatnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_none_299(self):
		"""Test fma as *floatnum_floatnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_floatarray_300(self):
		"""Test fma as *floatnum_floatnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_floatnum_301(self):
		"""Test fma as *floatnum_floatnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_intarray_302(self):
		"""Test fma as *floatnum_floatnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_intnum_303(self):
		"""Test fma as *floatnum_floatnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_bytes_304(self):
		"""Test fma as *floatnum_floatnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_str_305(self):
		"""Test fma as *floatnum_floatnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_none_306(self):
		"""Test fma as *floatnum_floatnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_floatarray_307(self):
		"""Test fma as *floatnum_floatnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_floatnum_308(self):
		"""Test fma as *floatnum_floatnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_intarray_309(self):
		"""Test fma as *floatnum_floatnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_intnum_310(self):
		"""Test fma as *floatnum_floatnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_bytes_311(self):
		"""Test fma as *floatnum_floatnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_str_312(self):
		"""Test fma as *floatnum_floatnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_none_313(self):
		"""Test fma as *floatnum_floatnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_floatarray_314(self):
		"""Test fma as *floatnum_floatnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_floatnum_315(self):
		"""Test fma as *floatnum_floatnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_intarray_316(self):
		"""Test fma as *floatnum_floatnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_intnum_317(self):
		"""Test fma as *floatnum_floatnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_bytes_318(self):
		"""Test fma as *floatnum_floatnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_str_319(self):
		"""Test fma as *floatnum_floatnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_none_320(self):
		"""Test fma as *floatnum_floatnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_floatarray_321(self):
		"""Test fma as *floatnum_floatnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_floatnum_322(self):
		"""Test fma as *floatnum_floatnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_intarray_323(self):
		"""Test fma as *floatnum_floatnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_intnum_324(self):
		"""Test fma as *floatnum_floatnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_bytes_325(self):
		"""Test fma as *floatnum_floatnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_str_326(self):
		"""Test fma as *floatnum_floatnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_none_327(self):
		"""Test fma as *floatnum_floatnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_floatarray_328(self):
		"""Test fma as *floatnum_intarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_floatnum_329(self):
		"""Test fma as *floatnum_intarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_intarray_330(self):
		"""Test fma as *floatnum_intarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_intnum_331(self):
		"""Test fma as *floatnum_intarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_bytes_332(self):
		"""Test fma as *floatnum_intarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_str_333(self):
		"""Test fma as *floatnum_intarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_none_334(self):
		"""Test fma as *floatnum_intarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_floatarray_335(self):
		"""Test fma as *floatnum_intarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_floatnum_336(self):
		"""Test fma as *floatnum_intarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_intarray_337(self):
		"""Test fma as *floatnum_intarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_intnum_338(self):
		"""Test fma as *floatnum_intarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_bytes_339(self):
		"""Test fma as *floatnum_intarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_str_340(self):
		"""Test fma as *floatnum_intarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_none_341(self):
		"""Test fma as *floatnum_intarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_floatarray_342(self):
		"""Test fma as *floatnum_intarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_floatnum_343(self):
		"""Test fma as *floatnum_intarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_intarray_344(self):
		"""Test fma as *floatnum_intarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_intnum_345(self):
		"""Test fma as *floatnum_intarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_bytes_346(self):
		"""Test fma as *floatnum_intarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_str_347(self):
		"""Test fma as *floatnum_intarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_none_348(self):
		"""Test fma as *floatnum_intarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_floatarray_349(self):
		"""Test fma as *floatnum_intarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_floatnum_350(self):
		"""Test fma as *floatnum_intarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_intarray_351(self):
		"""Test fma as *floatnum_intarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_intnum_352(self):
		"""Test fma as *floatnum_intarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_bytes_353(self):
		"""Test fma as *floatnum_intarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_str_354(self):
		"""Test fma as *floatnum_intarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_none_355(self):
		"""Test fma as *floatnum_intarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_floatarray_356(self):
		"""Test fma as *floatnum_intarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_floatnum_357(self):
		"""Test fma as *floatnum_intarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_intarray_358(self):
		"""Test fma as *floatnum_intarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_intnum_359(self):
		"""Test fma as *floatnum_intarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_bytes_360(self):
		"""Test fma as *floatnum_intarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_str_361(self):
		"""Test fma as *floatnum_intarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_none_362(self):
		"""Test fma as *floatnum_intarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_floatarray_363(self):
		"""Test fma as *floatnum_intarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_floatnum_364(self):
		"""Test fma as *floatnum_intarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_intarray_365(self):
		"""Test fma as *floatnum_intarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_intnum_366(self):
		"""Test fma as *floatnum_intarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_bytes_367(self):
		"""Test fma as *floatnum_intarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_str_368(self):
		"""Test fma as *floatnum_intarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_none_369(self):
		"""Test fma as *floatnum_intarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_floatarray_370(self):
		"""Test fma as *floatnum_intnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_floatnum_371(self):
		"""Test fma as *floatnum_intnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_intarray_372(self):
		"""Test fma as *floatnum_intnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_intnum_373(self):
		"""Test fma as *floatnum_intnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_bytes_374(self):
		"""Test fma as *floatnum_intnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_str_375(self):
		"""Test fma as *floatnum_intnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_none_376(self):
		"""Test fma as *floatnum_intnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_floatarray_377(self):
		"""Test fma as *floatnum_intnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_floatnum_378(self):
		"""Test fma as *floatnum_intnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_intarray_379(self):
		"""Test fma as *floatnum_intnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_intnum_380(self):
		"""Test fma as *floatnum_intnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_bytes_381(self):
		"""Test fma as *floatnum_intnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_str_382(self):
		"""Test fma as *floatnum_intnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_none_383(self):
		"""Test fma as *floatnum_intnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_floatarray_384(self):
		"""Test fma as *floatnum_intnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_floatnum_385(self):
		"""Test fma as *floatnum_intnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_intarray_386(self):
		"""Test fma as *floatnum_intnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_intnum_387(self):
		"""Test fma as *floatnum_intnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_bytes_388(self):
		"""Test fma as *floatnum_intnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_str_389(self):
		"""Test fma as *floatnum_intnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_none_390(self):
		"""Test fma as *floatnum_intnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_floatarray_391(self):
		"""Test fma as *floatnum_intnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_floatnum_392(self):
		"""Test fma as *floatnum_intnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_intarray_393(self):
		"""Test fma as *floatnum_intnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_intnum_394(self):
		"""Test fma as *floatnum_intnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_bytes_395(self):
		"""Test fma as *floatnum_intnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_str_396(self):
		"""Test fma as *floatnum_intnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_none_397(self):
		"""Test fma as *floatnum_intnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_floatarray_398(self):
		"""Test fma as *floatnum_intnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_floatnum_399(self):
		"""Test fma as *floatnum_intnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_intarray_400(self):
		"""Test fma as *floatnum_intnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_intnum_401(self):
		"""Test fma as *floatnum_intnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_bytes_402(self):
		"""Test fma as *floatnum_intnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_str_403(self):
		"""Test fma as *floatnum_intnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_none_404(self):
		"""Test fma as *floatnum_intnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_floatarray_405(self):
		"""Test fma as *floatnum_intnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_floatnum_406(self):
		"""Test fma as *floatnum_intnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_intarray_407(self):
		"""Test fma as *floatnum_intnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_intnum_408(self):
		"""Test fma as *floatnum_intnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_bytes_409(self):
		"""Test fma as *floatnum_intnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_str_410(self):
		"""Test fma as *floatnum_intnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_none_411(self):
		"""Test fma as *floatnum_intnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_floatarray_412(self):
		"""Test fma as *floatnum_bytes_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_floatnum_413(self):
		"""Test fma as *floatnum_bytes_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_intarray_414(self):
		"""Test fma as *floatnum_bytes_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_intnum_415(self):
		"""Test fma as *floatnum_bytes_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_bytes_416(self):
		"""Test fma as *floatnum_bytes_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_str_417(self):
		"""Test fma as *floatnum_bytes_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_none_418(self):
		"""Test fma as *floatnum_bytes_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_floatarray_419(self):
		"""Test fma as *floatnum_bytes_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_floatnum_420(self):
		"""Test fma as *floatnum_bytes_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_intarray_421(self):
		"""Test fma as *floatnum_bytes_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_intnum_422(self):
		"""Test fma as *floatnum_bytes_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_bytes_423(self):
		"""Test fma as *floatnum_bytes_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_str_424(self):
		"""Test fma as *floatnum_bytes_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_none_425(self):
		"""Test fma as *floatnum_bytes_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_floatarray_426(self):
		"""Test fma as *floatnum_bytes_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_floatnum_427(self):
		"""Test fma as *floatnum_bytes_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_intarray_428(self):
		"""Test fma as *floatnum_bytes_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_intnum_429(self):
		"""Test fma as *floatnum_bytes_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_bytes_430(self):
		"""Test fma as *floatnum_bytes_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_str_431(self):
		"""Test fma as *floatnum_bytes_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_none_432(self):
		"""Test fma as *floatnum_bytes_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_floatarray_433(self):
		"""Test fma as *floatnum_bytes_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_floatnum_434(self):
		"""Test fma as *floatnum_bytes_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_intarray_435(self):
		"""Test fma as *floatnum_bytes_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_intnum_436(self):
		"""Test fma as *floatnum_bytes_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_bytes_437(self):
		"""Test fma as *floatnum_bytes_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_str_438(self):
		"""Test fma as *floatnum_bytes_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_none_439(self):
		"""Test fma as *floatnum_bytes_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_floatarray_440(self):
		"""Test fma as *floatnum_bytes_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_floatnum_441(self):
		"""Test fma as *floatnum_bytes_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_intarray_442(self):
		"""Test fma as *floatnum_bytes_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_intnum_443(self):
		"""Test fma as *floatnum_bytes_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_bytes_444(self):
		"""Test fma as *floatnum_bytes_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_str_445(self):
		"""Test fma as *floatnum_bytes_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_none_446(self):
		"""Test fma as *floatnum_bytes_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_floatarray_447(self):
		"""Test fma as *floatnum_bytes_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_floatnum_448(self):
		"""Test fma as *floatnum_bytes_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_intarray_449(self):
		"""Test fma as *floatnum_bytes_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_intnum_450(self):
		"""Test fma as *floatnum_bytes_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_bytes_451(self):
		"""Test fma as *floatnum_bytes_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_str_452(self):
		"""Test fma as *floatnum_bytes_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_none_453(self):
		"""Test fma as *floatnum_bytes_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_floatarray_454(self):
		"""Test fma as *floatnum_str_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_floatnum_455(self):
		"""Test fma as *floatnum_str_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_intarray_456(self):
		"""Test fma as *floatnum_str_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_intnum_457(self):
		"""Test fma as *floatnum_str_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_bytes_458(self):
		"""Test fma as *floatnum_str_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_str_459(self):
		"""Test fma as *floatnum_str_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_none_460(self):
		"""Test fma as *floatnum_str_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_floatarray_461(self):
		"""Test fma as *floatnum_str_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_floatnum_462(self):
		"""Test fma as *floatnum_str_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_intarray_463(self):
		"""Test fma as *floatnum_str_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_intnum_464(self):
		"""Test fma as *floatnum_str_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_bytes_465(self):
		"""Test fma as *floatnum_str_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_str_466(self):
		"""Test fma as *floatnum_str_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_none_467(self):
		"""Test fma as *floatnum_str_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_floatarray_468(self):
		"""Test fma as *floatnum_str_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_floatnum_469(self):
		"""Test fma as *floatnum_str_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_intarray_470(self):
		"""Test fma as *floatnum_str_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_intnum_471(self):
		"""Test fma as *floatnum_str_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_bytes_472(self):
		"""Test fma as *floatnum_str_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_str_473(self):
		"""Test fma as *floatnum_str_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_none_474(self):
		"""Test fma as *floatnum_str_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_floatarray_475(self):
		"""Test fma as *floatnum_str_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_floatnum_476(self):
		"""Test fma as *floatnum_str_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_intarray_477(self):
		"""Test fma as *floatnum_str_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_intnum_478(self):
		"""Test fma as *floatnum_str_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_bytes_479(self):
		"""Test fma as *floatnum_str_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_str_480(self):
		"""Test fma as *floatnum_str_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_none_481(self):
		"""Test fma as *floatnum_str_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_floatarray_482(self):
		"""Test fma as *floatnum_str_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_floatnum_483(self):
		"""Test fma as *floatnum_str_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_intarray_484(self):
		"""Test fma as *floatnum_str_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_intnum_485(self):
		"""Test fma as *floatnum_str_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_bytes_486(self):
		"""Test fma as *floatnum_str_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_str_487(self):
		"""Test fma as *floatnum_str_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_none_488(self):
		"""Test fma as *floatnum_str_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_floatarray_489(self):
		"""Test fma as *floatnum_str_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_floatnum_490(self):
		"""Test fma as *floatnum_str_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_intarray_491(self):
		"""Test fma as *floatnum_str_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_intnum_492(self):
		"""Test fma as *floatnum_str_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_bytes_493(self):
		"""Test fma as *floatnum_str_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_str_494(self):
		"""Test fma as *floatnum_str_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_none_495(self):
		"""Test fma as *floatnum_str_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_floatarray_496(self):
		"""Test fma as *intarray_floatarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_floatnum_497(self):
		"""Test fma as *intarray_floatarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_intarray_498(self):
		"""Test fma as *intarray_floatarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_intnum_499(self):
		"""Test fma as *intarray_floatarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_bytes_500(self):
		"""Test fma as *intarray_floatarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_str_501(self):
		"""Test fma as *intarray_floatarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_none_502(self):
		"""Test fma as *intarray_floatarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_floatarray_503(self):
		"""Test fma as *intarray_floatarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_floatnum_504(self):
		"""Test fma as *intarray_floatarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_intarray_505(self):
		"""Test fma as *intarray_floatarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_intnum_506(self):
		"""Test fma as *intarray_floatarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_bytes_507(self):
		"""Test fma as *intarray_floatarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_str_508(self):
		"""Test fma as *intarray_floatarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_none_509(self):
		"""Test fma as *intarray_floatarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_floatarray_510(self):
		"""Test fma as *intarray_floatarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_floatnum_511(self):
		"""Test fma as *intarray_floatarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_intarray_512(self):
		"""Test fma as *intarray_floatarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_intnum_513(self):
		"""Test fma as *intarray_floatarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_bytes_514(self):
		"""Test fma as *intarray_floatarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_str_515(self):
		"""Test fma as *intarray_floatarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_none_516(self):
		"""Test fma as *intarray_floatarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_floatarray_517(self):
		"""Test fma as *intarray_floatarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_floatnum_518(self):
		"""Test fma as *intarray_floatarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_intarray_519(self):
		"""Test fma as *intarray_floatarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_intnum_520(self):
		"""Test fma as *intarray_floatarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_bytes_521(self):
		"""Test fma as *intarray_floatarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_str_522(self):
		"""Test fma as *intarray_floatarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_none_523(self):
		"""Test fma as *intarray_floatarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_floatarray_524(self):
		"""Test fma as *intarray_floatarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_floatnum_525(self):
		"""Test fma as *intarray_floatarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_intarray_526(self):
		"""Test fma as *intarray_floatarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_intnum_527(self):
		"""Test fma as *intarray_floatarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_bytes_528(self):
		"""Test fma as *intarray_floatarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_str_529(self):
		"""Test fma as *intarray_floatarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_none_530(self):
		"""Test fma as *intarray_floatarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_floatarray_531(self):
		"""Test fma as *intarray_floatarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_floatnum_532(self):
		"""Test fma as *intarray_floatarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_intarray_533(self):
		"""Test fma as *intarray_floatarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_intnum_534(self):
		"""Test fma as *intarray_floatarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_bytes_535(self):
		"""Test fma as *intarray_floatarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_str_536(self):
		"""Test fma as *intarray_floatarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_none_537(self):
		"""Test fma as *intarray_floatarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_floatarray_538(self):
		"""Test fma as *intarray_floatnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_floatnum_539(self):
		"""Test fma as *intarray_floatnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_intarray_540(self):
		"""Test fma as *intarray_floatnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_intnum_541(self):
		"""Test fma as *intarray_floatnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_bytes_542(self):
		"""Test fma as *intarray_floatnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_str_543(self):
		"""Test fma as *intarray_floatnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_none_544(self):
		"""Test fma as *intarray_floatnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_floatarray_545(self):
		"""Test fma as *intarray_floatnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_floatnum_546(self):
		"""Test fma as *intarray_floatnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_intarray_547(self):
		"""Test fma as *intarray_floatnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_intnum_548(self):
		"""Test fma as *intarray_floatnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_bytes_549(self):
		"""Test fma as *intarray_floatnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_str_550(self):
		"""Test fma as *intarray_floatnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_none_551(self):
		"""Test fma as *intarray_floatnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_floatarray_552(self):
		"""Test fma as *intarray_floatnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_floatnum_553(self):
		"""Test fma as *intarray_floatnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_intarray_554(self):
		"""Test fma as *intarray_floatnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_intnum_555(self):
		"""Test fma as *intarray_floatnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_bytes_556(self):
		"""Test fma as *intarray_floatnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_str_557(self):
		"""Test fma as *intarray_floatnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_none_558(self):
		"""Test fma as *intarray_floatnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_floatarray_559(self):
		"""Test fma as *intarray_floatnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_floatnum_560(self):
		"""Test fma as *intarray_floatnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_intarray_561(self):
		"""Test fma as *intarray_floatnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_intnum_562(self):
		"""Test fma as *intarray_floatnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_bytes_563(self):
		"""Test fma as *intarray_floatnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_str_564(self):
		"""Test fma as *intarray_floatnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_none_565(self):
		"""Test fma as *intarray_floatnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_floatarray_566(self):
		"""Test fma as *intarray_floatnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_floatnum_567(self):
		"""Test fma as *intarray_floatnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_intarray_568(self):
		"""Test fma as *intarray_floatnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_intnum_569(self):
		"""Test fma as *intarray_floatnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_bytes_570(self):
		"""Test fma as *intarray_floatnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_str_571(self):
		"""Test fma as *intarray_floatnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_none_572(self):
		"""Test fma as *intarray_floatnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_floatarray_573(self):
		"""Test fma as *intarray_floatnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_floatnum_574(self):
		"""Test fma as *intarray_floatnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_intarray_575(self):
		"""Test fma as *intarray_floatnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_intnum_576(self):
		"""Test fma as *intarray_floatnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_bytes_577(self):
		"""Test fma as *intarray_floatnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_str_578(self):
		"""Test fma as *intarray_floatnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_none_579(self):
		"""Test fma as *intarray_floatnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_floatarray_580(self):
		"""Test fma as *intarray_intarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_floatnum_581(self):
		"""Test fma as *intarray_intarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_intarray_582(self):
		"""Test fma as *intarray_intarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_intnum_583(self):
		"""Test fma as *intarray_intarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_bytes_584(self):
		"""Test fma as *intarray_intarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_str_585(self):
		"""Test fma as *intarray_intarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_none_586(self):
		"""Test fma as *intarray_intarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_floatarray_587(self):
		"""Test fma as *intarray_intarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_floatnum_588(self):
		"""Test fma as *intarray_intarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_intarray_589(self):
		"""Test fma as *intarray_intarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_intnum_590(self):
		"""Test fma as *intarray_intarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_bytes_591(self):
		"""Test fma as *intarray_intarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_str_592(self):
		"""Test fma as *intarray_intarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_none_593(self):
		"""Test fma as *intarray_intarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_floatarray_594(self):
		"""Test fma as *intarray_intarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_floatnum_595(self):
		"""Test fma as *intarray_intarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_intarray_596(self):
		"""Test fma as *intarray_intarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_intnum_597(self):
		"""Test fma as *intarray_intarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_bytes_598(self):
		"""Test fma as *intarray_intarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_str_599(self):
		"""Test fma as *intarray_intarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_none_600(self):
		"""Test fma as *intarray_intarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_floatarray_601(self):
		"""Test fma as *intarray_intarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_floatnum_602(self):
		"""Test fma as *intarray_intarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_intarray_603(self):
		"""Test fma as *intarray_intarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_intnum_604(self):
		"""Test fma as *intarray_intarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_bytes_605(self):
		"""Test fma as *intarray_intarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_str_606(self):
		"""Test fma as *intarray_intarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_none_607(self):
		"""Test fma as *intarray_intarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_floatarray_608(self):
		"""Test fma as *intarray_intarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_floatnum_609(self):
		"""Test fma as *intarray_intarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_intarray_610(self):
		"""Test fma as *intarray_intarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_intnum_611(self):
		"""Test fma as *intarray_intarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_bytes_612(self):
		"""Test fma as *intarray_intarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_str_613(self):
		"""Test fma as *intarray_intarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_none_614(self):
		"""Test fma as *intarray_intarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_floatarray_615(self):
		"""Test fma as *intarray_intarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_floatnum_616(self):
		"""Test fma as *intarray_intarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_intarray_617(self):
		"""Test fma as *intarray_intarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_intnum_618(self):
		"""Test fma as *intarray_intarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_bytes_619(self):
		"""Test fma as *intarray_intarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_str_620(self):
		"""Test fma as *intarray_intarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_none_621(self):
		"""Test fma as *intarray_intarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_floatarray_622(self):
		"""Test fma as *intarray_intnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_floatnum_623(self):
		"""Test fma as *intarray_intnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_intarray_624(self):
		"""Test fma as *intarray_intnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_intnum_625(self):
		"""Test fma as *intarray_intnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_bytes_626(self):
		"""Test fma as *intarray_intnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_str_627(self):
		"""Test fma as *intarray_intnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_none_628(self):
		"""Test fma as *intarray_intnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_floatarray_629(self):
		"""Test fma as *intarray_intnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_floatnum_630(self):
		"""Test fma as *intarray_intnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_intarray_631(self):
		"""Test fma as *intarray_intnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_intnum_632(self):
		"""Test fma as *intarray_intnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_bytes_633(self):
		"""Test fma as *intarray_intnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_str_634(self):
		"""Test fma as *intarray_intnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_none_635(self):
		"""Test fma as *intarray_intnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_floatarray_636(self):
		"""Test fma as *intarray_intnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_floatnum_637(self):
		"""Test fma as *intarray_intnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_intarray_638(self):
		"""Test fma as *intarray_intnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_intnum_639(self):
		"""Test fma as *intarray_intnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_bytes_640(self):
		"""Test fma as *intarray_intnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_str_641(self):
		"""Test fma as *intarray_intnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_none_642(self):
		"""Test fma as *intarray_intnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_floatarray_643(self):
		"""Test fma as *intarray_intnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_floatnum_644(self):
		"""Test fma as *intarray_intnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_intarray_645(self):
		"""Test fma as *intarray_intnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_intnum_646(self):
		"""Test fma as *intarray_intnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_bytes_647(self):
		"""Test fma as *intarray_intnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_str_648(self):
		"""Test fma as *intarray_intnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_none_649(self):
		"""Test fma as *intarray_intnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_floatarray_650(self):
		"""Test fma as *intarray_intnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_floatnum_651(self):
		"""Test fma as *intarray_intnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_intarray_652(self):
		"""Test fma as *intarray_intnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_intnum_653(self):
		"""Test fma as *intarray_intnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_bytes_654(self):
		"""Test fma as *intarray_intnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_str_655(self):
		"""Test fma as *intarray_intnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_none_656(self):
		"""Test fma as *intarray_intnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_floatarray_657(self):
		"""Test fma as *intarray_intnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_floatnum_658(self):
		"""Test fma as *intarray_intnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_intarray_659(self):
		"""Test fma as *intarray_intnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_intnum_660(self):
		"""Test fma as *intarray_intnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_bytes_661(self):
		"""Test fma as *intarray_intnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_str_662(self):
		"""Test fma as *intarray_intnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_none_663(self):
		"""Test fma as *intarray_intnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_floatarray_664(self):
		"""Test fma as *intarray_bytes_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_floatnum_665(self):
		"""Test fma as *intarray_bytes_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_intarray_666(self):
		"""Test fma as *intarray_bytes_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_intnum_667(self):
		"""Test fma as *intarray_bytes_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_bytes_668(self):
		"""Test fma as *intarray_bytes_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_str_669(self):
		"""Test fma as *intarray_bytes_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_none_670(self):
		"""Test fma as *intarray_bytes_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_floatarray_671(self):
		"""Test fma as *intarray_bytes_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_floatnum_672(self):
		"""Test fma as *intarray_bytes_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_intarray_673(self):
		"""Test fma as *intarray_bytes_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_intnum_674(self):
		"""Test fma as *intarray_bytes_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_bytes_675(self):
		"""Test fma as *intarray_bytes_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_str_676(self):
		"""Test fma as *intarray_bytes_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_none_677(self):
		"""Test fma as *intarray_bytes_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_floatarray_678(self):
		"""Test fma as *intarray_bytes_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_floatnum_679(self):
		"""Test fma as *intarray_bytes_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_intarray_680(self):
		"""Test fma as *intarray_bytes_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_intnum_681(self):
		"""Test fma as *intarray_bytes_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_bytes_682(self):
		"""Test fma as *intarray_bytes_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_str_683(self):
		"""Test fma as *intarray_bytes_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_none_684(self):
		"""Test fma as *intarray_bytes_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_floatarray_685(self):
		"""Test fma as *intarray_bytes_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_floatnum_686(self):
		"""Test fma as *intarray_bytes_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_intarray_687(self):
		"""Test fma as *intarray_bytes_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_intnum_688(self):
		"""Test fma as *intarray_bytes_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_bytes_689(self):
		"""Test fma as *intarray_bytes_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_str_690(self):
		"""Test fma as *intarray_bytes_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_none_691(self):
		"""Test fma as *intarray_bytes_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_floatarray_692(self):
		"""Test fma as *intarray_bytes_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_floatnum_693(self):
		"""Test fma as *intarray_bytes_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_intarray_694(self):
		"""Test fma as *intarray_bytes_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_intnum_695(self):
		"""Test fma as *intarray_bytes_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_bytes_696(self):
		"""Test fma as *intarray_bytes_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_str_697(self):
		"""Test fma as *intarray_bytes_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_none_698(self):
		"""Test fma as *intarray_bytes_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_floatarray_699(self):
		"""Test fma as *intarray_bytes_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_floatnum_700(self):
		"""Test fma as *intarray_bytes_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_intarray_701(self):
		"""Test fma as *intarray_bytes_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_intnum_702(self):
		"""Test fma as *intarray_bytes_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_bytes_703(self):
		"""Test fma as *intarray_bytes_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_str_704(self):
		"""Test fma as *intarray_bytes_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_none_705(self):
		"""Test fma as *intarray_bytes_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_floatarray_706(self):
		"""Test fma as *intarray_str_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_floatnum_707(self):
		"""Test fma as *intarray_str_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_intarray_708(self):
		"""Test fma as *intarray_str_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_intnum_709(self):
		"""Test fma as *intarray_str_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_bytes_710(self):
		"""Test fma as *intarray_str_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_str_711(self):
		"""Test fma as *intarray_str_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_none_712(self):
		"""Test fma as *intarray_str_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_floatarray_713(self):
		"""Test fma as *intarray_str_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_floatnum_714(self):
		"""Test fma as *intarray_str_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_intarray_715(self):
		"""Test fma as *intarray_str_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_intnum_716(self):
		"""Test fma as *intarray_str_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_bytes_717(self):
		"""Test fma as *intarray_str_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_str_718(self):
		"""Test fma as *intarray_str_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_none_719(self):
		"""Test fma as *intarray_str_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_floatarray_720(self):
		"""Test fma as *intarray_str_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_floatnum_721(self):
		"""Test fma as *intarray_str_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_intarray_722(self):
		"""Test fma as *intarray_str_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_intnum_723(self):
		"""Test fma as *intarray_str_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_bytes_724(self):
		"""Test fma as *intarray_str_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_str_725(self):
		"""Test fma as *intarray_str_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_none_726(self):
		"""Test fma as *intarray_str_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_floatarray_727(self):
		"""Test fma as *intarray_str_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_floatnum_728(self):
		"""Test fma as *intarray_str_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_intarray_729(self):
		"""Test fma as *intarray_str_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_intnum_730(self):
		"""Test fma as *intarray_str_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_bytes_731(self):
		"""Test fma as *intarray_str_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_str_732(self):
		"""Test fma as *intarray_str_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_none_733(self):
		"""Test fma as *intarray_str_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_floatarray_734(self):
		"""Test fma as *intarray_str_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_floatnum_735(self):
		"""Test fma as *intarray_str_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_intarray_736(self):
		"""Test fma as *intarray_str_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_intnum_737(self):
		"""Test fma as *intarray_str_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_bytes_738(self):
		"""Test fma as *intarray_str_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_str_739(self):
		"""Test fma as *intarray_str_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_none_740(self):
		"""Test fma as *intarray_str_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_str_str_floatarray_741(self):
		"""Test fma as *intarray_str_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_floatnum_742(self):
		"""Test fma as *intarray_str_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_intarray_743(self):
		"""Test fma as *intarray_str_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_intnum_744(self):
		"""Test fma as *intarray_str_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_bytes_745(self):
		"""Test fma as *intarray_str_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_str_746(self):
		"""Test fma as *intarray_str_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_none_747(self):
		"""Test fma as *intarray_str_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_floatarray_748(self):
		"""Test fma as *intnum_floatarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_floatnum_749(self):
		"""Test fma as *intnum_floatarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_intarray_750(self):
		"""Test fma as *intnum_floatarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_intnum_751(self):
		"""Test fma as *intnum_floatarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_bytes_752(self):
		"""Test fma as *intnum_floatarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_str_753(self):
		"""Test fma as *intnum_floatarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_none_754(self):
		"""Test fma as *intnum_floatarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_floatarray_755(self):
		"""Test fma as *intnum_floatarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_floatnum_756(self):
		"""Test fma as *intnum_floatarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_intarray_757(self):
		"""Test fma as *intnum_floatarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_intnum_758(self):
		"""Test fma as *intnum_floatarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_bytes_759(self):
		"""Test fma as *intnum_floatarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_str_760(self):
		"""Test fma as *intnum_floatarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_none_761(self):
		"""Test fma as *intnum_floatarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_floatarray_762(self):
		"""Test fma as *intnum_floatarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_floatnum_763(self):
		"""Test fma as *intnum_floatarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_intarray_764(self):
		"""Test fma as *intnum_floatarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_intnum_765(self):
		"""Test fma as *intnum_floatarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_bytes_766(self):
		"""Test fma as *intnum_floatarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_str_767(self):
		"""Test fma as *intnum_floatarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_none_768(self):
		"""Test fma as *intnum_floatarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_floatarray_769(self):
		"""Test fma as *intnum_floatarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_floatnum_770(self):
		"""Test fma as *intnum_floatarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_intarray_771(self):
		"""Test fma as *intnum_floatarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_intnum_772(self):
		"""Test fma as *intnum_floatarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_bytes_773(self):
		"""Test fma as *intnum_floatarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_str_774(self):
		"""Test fma as *intnum_floatarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_none_775(self):
		"""Test fma as *intnum_floatarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_floatarray_776(self):
		"""Test fma as *intnum_floatarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_floatnum_777(self):
		"""Test fma as *intnum_floatarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_intarray_778(self):
		"""Test fma as *intnum_floatarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_intnum_779(self):
		"""Test fma as *intnum_floatarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_bytes_780(self):
		"""Test fma as *intnum_floatarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_str_781(self):
		"""Test fma as *intnum_floatarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_none_782(self):
		"""Test fma as *intnum_floatarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_floatarray_783(self):
		"""Test fma as *intnum_floatarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_floatnum_784(self):
		"""Test fma as *intnum_floatarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_intarray_785(self):
		"""Test fma as *intnum_floatarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_intnum_786(self):
		"""Test fma as *intnum_floatarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_bytes_787(self):
		"""Test fma as *intnum_floatarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_str_788(self):
		"""Test fma as *intnum_floatarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_none_789(self):
		"""Test fma as *intnum_floatarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_floatarray_790(self):
		"""Test fma as *intnum_floatnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_floatnum_791(self):
		"""Test fma as *intnum_floatnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_intarray_792(self):
		"""Test fma as *intnum_floatnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_intnum_793(self):
		"""Test fma as *intnum_floatnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_bytes_794(self):
		"""Test fma as *intnum_floatnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_str_795(self):
		"""Test fma as *intnum_floatnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_none_796(self):
		"""Test fma as *intnum_floatnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_floatarray_797(self):
		"""Test fma as *intnum_floatnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_floatnum_798(self):
		"""Test fma as *intnum_floatnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_intarray_799(self):
		"""Test fma as *intnum_floatnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_intnum_800(self):
		"""Test fma as *intnum_floatnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_bytes_801(self):
		"""Test fma as *intnum_floatnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_str_802(self):
		"""Test fma as *intnum_floatnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_none_803(self):
		"""Test fma as *intnum_floatnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_floatarray_804(self):
		"""Test fma as *intnum_floatnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_floatnum_805(self):
		"""Test fma as *intnum_floatnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_intarray_806(self):
		"""Test fma as *intnum_floatnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_intnum_807(self):
		"""Test fma as *intnum_floatnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_bytes_808(self):
		"""Test fma as *intnum_floatnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_str_809(self):
		"""Test fma as *intnum_floatnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_none_810(self):
		"""Test fma as *intnum_floatnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_floatarray_811(self):
		"""Test fma as *intnum_floatnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_floatnum_812(self):
		"""Test fma as *intnum_floatnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_intarray_813(self):
		"""Test fma as *intnum_floatnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_intnum_814(self):
		"""Test fma as *intnum_floatnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_bytes_815(self):
		"""Test fma as *intnum_floatnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_str_816(self):
		"""Test fma as *intnum_floatnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_none_817(self):
		"""Test fma as *intnum_floatnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_floatarray_818(self):
		"""Test fma as *intnum_floatnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_floatnum_819(self):
		"""Test fma as *intnum_floatnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_intarray_820(self):
		"""Test fma as *intnum_floatnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_intnum_821(self):
		"""Test fma as *intnum_floatnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_bytes_822(self):
		"""Test fma as *intnum_floatnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_str_823(self):
		"""Test fma as *intnum_floatnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_none_824(self):
		"""Test fma as *intnum_floatnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_floatarray_825(self):
		"""Test fma as *intnum_floatnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_floatnum_826(self):
		"""Test fma as *intnum_floatnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_intarray_827(self):
		"""Test fma as *intnum_floatnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_intnum_828(self):
		"""Test fma as *intnum_floatnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_bytes_829(self):
		"""Test fma as *intnum_floatnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_str_830(self):
		"""Test fma as *intnum_floatnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_none_831(self):
		"""Test fma as *intnum_floatnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_floatarray_832(self):
		"""Test fma as *intnum_intarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_floatnum_833(self):
		"""Test fma as *intnum_intarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_intarray_834(self):
		"""Test fma as *intnum_intarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_intnum_835(self):
		"""Test fma as *intnum_intarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_bytes_836(self):
		"""Test fma as *intnum_intarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_str_837(self):
		"""Test fma as *intnum_intarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_none_838(self):
		"""Test fma as *intnum_intarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_floatarray_839(self):
		"""Test fma as *intnum_intarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_floatnum_840(self):
		"""Test fma as *intnum_intarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_intarray_841(self):
		"""Test fma as *intnum_intarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_intnum_842(self):
		"""Test fma as *intnum_intarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_bytes_843(self):
		"""Test fma as *intnum_intarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_str_844(self):
		"""Test fma as *intnum_intarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_none_845(self):
		"""Test fma as *intnum_intarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_floatarray_846(self):
		"""Test fma as *intnum_intarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_floatnum_847(self):
		"""Test fma as *intnum_intarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_intarray_848(self):
		"""Test fma as *intnum_intarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_intnum_849(self):
		"""Test fma as *intnum_intarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_bytes_850(self):
		"""Test fma as *intnum_intarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_str_851(self):
		"""Test fma as *intnum_intarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_none_852(self):
		"""Test fma as *intnum_intarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_floatarray_853(self):
		"""Test fma as *intnum_intarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_floatnum_854(self):
		"""Test fma as *intnum_intarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_intarray_855(self):
		"""Test fma as *intnum_intarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_intnum_856(self):
		"""Test fma as *intnum_intarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_bytes_857(self):
		"""Test fma as *intnum_intarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_str_858(self):
		"""Test fma as *intnum_intarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_none_859(self):
		"""Test fma as *intnum_intarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_floatarray_860(self):
		"""Test fma as *intnum_intarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_floatnum_861(self):
		"""Test fma as *intnum_intarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_intarray_862(self):
		"""Test fma as *intnum_intarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_intnum_863(self):
		"""Test fma as *intnum_intarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_bytes_864(self):
		"""Test fma as *intnum_intarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_str_865(self):
		"""Test fma as *intnum_intarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_none_866(self):
		"""Test fma as *intnum_intarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_floatarray_867(self):
		"""Test fma as *intnum_intarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_floatnum_868(self):
		"""Test fma as *intnum_intarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_intarray_869(self):
		"""Test fma as *intnum_intarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_intnum_870(self):
		"""Test fma as *intnum_intarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_bytes_871(self):
		"""Test fma as *intnum_intarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_str_872(self):
		"""Test fma as *intnum_intarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_none_873(self):
		"""Test fma as *intnum_intarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_floatarray_874(self):
		"""Test fma as *intnum_intnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_floatnum_875(self):
		"""Test fma as *intnum_intnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_intarray_876(self):
		"""Test fma as *intnum_intnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_intnum_877(self):
		"""Test fma as *intnum_intnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_bytes_878(self):
		"""Test fma as *intnum_intnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_str_879(self):
		"""Test fma as *intnum_intnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_none_880(self):
		"""Test fma as *intnum_intnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_floatarray_881(self):
		"""Test fma as *intnum_intnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_floatnum_882(self):
		"""Test fma as *intnum_intnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_intarray_883(self):
		"""Test fma as *intnum_intnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_intnum_884(self):
		"""Test fma as *intnum_intnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_bytes_885(self):
		"""Test fma as *intnum_intnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_str_886(self):
		"""Test fma as *intnum_intnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_none_887(self):
		"""Test fma as *intnum_intnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_floatarray_888(self):
		"""Test fma as *intnum_intnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_floatnum_889(self):
		"""Test fma as *intnum_intnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_intarray_890(self):
		"""Test fma as *intnum_intnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_intnum_891(self):
		"""Test fma as *intnum_intnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_bytes_892(self):
		"""Test fma as *intnum_intnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_str_893(self):
		"""Test fma as *intnum_intnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_none_894(self):
		"""Test fma as *intnum_intnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_floatarray_895(self):
		"""Test fma as *intnum_intnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_floatnum_896(self):
		"""Test fma as *intnum_intnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_intarray_897(self):
		"""Test fma as *intnum_intnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_intnum_898(self):
		"""Test fma as *intnum_intnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_bytes_899(self):
		"""Test fma as *intnum_intnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_str_900(self):
		"""Test fma as *intnum_intnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_none_901(self):
		"""Test fma as *intnum_intnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_floatarray_902(self):
		"""Test fma as *intnum_intnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_floatnum_903(self):
		"""Test fma as *intnum_intnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_intarray_904(self):
		"""Test fma as *intnum_intnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_intnum_905(self):
		"""Test fma as *intnum_intnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_bytes_906(self):
		"""Test fma as *intnum_intnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_str_907(self):
		"""Test fma as *intnum_intnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_none_908(self):
		"""Test fma as *intnum_intnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_floatarray_909(self):
		"""Test fma as *intnum_intnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_floatnum_910(self):
		"""Test fma as *intnum_intnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_intarray_911(self):
		"""Test fma as *intnum_intnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_intnum_912(self):
		"""Test fma as *intnum_intnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_bytes_913(self):
		"""Test fma as *intnum_intnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_str_914(self):
		"""Test fma as *intnum_intnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_none_915(self):
		"""Test fma as *intnum_intnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_floatarray_916(self):
		"""Test fma as *intnum_bytes_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_floatnum_917(self):
		"""Test fma as *intnum_bytes_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_intarray_918(self):
		"""Test fma as *intnum_bytes_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_intnum_919(self):
		"""Test fma as *intnum_bytes_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_bytes_920(self):
		"""Test fma as *intnum_bytes_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_str_921(self):
		"""Test fma as *intnum_bytes_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_none_922(self):
		"""Test fma as *intnum_bytes_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_floatarray_923(self):
		"""Test fma as *intnum_bytes_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_floatnum_924(self):
		"""Test fma as *intnum_bytes_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_intarray_925(self):
		"""Test fma as *intnum_bytes_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_intnum_926(self):
		"""Test fma as *intnum_bytes_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_bytes_927(self):
		"""Test fma as *intnum_bytes_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_str_928(self):
		"""Test fma as *intnum_bytes_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_none_929(self):
		"""Test fma as *intnum_bytes_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_floatarray_930(self):
		"""Test fma as *intnum_bytes_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_floatnum_931(self):
		"""Test fma as *intnum_bytes_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_intarray_932(self):
		"""Test fma as *intnum_bytes_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_intnum_933(self):
		"""Test fma as *intnum_bytes_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_bytes_934(self):
		"""Test fma as *intnum_bytes_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_str_935(self):
		"""Test fma as *intnum_bytes_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_none_936(self):
		"""Test fma as *intnum_bytes_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_floatarray_937(self):
		"""Test fma as *intnum_bytes_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_floatnum_938(self):
		"""Test fma as *intnum_bytes_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_intarray_939(self):
		"""Test fma as *intnum_bytes_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_intnum_940(self):
		"""Test fma as *intnum_bytes_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_bytes_941(self):
		"""Test fma as *intnum_bytes_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_str_942(self):
		"""Test fma as *intnum_bytes_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_none_943(self):
		"""Test fma as *intnum_bytes_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_floatarray_944(self):
		"""Test fma as *intnum_bytes_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_floatnum_945(self):
		"""Test fma as *intnum_bytes_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_intarray_946(self):
		"""Test fma as *intnum_bytes_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_intnum_947(self):
		"""Test fma as *intnum_bytes_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_bytes_948(self):
		"""Test fma as *intnum_bytes_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_str_949(self):
		"""Test fma as *intnum_bytes_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_none_950(self):
		"""Test fma as *intnum_bytes_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_floatarray_951(self):
		"""Test fma as *intnum_bytes_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_floatnum_952(self):
		"""Test fma as *intnum_bytes_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_intarray_953(self):
		"""Test fma as *intnum_bytes_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_intnum_954(self):
		"""Test fma as *intnum_bytes_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_bytes_955(self):
		"""Test fma as *intnum_bytes_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_str_956(self):
		"""Test fma as *intnum_bytes_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_none_957(self):
		"""Test fma as *intnum_bytes_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_floatarray_958(self):
		"""Test fma as *intnum_str_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_floatnum_959(self):
		"""Test fma as *intnum_str_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_intarray_960(self):
		"""Test fma as *intnum_str_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_intnum_961(self):
		"""Test fma as *intnum_str_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_bytes_962(self):
		"""Test fma as *intnum_str_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_str_963(self):
		"""Test fma as *intnum_str_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_none_964(self):
		"""Test fma as *intnum_str_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_floatarray_965(self):
		"""Test fma as *intnum_str_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_floatnum_966(self):
		"""Test fma as *intnum_str_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_intarray_967(self):
		"""Test fma as *intnum_str_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_intnum_968(self):
		"""Test fma as *intnum_str_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_bytes_969(self):
		"""Test fma as *intnum_str_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_str_970(self):
		"""Test fma as *intnum_str_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_none_971(self):
		"""Test fma as *intnum_str_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_floatarray_972(self):
		"""Test fma as *intnum_str_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_floatnum_973(self):
		"""Test fma as *intnum_str_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_intarray_974(self):
		"""Test fma as *intnum_str_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_intnum_975(self):
		"""Test fma as *intnum_str_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_bytes_976(self):
		"""Test fma as *intnum_str_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_str_977(self):
		"""Test fma as *intnum_str_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_none_978(self):
		"""Test fma as *intnum_str_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_floatarray_979(self):
		"""Test fma as *intnum_str_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_floatnum_980(self):
		"""Test fma as *intnum_str_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_intarray_981(self):
		"""Test fma as *intnum_str_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_intnum_982(self):
		"""Test fma as *intnum_str_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_bytes_983(self):
		"""Test fma as *intnum_str_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_str_984(self):
		"""Test fma as *intnum_str_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_none_985(self):
		"""Test fma as *intnum_str_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_floatarray_986(self):
		"""Test fma as *intnum_str_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_floatnum_987(self):
		"""Test fma as *intnum_str_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_intarray_988(self):
		"""Test fma as *intnum_str_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_intnum_989(self):
		"""Test fma as *intnum_str_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_bytes_990(self):
		"""Test fma as *intnum_str_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_str_991(self):
		"""Test fma as *intnum_str_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_none_992(self):
		"""Test fma as *intnum_str_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_str_str_floatarray_993(self):
		"""Test fma as *intnum_str_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_floatnum_994(self):
		"""Test fma as *intnum_str_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_intarray_995(self):
		"""Test fma as *intnum_str_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_intnum_996(self):
		"""Test fma as *intnum_str_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_bytes_997(self):
		"""Test fma as *intnum_str_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_str_998(self):
		"""Test fma as *intnum_str_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_none_999(self):
		"""Test fma as *intnum_str_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_floatarray_1000(self):
		"""Test fma as *bytes_floatarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_floatnum_1001(self):
		"""Test fma as *bytes_floatarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_intarray_1002(self):
		"""Test fma as *bytes_floatarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_intnum_1003(self):
		"""Test fma as *bytes_floatarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_bytes_1004(self):
		"""Test fma as *bytes_floatarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_str_1005(self):
		"""Test fma as *bytes_floatarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_none_1006(self):
		"""Test fma as *bytes_floatarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_floatarray_1007(self):
		"""Test fma as *bytes_floatarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_floatnum_1008(self):
		"""Test fma as *bytes_floatarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_intarray_1009(self):
		"""Test fma as *bytes_floatarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_intnum_1010(self):
		"""Test fma as *bytes_floatarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_bytes_1011(self):
		"""Test fma as *bytes_floatarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_str_1012(self):
		"""Test fma as *bytes_floatarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_none_1013(self):
		"""Test fma as *bytes_floatarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_floatarray_1014(self):
		"""Test fma as *bytes_floatarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_floatnum_1015(self):
		"""Test fma as *bytes_floatarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_intarray_1016(self):
		"""Test fma as *bytes_floatarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_intnum_1017(self):
		"""Test fma as *bytes_floatarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_bytes_1018(self):
		"""Test fma as *bytes_floatarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_str_1019(self):
		"""Test fma as *bytes_floatarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_none_1020(self):
		"""Test fma as *bytes_floatarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_floatarray_1021(self):
		"""Test fma as *bytes_floatarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_floatnum_1022(self):
		"""Test fma as *bytes_floatarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_intarray_1023(self):
		"""Test fma as *bytes_floatarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_intnum_1024(self):
		"""Test fma as *bytes_floatarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_bytes_1025(self):
		"""Test fma as *bytes_floatarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_str_1026(self):
		"""Test fma as *bytes_floatarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_none_1027(self):
		"""Test fma as *bytes_floatarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_floatarray_1028(self):
		"""Test fma as *bytes_floatarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_floatnum_1029(self):
		"""Test fma as *bytes_floatarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_intarray_1030(self):
		"""Test fma as *bytes_floatarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_intnum_1031(self):
		"""Test fma as *bytes_floatarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_bytes_1032(self):
		"""Test fma as *bytes_floatarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_str_1033(self):
		"""Test fma as *bytes_floatarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_none_1034(self):
		"""Test fma as *bytes_floatarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_floatarray_1035(self):
		"""Test fma as *bytes_floatarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_floatnum_1036(self):
		"""Test fma as *bytes_floatarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_intarray_1037(self):
		"""Test fma as *bytes_floatarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_intnum_1038(self):
		"""Test fma as *bytes_floatarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_bytes_1039(self):
		"""Test fma as *bytes_floatarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_str_1040(self):
		"""Test fma as *bytes_floatarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_none_1041(self):
		"""Test fma as *bytes_floatarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_floatarray_1042(self):
		"""Test fma as *bytes_floatnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_floatnum_1043(self):
		"""Test fma as *bytes_floatnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_intarray_1044(self):
		"""Test fma as *bytes_floatnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_intnum_1045(self):
		"""Test fma as *bytes_floatnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_bytes_1046(self):
		"""Test fma as *bytes_floatnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_str_1047(self):
		"""Test fma as *bytes_floatnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_none_1048(self):
		"""Test fma as *bytes_floatnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_floatarray_1049(self):
		"""Test fma as *bytes_floatnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_floatnum_1050(self):
		"""Test fma as *bytes_floatnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_intarray_1051(self):
		"""Test fma as *bytes_floatnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_intnum_1052(self):
		"""Test fma as *bytes_floatnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_bytes_1053(self):
		"""Test fma as *bytes_floatnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_str_1054(self):
		"""Test fma as *bytes_floatnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_none_1055(self):
		"""Test fma as *bytes_floatnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_floatarray_1056(self):
		"""Test fma as *bytes_floatnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_floatnum_1057(self):
		"""Test fma as *bytes_floatnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_intarray_1058(self):
		"""Test fma as *bytes_floatnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_intnum_1059(self):
		"""Test fma as *bytes_floatnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_bytes_1060(self):
		"""Test fma as *bytes_floatnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_str_1061(self):
		"""Test fma as *bytes_floatnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_none_1062(self):
		"""Test fma as *bytes_floatnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_floatarray_1063(self):
		"""Test fma as *bytes_floatnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_floatnum_1064(self):
		"""Test fma as *bytes_floatnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_intarray_1065(self):
		"""Test fma as *bytes_floatnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_intnum_1066(self):
		"""Test fma as *bytes_floatnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_bytes_1067(self):
		"""Test fma as *bytes_floatnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_str_1068(self):
		"""Test fma as *bytes_floatnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_none_1069(self):
		"""Test fma as *bytes_floatnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_floatarray_1070(self):
		"""Test fma as *bytes_floatnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_floatnum_1071(self):
		"""Test fma as *bytes_floatnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_intarray_1072(self):
		"""Test fma as *bytes_floatnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_intnum_1073(self):
		"""Test fma as *bytes_floatnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_bytes_1074(self):
		"""Test fma as *bytes_floatnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_str_1075(self):
		"""Test fma as *bytes_floatnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_none_1076(self):
		"""Test fma as *bytes_floatnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_floatarray_1077(self):
		"""Test fma as *bytes_floatnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_floatnum_1078(self):
		"""Test fma as *bytes_floatnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_intarray_1079(self):
		"""Test fma as *bytes_floatnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_intnum_1080(self):
		"""Test fma as *bytes_floatnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_bytes_1081(self):
		"""Test fma as *bytes_floatnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_str_1082(self):
		"""Test fma as *bytes_floatnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_none_1083(self):
		"""Test fma as *bytes_floatnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_floatarray_1084(self):
		"""Test fma as *bytes_intarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_floatnum_1085(self):
		"""Test fma as *bytes_intarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_intarray_1086(self):
		"""Test fma as *bytes_intarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_intnum_1087(self):
		"""Test fma as *bytes_intarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_bytes_1088(self):
		"""Test fma as *bytes_intarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_str_1089(self):
		"""Test fma as *bytes_intarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_none_1090(self):
		"""Test fma as *bytes_intarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_floatarray_1091(self):
		"""Test fma as *bytes_intarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_floatnum_1092(self):
		"""Test fma as *bytes_intarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_intarray_1093(self):
		"""Test fma as *bytes_intarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_intnum_1094(self):
		"""Test fma as *bytes_intarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_bytes_1095(self):
		"""Test fma as *bytes_intarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_str_1096(self):
		"""Test fma as *bytes_intarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_none_1097(self):
		"""Test fma as *bytes_intarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_floatarray_1098(self):
		"""Test fma as *bytes_intarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_floatnum_1099(self):
		"""Test fma as *bytes_intarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_intarray_1100(self):
		"""Test fma as *bytes_intarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_intnum_1101(self):
		"""Test fma as *bytes_intarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_bytes_1102(self):
		"""Test fma as *bytes_intarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_str_1103(self):
		"""Test fma as *bytes_intarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_none_1104(self):
		"""Test fma as *bytes_intarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_floatarray_1105(self):
		"""Test fma as *bytes_intarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_floatnum_1106(self):
		"""Test fma as *bytes_intarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_intarray_1107(self):
		"""Test fma as *bytes_intarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_intnum_1108(self):
		"""Test fma as *bytes_intarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_bytes_1109(self):
		"""Test fma as *bytes_intarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_str_1110(self):
		"""Test fma as *bytes_intarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_none_1111(self):
		"""Test fma as *bytes_intarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_floatarray_1112(self):
		"""Test fma as *bytes_intarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_floatnum_1113(self):
		"""Test fma as *bytes_intarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_intarray_1114(self):
		"""Test fma as *bytes_intarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_intnum_1115(self):
		"""Test fma as *bytes_intarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_bytes_1116(self):
		"""Test fma as *bytes_intarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_str_1117(self):
		"""Test fma as *bytes_intarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_none_1118(self):
		"""Test fma as *bytes_intarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_floatarray_1119(self):
		"""Test fma as *bytes_intarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_floatnum_1120(self):
		"""Test fma as *bytes_intarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_intarray_1121(self):
		"""Test fma as *bytes_intarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_intnum_1122(self):
		"""Test fma as *bytes_intarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_bytes_1123(self):
		"""Test fma as *bytes_intarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_str_1124(self):
		"""Test fma as *bytes_intarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_none_1125(self):
		"""Test fma as *bytes_intarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_floatarray_1126(self):
		"""Test fma as *bytes_intnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_floatnum_1127(self):
		"""Test fma as *bytes_intnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_intarray_1128(self):
		"""Test fma as *bytes_intnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_intnum_1129(self):
		"""Test fma as *bytes_intnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_bytes_1130(self):
		"""Test fma as *bytes_intnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_str_1131(self):
		"""Test fma as *bytes_intnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_none_1132(self):
		"""Test fma as *bytes_intnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_floatarray_1133(self):
		"""Test fma as *bytes_intnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_floatnum_1134(self):
		"""Test fma as *bytes_intnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_intarray_1135(self):
		"""Test fma as *bytes_intnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_intnum_1136(self):
		"""Test fma as *bytes_intnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_bytes_1137(self):
		"""Test fma as *bytes_intnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_str_1138(self):
		"""Test fma as *bytes_intnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_none_1139(self):
		"""Test fma as *bytes_intnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_floatarray_1140(self):
		"""Test fma as *bytes_intnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_floatnum_1141(self):
		"""Test fma as *bytes_intnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_intarray_1142(self):
		"""Test fma as *bytes_intnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_intnum_1143(self):
		"""Test fma as *bytes_intnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_bytes_1144(self):
		"""Test fma as *bytes_intnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_str_1145(self):
		"""Test fma as *bytes_intnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_none_1146(self):
		"""Test fma as *bytes_intnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_floatarray_1147(self):
		"""Test fma as *bytes_intnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_floatnum_1148(self):
		"""Test fma as *bytes_intnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_intarray_1149(self):
		"""Test fma as *bytes_intnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_intnum_1150(self):
		"""Test fma as *bytes_intnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_bytes_1151(self):
		"""Test fma as *bytes_intnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_str_1152(self):
		"""Test fma as *bytes_intnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_none_1153(self):
		"""Test fma as *bytes_intnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_floatarray_1154(self):
		"""Test fma as *bytes_intnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_floatnum_1155(self):
		"""Test fma as *bytes_intnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_intarray_1156(self):
		"""Test fma as *bytes_intnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_intnum_1157(self):
		"""Test fma as *bytes_intnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_bytes_1158(self):
		"""Test fma as *bytes_intnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_str_1159(self):
		"""Test fma as *bytes_intnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_none_1160(self):
		"""Test fma as *bytes_intnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_floatarray_1161(self):
		"""Test fma as *bytes_intnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_floatnum_1162(self):
		"""Test fma as *bytes_intnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_intarray_1163(self):
		"""Test fma as *bytes_intnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_intnum_1164(self):
		"""Test fma as *bytes_intnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_bytes_1165(self):
		"""Test fma as *bytes_intnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_str_1166(self):
		"""Test fma as *bytes_intnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_none_1167(self):
		"""Test fma as *bytes_intnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_floatarray_1168(self):
		"""Test fma as *bytes_bytes_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_floatnum_1169(self):
		"""Test fma as *bytes_bytes_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_intarray_1170(self):
		"""Test fma as *bytes_bytes_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_intnum_1171(self):
		"""Test fma as *bytes_bytes_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_bytes_1172(self):
		"""Test fma as *bytes_bytes_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_str_1173(self):
		"""Test fma as *bytes_bytes_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_none_1174(self):
		"""Test fma as *bytes_bytes_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_floatarray_1175(self):
		"""Test fma as *bytes_bytes_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_floatnum_1176(self):
		"""Test fma as *bytes_bytes_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_intarray_1177(self):
		"""Test fma as *bytes_bytes_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_intnum_1178(self):
		"""Test fma as *bytes_bytes_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_bytes_1179(self):
		"""Test fma as *bytes_bytes_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_str_1180(self):
		"""Test fma as *bytes_bytes_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_none_1181(self):
		"""Test fma as *bytes_bytes_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_floatarray_1182(self):
		"""Test fma as *bytes_bytes_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_floatnum_1183(self):
		"""Test fma as *bytes_bytes_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_intarray_1184(self):
		"""Test fma as *bytes_bytes_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_intnum_1185(self):
		"""Test fma as *bytes_bytes_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_bytes_1186(self):
		"""Test fma as *bytes_bytes_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_str_1187(self):
		"""Test fma as *bytes_bytes_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_none_1188(self):
		"""Test fma as *bytes_bytes_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_floatarray_1189(self):
		"""Test fma as *bytes_bytes_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_floatnum_1190(self):
		"""Test fma as *bytes_bytes_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_intarray_1191(self):
		"""Test fma as *bytes_bytes_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_intnum_1192(self):
		"""Test fma as *bytes_bytes_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_bytes_1193(self):
		"""Test fma as *bytes_bytes_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_str_1194(self):
		"""Test fma as *bytes_bytes_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_none_1195(self):
		"""Test fma as *bytes_bytes_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_floatarray_1196(self):
		"""Test fma as *bytes_bytes_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_floatnum_1197(self):
		"""Test fma as *bytes_bytes_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_intarray_1198(self):
		"""Test fma as *bytes_bytes_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_intnum_1199(self):
		"""Test fma as *bytes_bytes_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_bytes_1200(self):
		"""Test fma as *bytes_bytes_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_str_1201(self):
		"""Test fma as *bytes_bytes_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_none_1202(self):
		"""Test fma as *bytes_bytes_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_floatarray_1203(self):
		"""Test fma as *bytes_bytes_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_floatnum_1204(self):
		"""Test fma as *bytes_bytes_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_intarray_1205(self):
		"""Test fma as *bytes_bytes_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_intnum_1206(self):
		"""Test fma as *bytes_bytes_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_bytes_1207(self):
		"""Test fma as *bytes_bytes_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_str_1208(self):
		"""Test fma as *bytes_bytes_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_none_1209(self):
		"""Test fma as *bytes_bytes_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_floatarray_1210(self):
		"""Test fma as *bytes_str_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_floatnum_1211(self):
		"""Test fma as *bytes_str_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_intarray_1212(self):
		"""Test fma as *bytes_str_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_intnum_1213(self):
		"""Test fma as *bytes_str_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_bytes_1214(self):
		"""Test fma as *bytes_str_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_str_1215(self):
		"""Test fma as *bytes_str_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_none_1216(self):
		"""Test fma as *bytes_str_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_floatarray_1217(self):
		"""Test fma as *bytes_str_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_floatnum_1218(self):
		"""Test fma as *bytes_str_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_intarray_1219(self):
		"""Test fma as *bytes_str_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_intnum_1220(self):
		"""Test fma as *bytes_str_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_bytes_1221(self):
		"""Test fma as *bytes_str_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_str_1222(self):
		"""Test fma as *bytes_str_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_none_1223(self):
		"""Test fma as *bytes_str_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_floatarray_1224(self):
		"""Test fma as *bytes_str_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_floatnum_1225(self):
		"""Test fma as *bytes_str_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_intarray_1226(self):
		"""Test fma as *bytes_str_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_intnum_1227(self):
		"""Test fma as *bytes_str_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_bytes_1228(self):
		"""Test fma as *bytes_str_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_str_1229(self):
		"""Test fma as *bytes_str_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_none_1230(self):
		"""Test fma as *bytes_str_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_floatarray_1231(self):
		"""Test fma as *bytes_str_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_floatnum_1232(self):
		"""Test fma as *bytes_str_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_intarray_1233(self):
		"""Test fma as *bytes_str_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_intnum_1234(self):
		"""Test fma as *bytes_str_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_bytes_1235(self):
		"""Test fma as *bytes_str_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_str_1236(self):
		"""Test fma as *bytes_str_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_none_1237(self):
		"""Test fma as *bytes_str_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_floatarray_1238(self):
		"""Test fma as *bytes_str_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_floatnum_1239(self):
		"""Test fma as *bytes_str_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_intarray_1240(self):
		"""Test fma as *bytes_str_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_intnum_1241(self):
		"""Test fma as *bytes_str_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_bytes_1242(self):
		"""Test fma as *bytes_str_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_str_1243(self):
		"""Test fma as *bytes_str_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_none_1244(self):
		"""Test fma as *bytes_str_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_str_str_floatarray_1245(self):
		"""Test fma as *bytes_str_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_floatnum_1246(self):
		"""Test fma as *bytes_str_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_intarray_1247(self):
		"""Test fma as *bytes_str_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_intnum_1248(self):
		"""Test fma as *bytes_str_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_bytes_1249(self):
		"""Test fma as *bytes_str_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_str_1250(self):
		"""Test fma as *bytes_str_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_none_1251(self):
		"""Test fma as *bytes_str_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_floatarray_1252(self):
		"""Test fma as *str_floatarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_floatnum_1253(self):
		"""Test fma as *str_floatarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_intarray_1254(self):
		"""Test fma as *str_floatarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_intnum_1255(self):
		"""Test fma as *str_floatarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_bytes_1256(self):
		"""Test fma as *str_floatarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_str_1257(self):
		"""Test fma as *str_floatarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_none_1258(self):
		"""Test fma as *str_floatarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_floatarray_1259(self):
		"""Test fma as *str_floatarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_floatnum_1260(self):
		"""Test fma as *str_floatarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_intarray_1261(self):
		"""Test fma as *str_floatarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_intnum_1262(self):
		"""Test fma as *str_floatarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_bytes_1263(self):
		"""Test fma as *str_floatarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_str_1264(self):
		"""Test fma as *str_floatarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_none_1265(self):
		"""Test fma as *str_floatarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_floatarray_1266(self):
		"""Test fma as *str_floatarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_floatnum_1267(self):
		"""Test fma as *str_floatarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_intarray_1268(self):
		"""Test fma as *str_floatarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_intnum_1269(self):
		"""Test fma as *str_floatarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_bytes_1270(self):
		"""Test fma as *str_floatarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_str_1271(self):
		"""Test fma as *str_floatarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_none_1272(self):
		"""Test fma as *str_floatarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_floatarray_1273(self):
		"""Test fma as *str_floatarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_floatnum_1274(self):
		"""Test fma as *str_floatarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_intarray_1275(self):
		"""Test fma as *str_floatarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_intnum_1276(self):
		"""Test fma as *str_floatarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_bytes_1277(self):
		"""Test fma as *str_floatarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_str_1278(self):
		"""Test fma as *str_floatarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_none_1279(self):
		"""Test fma as *str_floatarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_floatarray_1280(self):
		"""Test fma as *str_floatarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_floatnum_1281(self):
		"""Test fma as *str_floatarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_intarray_1282(self):
		"""Test fma as *str_floatarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_intnum_1283(self):
		"""Test fma as *str_floatarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_bytes_1284(self):
		"""Test fma as *str_floatarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_str_1285(self):
		"""Test fma as *str_floatarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_none_1286(self):
		"""Test fma as *str_floatarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_floatarray_1287(self):
		"""Test fma as *str_floatarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_floatnum_1288(self):
		"""Test fma as *str_floatarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_intarray_1289(self):
		"""Test fma as *str_floatarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_intnum_1290(self):
		"""Test fma as *str_floatarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_bytes_1291(self):
		"""Test fma as *str_floatarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_str_1292(self):
		"""Test fma as *str_floatarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_none_1293(self):
		"""Test fma as *str_floatarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_floatarray_1294(self):
		"""Test fma as *str_floatnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_floatnum_1295(self):
		"""Test fma as *str_floatnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_intarray_1296(self):
		"""Test fma as *str_floatnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_intnum_1297(self):
		"""Test fma as *str_floatnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_bytes_1298(self):
		"""Test fma as *str_floatnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_str_1299(self):
		"""Test fma as *str_floatnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_none_1300(self):
		"""Test fma as *str_floatnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_floatarray_1301(self):
		"""Test fma as *str_floatnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_floatnum_1302(self):
		"""Test fma as *str_floatnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_intarray_1303(self):
		"""Test fma as *str_floatnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_intnum_1304(self):
		"""Test fma as *str_floatnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_bytes_1305(self):
		"""Test fma as *str_floatnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_str_1306(self):
		"""Test fma as *str_floatnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_none_1307(self):
		"""Test fma as *str_floatnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_floatarray_1308(self):
		"""Test fma as *str_floatnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_floatnum_1309(self):
		"""Test fma as *str_floatnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_intarray_1310(self):
		"""Test fma as *str_floatnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_intnum_1311(self):
		"""Test fma as *str_floatnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_bytes_1312(self):
		"""Test fma as *str_floatnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_str_1313(self):
		"""Test fma as *str_floatnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_none_1314(self):
		"""Test fma as *str_floatnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_floatarray_1315(self):
		"""Test fma as *str_floatnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_floatnum_1316(self):
		"""Test fma as *str_floatnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_intarray_1317(self):
		"""Test fma as *str_floatnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_intnum_1318(self):
		"""Test fma as *str_floatnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_bytes_1319(self):
		"""Test fma as *str_floatnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_str_1320(self):
		"""Test fma as *str_floatnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_none_1321(self):
		"""Test fma as *str_floatnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_floatarray_1322(self):
		"""Test fma as *str_floatnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_floatnum_1323(self):
		"""Test fma as *str_floatnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_intarray_1324(self):
		"""Test fma as *str_floatnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_intnum_1325(self):
		"""Test fma as *str_floatnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_bytes_1326(self):
		"""Test fma as *str_floatnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_str_1327(self):
		"""Test fma as *str_floatnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_none_1328(self):
		"""Test fma as *str_floatnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_floatarray_1329(self):
		"""Test fma as *str_floatnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_floatnum_1330(self):
		"""Test fma as *str_floatnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_intarray_1331(self):
		"""Test fma as *str_floatnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_intnum_1332(self):
		"""Test fma as *str_floatnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_bytes_1333(self):
		"""Test fma as *str_floatnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_str_1334(self):
		"""Test fma as *str_floatnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_none_1335(self):
		"""Test fma as *str_floatnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_floatarray_1336(self):
		"""Test fma as *str_intarray_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_floatnum_1337(self):
		"""Test fma as *str_intarray_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_intarray_1338(self):
		"""Test fma as *str_intarray_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_intnum_1339(self):
		"""Test fma as *str_intarray_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_bytes_1340(self):
		"""Test fma as *str_intarray_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_str_1341(self):
		"""Test fma as *str_intarray_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_none_1342(self):
		"""Test fma as *str_intarray_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_floatarray_1343(self):
		"""Test fma as *str_intarray_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_floatnum_1344(self):
		"""Test fma as *str_intarray_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_intarray_1345(self):
		"""Test fma as *str_intarray_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_intnum_1346(self):
		"""Test fma as *str_intarray_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_bytes_1347(self):
		"""Test fma as *str_intarray_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_str_1348(self):
		"""Test fma as *str_intarray_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_none_1349(self):
		"""Test fma as *str_intarray_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_floatarray_1350(self):
		"""Test fma as *str_intarray_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_floatnum_1351(self):
		"""Test fma as *str_intarray_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_intarray_1352(self):
		"""Test fma as *str_intarray_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_intnum_1353(self):
		"""Test fma as *str_intarray_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_bytes_1354(self):
		"""Test fma as *str_intarray_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_str_1355(self):
		"""Test fma as *str_intarray_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_none_1356(self):
		"""Test fma as *str_intarray_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_floatarray_1357(self):
		"""Test fma as *str_intarray_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_floatnum_1358(self):
		"""Test fma as *str_intarray_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_intarray_1359(self):
		"""Test fma as *str_intarray_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_intnum_1360(self):
		"""Test fma as *str_intarray_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_bytes_1361(self):
		"""Test fma as *str_intarray_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_str_1362(self):
		"""Test fma as *str_intarray_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_none_1363(self):
		"""Test fma as *str_intarray_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_floatarray_1364(self):
		"""Test fma as *str_intarray_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_floatnum_1365(self):
		"""Test fma as *str_intarray_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_intarray_1366(self):
		"""Test fma as *str_intarray_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_intnum_1367(self):
		"""Test fma as *str_intarray_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_bytes_1368(self):
		"""Test fma as *str_intarray_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_str_1369(self):
		"""Test fma as *str_intarray_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_none_1370(self):
		"""Test fma as *str_intarray_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_intarray_str_floatarray_1371(self):
		"""Test fma as *str_intarray_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_floatnum_1372(self):
		"""Test fma as *str_intarray_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_intarray_1373(self):
		"""Test fma as *str_intarray_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_intnum_1374(self):
		"""Test fma as *str_intarray_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_bytes_1375(self):
		"""Test fma as *str_intarray_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_str_1376(self):
		"""Test fma as *str_intarray_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_none_1377(self):
		"""Test fma as *str_intarray_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_floatarray_1378(self):
		"""Test fma as *str_intnum_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_floatnum_1379(self):
		"""Test fma as *str_intnum_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_intarray_1380(self):
		"""Test fma as *str_intnum_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_intnum_1381(self):
		"""Test fma as *str_intnum_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_bytes_1382(self):
		"""Test fma as *str_intnum_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_str_1383(self):
		"""Test fma as *str_intnum_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_none_1384(self):
		"""Test fma as *str_intnum_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_floatarray_1385(self):
		"""Test fma as *str_intnum_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_floatnum_1386(self):
		"""Test fma as *str_intnum_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_intarray_1387(self):
		"""Test fma as *str_intnum_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_intnum_1388(self):
		"""Test fma as *str_intnum_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_bytes_1389(self):
		"""Test fma as *str_intnum_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_str_1390(self):
		"""Test fma as *str_intnum_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_none_1391(self):
		"""Test fma as *str_intnum_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_floatarray_1392(self):
		"""Test fma as *str_intnum_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_floatnum_1393(self):
		"""Test fma as *str_intnum_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_intarray_1394(self):
		"""Test fma as *str_intnum_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_intnum_1395(self):
		"""Test fma as *str_intnum_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_bytes_1396(self):
		"""Test fma as *str_intnum_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_str_1397(self):
		"""Test fma as *str_intnum_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_none_1398(self):
		"""Test fma as *str_intnum_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_floatarray_1399(self):
		"""Test fma as *str_intnum_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_floatnum_1400(self):
		"""Test fma as *str_intnum_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_intarray_1401(self):
		"""Test fma as *str_intnum_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_intnum_1402(self):
		"""Test fma as *str_intnum_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_bytes_1403(self):
		"""Test fma as *str_intnum_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_str_1404(self):
		"""Test fma as *str_intnum_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_none_1405(self):
		"""Test fma as *str_intnum_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_floatarray_1406(self):
		"""Test fma as *str_intnum_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_floatnum_1407(self):
		"""Test fma as *str_intnum_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_intarray_1408(self):
		"""Test fma as *str_intnum_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_intnum_1409(self):
		"""Test fma as *str_intnum_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_bytes_1410(self):
		"""Test fma as *str_intnum_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_str_1411(self):
		"""Test fma as *str_intnum_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_none_1412(self):
		"""Test fma as *str_intnum_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_intnum_str_floatarray_1413(self):
		"""Test fma as *str_intnum_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_floatnum_1414(self):
		"""Test fma as *str_intnum_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_intarray_1415(self):
		"""Test fma as *str_intnum_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_intnum_1416(self):
		"""Test fma as *str_intnum_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_bytes_1417(self):
		"""Test fma as *str_intnum_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_str_1418(self):
		"""Test fma as *str_intnum_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_none_1419(self):
		"""Test fma as *str_intnum_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_floatarray_1420(self):
		"""Test fma as *str_bytes_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_floatnum_1421(self):
		"""Test fma as *str_bytes_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_intarray_1422(self):
		"""Test fma as *str_bytes_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_intnum_1423(self):
		"""Test fma as *str_bytes_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_bytes_1424(self):
		"""Test fma as *str_bytes_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_str_1425(self):
		"""Test fma as *str_bytes_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_none_1426(self):
		"""Test fma as *str_bytes_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_floatarray_1427(self):
		"""Test fma as *str_bytes_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_floatnum_1428(self):
		"""Test fma as *str_bytes_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_intarray_1429(self):
		"""Test fma as *str_bytes_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_intnum_1430(self):
		"""Test fma as *str_bytes_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_bytes_1431(self):
		"""Test fma as *str_bytes_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_str_1432(self):
		"""Test fma as *str_bytes_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_none_1433(self):
		"""Test fma as *str_bytes_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_floatarray_1434(self):
		"""Test fma as *str_bytes_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_floatnum_1435(self):
		"""Test fma as *str_bytes_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_intarray_1436(self):
		"""Test fma as *str_bytes_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_intnum_1437(self):
		"""Test fma as *str_bytes_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_bytes_1438(self):
		"""Test fma as *str_bytes_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_str_1439(self):
		"""Test fma as *str_bytes_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_none_1440(self):
		"""Test fma as *str_bytes_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_floatarray_1441(self):
		"""Test fma as *str_bytes_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_floatnum_1442(self):
		"""Test fma as *str_bytes_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_intarray_1443(self):
		"""Test fma as *str_bytes_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_intnum_1444(self):
		"""Test fma as *str_bytes_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_bytes_1445(self):
		"""Test fma as *str_bytes_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_str_1446(self):
		"""Test fma as *str_bytes_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_none_1447(self):
		"""Test fma as *str_bytes_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_floatarray_1448(self):
		"""Test fma as *str_bytes_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_floatnum_1449(self):
		"""Test fma as *str_bytes_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_intarray_1450(self):
		"""Test fma as *str_bytes_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_intnum_1451(self):
		"""Test fma as *str_bytes_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_bytes_1452(self):
		"""Test fma as *str_bytes_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_str_1453(self):
		"""Test fma as *str_bytes_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_none_1454(self):
		"""Test fma as *str_bytes_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_bytes_str_floatarray_1455(self):
		"""Test fma as *str_bytes_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_floatnum_1456(self):
		"""Test fma as *str_bytes_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_intarray_1457(self):
		"""Test fma as *str_bytes_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_intnum_1458(self):
		"""Test fma as *str_bytes_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_bytes_1459(self):
		"""Test fma as *str_bytes_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_str_1460(self):
		"""Test fma as *str_bytes_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_none_1461(self):
		"""Test fma as *str_bytes_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_floatarray_1462(self):
		"""Test fma as *str_str_floatarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_floatnum_1463(self):
		"""Test fma as *str_str_floatarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_intarray_1464(self):
		"""Test fma as *str_str_floatarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_intnum_1465(self):
		"""Test fma as *str_str_floatarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_bytes_1466(self):
		"""Test fma as *str_str_floatarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_str_1467(self):
		"""Test fma as *str_str_floatarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_none_1468(self):
		"""Test fma as *str_str_floatarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_floatarray_1469(self):
		"""Test fma as *str_str_floatnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_floatnum_1470(self):
		"""Test fma as *str_str_floatnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_intarray_1471(self):
		"""Test fma as *str_str_floatnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_intnum_1472(self):
		"""Test fma as *str_str_floatnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_bytes_1473(self):
		"""Test fma as *str_str_floatnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_str_1474(self):
		"""Test fma as *str_str_floatnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_none_1475(self):
		"""Test fma as *str_str_floatnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_str_intarray_floatarray_1476(self):
		"""Test fma as *str_str_intarray_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_floatnum_1477(self):
		"""Test fma as *str_str_intarray_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_intarray_1478(self):
		"""Test fma as *str_str_intarray_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_intnum_1479(self):
		"""Test fma as *str_str_intarray_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_bytes_1480(self):
		"""Test fma as *str_str_intarray_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_str_1481(self):
		"""Test fma as *str_str_intarray_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_none_1482(self):
		"""Test fma as *str_str_intarray_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_str_intnum_floatarray_1483(self):
		"""Test fma as *str_str_intnum_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_floatnum_1484(self):
		"""Test fma as *str_str_intnum_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_intarray_1485(self):
		"""Test fma as *str_str_intnum_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_intnum_1486(self):
		"""Test fma as *str_str_intnum_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_bytes_1487(self):
		"""Test fma as *str_str_intnum_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_str_1488(self):
		"""Test fma as *str_str_intnum_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_none_1489(self):
		"""Test fma as *str_str_intnum_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_str_bytes_floatarray_1490(self):
		"""Test fma as *str_str_bytes_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_floatnum_1491(self):
		"""Test fma as *str_str_bytes_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_intarray_1492(self):
		"""Test fma as *str_str_bytes_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_intnum_1493(self):
		"""Test fma as *str_str_bytes_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_bytes_1494(self):
		"""Test fma as *str_str_bytes_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_str_1495(self):
		"""Test fma as *str_str_bytes_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_none_1496(self):
		"""Test fma as *str_str_bytes_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_str_str_floatarray_1497(self):
		"""Test fma as *str_str_str_floatarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_str_floatnum_1498(self):
		"""Test fma as *str_str_str_floatnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_str_intarray_1499(self):
		"""Test fma as *str_str_str_intarray* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_str_intnum_1500(self):
		"""Test fma as *str_str_str_intnum* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_str_bytes_1501(self):
		"""Test fma as *str_str_str_bytes* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_str_str_1502(self):
		"""Test fma as *str_str_str_str* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_str_none_1503(self):
		"""Test fma as *str_str_str_none* for invalid integer array - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz)



##############################################################################



##############################################################################
class fma_param_errors_numbers_f(unittest.TestCase):
	"""Test for invalid parameters.
	param_invalid_options_template
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		xdata = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]
		arraysize =  len(xdata)

		# Floating point test data.
		self.arrayx = array.array('f', xdata)
		self.arrayy = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.arrayz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.arrayout = array.array('f', itertools.repeat(0.0, arraysize))

		# Take an arbitrary value from each data array for when we need only a single value.
		self.numx = self.arrayx[1]
		self.numy = self.arrayy[1]
		self.numz = self.arrayz[1]



	########################################################
	def test_fma_array_num_num_none_a1(self):
		"""Test fma as *array_num_num_array* for matherrors='a' - Array code f.
		"""
		# Copy the array so we don't change the original data.
		arrayx = copy.copy(self.arrayx)

		# This version is expected to pass.
		arrayfunc.fma(arrayx, self.numy, self.numz, matherrors=True)

		arrayx = copy.copy(self.arrayx)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(arrayx, self.numy, self.numz, matherrors='a')


	########################################################
	def test_fma_array_num_num_array_a2(self):
		"""Test fma as *array_num_num_array* for matherrors='a' - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, matherrors=True)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, matherrors='a')



	########################################################
	def test_fma_array_num_num_none_b1(self):
		"""Test fma as *array_num_num_array* for maxlen='a' - Array code f.
		"""
		# Copy the array so we don't change the original data.
		arrayx = copy.copy(self.arrayx)

		# This version is expected to pass.
		arrayfunc.fma(arrayx, self.numy, self.numz, maxlen=True)

		arrayx = copy.copy(self.arrayx)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(arrayx, self.numy, self.numz, maxlen='a')


	########################################################
	def test_fma_array_num_num_array_b2(self):
		"""Test fma as *array_num_num_array* for maxlen='a' - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, maxlen=True)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, maxlen='a')



	########################################################
	def test_fma_array_num_num_none_c1(self):
		"""Test fma as *array_num_num_array* for badparam=True - Array code f.
		"""
		# Copy the array so we don't change the original data.
		arrayx = copy.copy(self.arrayx)

		# This version is expected to pass.
		arrayfunc.fma(arrayx, self.numy, self.numz)

		arrayx = copy.copy(self.arrayx)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(arrayx, self.numy, self.numz, badparam=True)


	########################################################
	def test_fma_array_num_num_array_c2(self):
		"""Test fma as *array_num_num_array* for badparam=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, badparam=True)



	########################################################
	def test_fma_array_num_array_d1(self):
		"""Test fma as *array_num* for missing numeric parameter - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy)


	########################################################
	def test_fma_array_num_array_d2(self):
		"""Test fma as *array_num* for missing array parameter - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.arrayy)


	########################################################
	def test_fma_array_num_array_e1(self):
		"""Test fma as *array_num* for two missing numeric parameters - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx)


	########################################################
	def test_fma_no_params_f1(self):
		"""Test fma with no parameters - Array code f.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma()



##############################################################################



##############################################################################
class fma_finite_errors_f(unittest.TestCase):
	"""Test for non-finite parameters, nan, inf, -inf.
	nan_data_error_fma_template
	"""

	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		xdata = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]
		self.arraysize = len(xdata)

		# Floating point test data.
		self.okarrayx = array.array('f', xdata)
		self.okarrayy = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.okarrayz = array.array('f', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.arrayout = array.array('f', itertools.repeat(0.0, self.arraysize))

		# Take an arbitrary value from each data array for when we need only a single value.
		self.oknumx = self.okarrayx[1]
		self.oknumy = self.okarrayy[1]
		self.oknumz = self.okarrayz[1]

		# NaN as array.
		self.nanarrayx = array.array('f', itertools.repeat(math.nan, self.arraysize))
		self.nanarrayy = array.array('f', itertools.repeat(math.nan, self.arraysize))
		self.nanarrayz = array.array('f', itertools.repeat(math.nan, self.arraysize))

		# NaN as individual value.
		self.nannumx = math.nan
		self.nannumy = math.nan
		self.nannumz = math.nan

		# inf as array.
		self.infarrayx = array.array('f', itertools.repeat(math.inf, self.arraysize))
		self.infarrayy = array.array('f', itertools.repeat(math.inf, self.arraysize))
		self.infarrayz = array.array('f', itertools.repeat(math.inf, self.arraysize))

		# inf as individual value.
		self.infnumx = math.inf
		self.infnumy = math.inf
		self.infnumz = math.inf

		# Negative inf as array.
		self.ninfarrayx = array.array('f', itertools.repeat(-math.inf, self.arraysize))
		self.ninfarrayy = array.array('f', itertools.repeat(-math.inf, self.arraysize))
		self.ninfarrayz = array.array('f', itertools.repeat(-math.inf, self.arraysize))

		# Negative inf as individual value.
		self.ninfnumx = -math.inf
		self.ninfnumy = -math.inf
		self.ninfnumz = -math.inf


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_okarray_a_0(self):
		"""Test fma as *okarray_okarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_okarray_b_0(self):
		"""Test fma as *okarray_okarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_none_a_1(self):
		"""Test fma as *okarray_okarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_none_b_1(self):
		"""Test fma as *okarray_okarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_okarray_a_2(self):
		"""Test fma as *okarray_okarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_okarray_b_2(self):
		"""Test fma as *okarray_okarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_none_a_3(self):
		"""Test fma as *okarray_okarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_none_b_3(self):
		"""Test fma as *okarray_okarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_okarray_a_4(self):
		"""Test fma as *okarray_okarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_okarray_b_4(self):
		"""Test fma as *okarray_okarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_none_a_5(self):
		"""Test fma as *okarray_okarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_none_b_5(self):
		"""Test fma as *okarray_okarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_okarray_a_6(self):
		"""Test fma as *okarray_okarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_okarray_b_6(self):
		"""Test fma as *okarray_okarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_none_a_7(self):
		"""Test fma as *okarray_okarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_none_b_7(self):
		"""Test fma as *okarray_okarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_okarray_a_8(self):
		"""Test fma as *okarray_okarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_okarray_b_8(self):
		"""Test fma as *okarray_okarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_none_a_9(self):
		"""Test fma as *okarray_okarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_none_b_9(self):
		"""Test fma as *okarray_okarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_okarray_a_10(self):
		"""Test fma as *okarray_okarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_okarray_b_10(self):
		"""Test fma as *okarray_okarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_none_a_11(self):
		"""Test fma as *okarray_okarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_none_b_11(self):
		"""Test fma as *okarray_okarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_okarray_a_12(self):
		"""Test fma as *okarray_oknum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_okarray_b_12(self):
		"""Test fma as *okarray_oknum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_none_a_13(self):
		"""Test fma as *okarray_oknum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_none_b_13(self):
		"""Test fma as *okarray_oknum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_okarray_a_14(self):
		"""Test fma as *okarray_oknum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_okarray_b_14(self):
		"""Test fma as *okarray_oknum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_none_a_15(self):
		"""Test fma as *okarray_oknum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_none_b_15(self):
		"""Test fma as *okarray_oknum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_okarray_a_16(self):
		"""Test fma as *okarray_oknum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_okarray_b_16(self):
		"""Test fma as *okarray_oknum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_none_a_17(self):
		"""Test fma as *okarray_oknum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_none_b_17(self):
		"""Test fma as *okarray_oknum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_okarray_a_18(self):
		"""Test fma as *okarray_oknum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_okarray_b_18(self):
		"""Test fma as *okarray_oknum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_none_a_19(self):
		"""Test fma as *okarray_oknum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_none_b_19(self):
		"""Test fma as *okarray_oknum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_okarray_a_20(self):
		"""Test fma as *okarray_oknum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_okarray_b_20(self):
		"""Test fma as *okarray_oknum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_none_a_21(self):
		"""Test fma as *okarray_oknum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_none_b_21(self):
		"""Test fma as *okarray_oknum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_okarray_a_22(self):
		"""Test fma as *okarray_oknum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_okarray_b_22(self):
		"""Test fma as *okarray_oknum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_none_a_23(self):
		"""Test fma as *okarray_oknum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_none_b_23(self):
		"""Test fma as *okarray_oknum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_okarray_a_24(self):
		"""Test fma as *okarray_nanarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_okarray_b_24(self):
		"""Test fma as *okarray_nanarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_none_a_25(self):
		"""Test fma as *okarray_nanarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_none_b_25(self):
		"""Test fma as *okarray_nanarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_okarray_a_26(self):
		"""Test fma as *okarray_nanarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_okarray_b_26(self):
		"""Test fma as *okarray_nanarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_none_a_27(self):
		"""Test fma as *okarray_nanarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_none_b_27(self):
		"""Test fma as *okarray_nanarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_okarray_a_28(self):
		"""Test fma as *okarray_nanarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_okarray_b_28(self):
		"""Test fma as *okarray_nanarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_none_a_29(self):
		"""Test fma as *okarray_nanarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_none_b_29(self):
		"""Test fma as *okarray_nanarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_okarray_a_30(self):
		"""Test fma as *okarray_nanarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_okarray_b_30(self):
		"""Test fma as *okarray_nanarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_none_a_31(self):
		"""Test fma as *okarray_nanarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_none_b_31(self):
		"""Test fma as *okarray_nanarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_okarray_a_32(self):
		"""Test fma as *okarray_nanarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_okarray_b_32(self):
		"""Test fma as *okarray_nanarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_none_a_33(self):
		"""Test fma as *okarray_nanarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_none_b_33(self):
		"""Test fma as *okarray_nanarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_okarray_a_34(self):
		"""Test fma as *okarray_nanarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_okarray_b_34(self):
		"""Test fma as *okarray_nanarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_none_a_35(self):
		"""Test fma as *okarray_nanarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_none_b_35(self):
		"""Test fma as *okarray_nanarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_okarray_a_36(self):
		"""Test fma as *okarray_nanarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_okarray_b_36(self):
		"""Test fma as *okarray_nanarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_none_a_37(self):
		"""Test fma as *okarray_nanarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_none_b_37(self):
		"""Test fma as *okarray_nanarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_okarray_a_38(self):
		"""Test fma as *okarray_nanarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_okarray_b_38(self):
		"""Test fma as *okarray_nanarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_none_a_39(self):
		"""Test fma as *okarray_nanarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_none_b_39(self):
		"""Test fma as *okarray_nanarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_okarray_a_40(self):
		"""Test fma as *okarray_nannum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_okarray_b_40(self):
		"""Test fma as *okarray_nannum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_none_a_41(self):
		"""Test fma as *okarray_nannum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_none_b_41(self):
		"""Test fma as *okarray_nannum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_okarray_a_42(self):
		"""Test fma as *okarray_nannum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_okarray_b_42(self):
		"""Test fma as *okarray_nannum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_none_a_43(self):
		"""Test fma as *okarray_nannum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_none_b_43(self):
		"""Test fma as *okarray_nannum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_okarray_a_44(self):
		"""Test fma as *okarray_nannum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_okarray_b_44(self):
		"""Test fma as *okarray_nannum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_none_a_45(self):
		"""Test fma as *okarray_nannum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_none_b_45(self):
		"""Test fma as *okarray_nannum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_okarray_a_46(self):
		"""Test fma as *okarray_nannum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_okarray_b_46(self):
		"""Test fma as *okarray_nannum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_none_a_47(self):
		"""Test fma as *okarray_nannum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_none_b_47(self):
		"""Test fma as *okarray_nannum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_okarray_a_48(self):
		"""Test fma as *okarray_nannum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_okarray_b_48(self):
		"""Test fma as *okarray_nannum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_none_a_49(self):
		"""Test fma as *okarray_nannum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_none_b_49(self):
		"""Test fma as *okarray_nannum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_okarray_a_50(self):
		"""Test fma as *okarray_nannum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_okarray_b_50(self):
		"""Test fma as *okarray_nannum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_none_a_51(self):
		"""Test fma as *okarray_nannum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_none_b_51(self):
		"""Test fma as *okarray_nannum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_okarray_a_52(self):
		"""Test fma as *okarray_nannum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_okarray_b_52(self):
		"""Test fma as *okarray_nannum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_none_a_53(self):
		"""Test fma as *okarray_nannum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_none_b_53(self):
		"""Test fma as *okarray_nannum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_okarray_a_54(self):
		"""Test fma as *okarray_nannum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_okarray_b_54(self):
		"""Test fma as *okarray_nannum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_none_a_55(self):
		"""Test fma as *okarray_nannum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_none_b_55(self):
		"""Test fma as *okarray_nannum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_okarray_a_56(self):
		"""Test fma as *okarray_infarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_okarray_b_56(self):
		"""Test fma as *okarray_infarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_none_a_57(self):
		"""Test fma as *okarray_infarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_none_b_57(self):
		"""Test fma as *okarray_infarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_okarray_a_58(self):
		"""Test fma as *okarray_infarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_okarray_b_58(self):
		"""Test fma as *okarray_infarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_none_a_59(self):
		"""Test fma as *okarray_infarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_none_b_59(self):
		"""Test fma as *okarray_infarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_okarray_a_60(self):
		"""Test fma as *okarray_infarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_okarray_b_60(self):
		"""Test fma as *okarray_infarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_none_a_61(self):
		"""Test fma as *okarray_infarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_none_b_61(self):
		"""Test fma as *okarray_infarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_okarray_a_62(self):
		"""Test fma as *okarray_infarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_okarray_b_62(self):
		"""Test fma as *okarray_infarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_none_a_63(self):
		"""Test fma as *okarray_infarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_none_b_63(self):
		"""Test fma as *okarray_infarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_okarray_a_64(self):
		"""Test fma as *okarray_infarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_okarray_b_64(self):
		"""Test fma as *okarray_infarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_none_a_65(self):
		"""Test fma as *okarray_infarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_none_b_65(self):
		"""Test fma as *okarray_infarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_okarray_a_66(self):
		"""Test fma as *okarray_infarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_okarray_b_66(self):
		"""Test fma as *okarray_infarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_none_a_67(self):
		"""Test fma as *okarray_infarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_none_b_67(self):
		"""Test fma as *okarray_infarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_okarray_a_68(self):
		"""Test fma as *okarray_infarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_okarray_b_68(self):
		"""Test fma as *okarray_infarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_none_a_69(self):
		"""Test fma as *okarray_infarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_none_b_69(self):
		"""Test fma as *okarray_infarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_okarray_a_70(self):
		"""Test fma as *okarray_infarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_okarray_b_70(self):
		"""Test fma as *okarray_infarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_none_a_71(self):
		"""Test fma as *okarray_infarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_none_b_71(self):
		"""Test fma as *okarray_infarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_okarray_a_72(self):
		"""Test fma as *okarray_infnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_okarray_b_72(self):
		"""Test fma as *okarray_infnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_none_a_73(self):
		"""Test fma as *okarray_infnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_none_b_73(self):
		"""Test fma as *okarray_infnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_okarray_a_74(self):
		"""Test fma as *okarray_infnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_okarray_b_74(self):
		"""Test fma as *okarray_infnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_none_a_75(self):
		"""Test fma as *okarray_infnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_none_b_75(self):
		"""Test fma as *okarray_infnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_okarray_a_76(self):
		"""Test fma as *okarray_infnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_okarray_b_76(self):
		"""Test fma as *okarray_infnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_none_a_77(self):
		"""Test fma as *okarray_infnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_none_b_77(self):
		"""Test fma as *okarray_infnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_okarray_a_78(self):
		"""Test fma as *okarray_infnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_okarray_b_78(self):
		"""Test fma as *okarray_infnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_none_a_79(self):
		"""Test fma as *okarray_infnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_none_b_79(self):
		"""Test fma as *okarray_infnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_okarray_a_80(self):
		"""Test fma as *okarray_infnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_okarray_b_80(self):
		"""Test fma as *okarray_infnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_none_a_81(self):
		"""Test fma as *okarray_infnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_none_b_81(self):
		"""Test fma as *okarray_infnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_okarray_a_82(self):
		"""Test fma as *okarray_infnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_okarray_b_82(self):
		"""Test fma as *okarray_infnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_none_a_83(self):
		"""Test fma as *okarray_infnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_none_b_83(self):
		"""Test fma as *okarray_infnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_okarray_a_84(self):
		"""Test fma as *okarray_infnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_okarray_b_84(self):
		"""Test fma as *okarray_infnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_none_a_85(self):
		"""Test fma as *okarray_infnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_none_b_85(self):
		"""Test fma as *okarray_infnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_okarray_a_86(self):
		"""Test fma as *okarray_infnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_okarray_b_86(self):
		"""Test fma as *okarray_infnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_none_a_87(self):
		"""Test fma as *okarray_infnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_none_b_87(self):
		"""Test fma as *okarray_infnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_okarray_a_88(self):
		"""Test fma as *okarray_ninfarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_okarray_b_88(self):
		"""Test fma as *okarray_ninfarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_none_a_89(self):
		"""Test fma as *okarray_ninfarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_none_b_89(self):
		"""Test fma as *okarray_ninfarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_okarray_a_90(self):
		"""Test fma as *okarray_ninfarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_okarray_b_90(self):
		"""Test fma as *okarray_ninfarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_none_a_91(self):
		"""Test fma as *okarray_ninfarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_none_b_91(self):
		"""Test fma as *okarray_ninfarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_okarray_a_92(self):
		"""Test fma as *okarray_ninfarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_okarray_b_92(self):
		"""Test fma as *okarray_ninfarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_none_a_93(self):
		"""Test fma as *okarray_ninfarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_none_b_93(self):
		"""Test fma as *okarray_ninfarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_okarray_a_94(self):
		"""Test fma as *okarray_ninfarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_okarray_b_94(self):
		"""Test fma as *okarray_ninfarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_none_a_95(self):
		"""Test fma as *okarray_ninfarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_none_b_95(self):
		"""Test fma as *okarray_ninfarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_okarray_a_96(self):
		"""Test fma as *okarray_ninfarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_okarray_b_96(self):
		"""Test fma as *okarray_ninfarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_none_a_97(self):
		"""Test fma as *okarray_ninfarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_none_b_97(self):
		"""Test fma as *okarray_ninfarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_okarray_a_98(self):
		"""Test fma as *okarray_ninfarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_okarray_b_98(self):
		"""Test fma as *okarray_ninfarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_none_a_99(self):
		"""Test fma as *okarray_ninfarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_none_b_99(self):
		"""Test fma as *okarray_ninfarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_okarray_a_100(self):
		"""Test fma as *okarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_okarray_b_100(self):
		"""Test fma as *okarray_ninfarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_none_a_101(self):
		"""Test fma as *okarray_ninfarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_none_b_101(self):
		"""Test fma as *okarray_ninfarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_okarray_a_102(self):
		"""Test fma as *okarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_okarray_b_102(self):
		"""Test fma as *okarray_ninfarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_none_a_103(self):
		"""Test fma as *okarray_ninfarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_none_b_103(self):
		"""Test fma as *okarray_ninfarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_okarray_a_104(self):
		"""Test fma as *okarray_ninfnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_okarray_b_104(self):
		"""Test fma as *okarray_ninfnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_none_a_105(self):
		"""Test fma as *okarray_ninfnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_none_b_105(self):
		"""Test fma as *okarray_ninfnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_okarray_a_106(self):
		"""Test fma as *okarray_ninfnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_okarray_b_106(self):
		"""Test fma as *okarray_ninfnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_none_a_107(self):
		"""Test fma as *okarray_ninfnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_none_b_107(self):
		"""Test fma as *okarray_ninfnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_okarray_a_108(self):
		"""Test fma as *okarray_ninfnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_okarray_b_108(self):
		"""Test fma as *okarray_ninfnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_none_a_109(self):
		"""Test fma as *okarray_ninfnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_none_b_109(self):
		"""Test fma as *okarray_ninfnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_okarray_a_110(self):
		"""Test fma as *okarray_ninfnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_okarray_b_110(self):
		"""Test fma as *okarray_ninfnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_none_a_111(self):
		"""Test fma as *okarray_ninfnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_none_b_111(self):
		"""Test fma as *okarray_ninfnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_okarray_a_112(self):
		"""Test fma as *okarray_ninfnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_okarray_b_112(self):
		"""Test fma as *okarray_ninfnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_none_a_113(self):
		"""Test fma as *okarray_ninfnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_none_b_113(self):
		"""Test fma as *okarray_ninfnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_okarray_a_114(self):
		"""Test fma as *okarray_ninfnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_okarray_b_114(self):
		"""Test fma as *okarray_ninfnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_none_a_115(self):
		"""Test fma as *okarray_ninfnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_none_b_115(self):
		"""Test fma as *okarray_ninfnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_okarray_a_116(self):
		"""Test fma as *okarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_okarray_b_116(self):
		"""Test fma as *okarray_ninfnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_none_a_117(self):
		"""Test fma as *okarray_ninfnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_none_b_117(self):
		"""Test fma as *okarray_ninfnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_okarray_a_118(self):
		"""Test fma as *okarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_okarray_b_118(self):
		"""Test fma as *okarray_ninfnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_none_a_119(self):
		"""Test fma as *okarray_ninfnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_none_b_119(self):
		"""Test fma as *okarray_ninfnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_okarray_a_120(self):
		"""Test fma as *nanarray_okarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_okarray_b_120(self):
		"""Test fma as *nanarray_okarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_none_a_121(self):
		"""Test fma as *nanarray_okarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_none_b_121(self):
		"""Test fma as *nanarray_okarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_okarray_a_122(self):
		"""Test fma as *nanarray_okarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_okarray_b_122(self):
		"""Test fma as *nanarray_okarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_none_a_123(self):
		"""Test fma as *nanarray_okarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_none_b_123(self):
		"""Test fma as *nanarray_okarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_okarray_a_124(self):
		"""Test fma as *nanarray_okarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_okarray_b_124(self):
		"""Test fma as *nanarray_okarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_none_a_125(self):
		"""Test fma as *nanarray_okarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_none_b_125(self):
		"""Test fma as *nanarray_okarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_okarray_a_126(self):
		"""Test fma as *nanarray_okarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_okarray_b_126(self):
		"""Test fma as *nanarray_okarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_none_a_127(self):
		"""Test fma as *nanarray_okarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_none_b_127(self):
		"""Test fma as *nanarray_okarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_okarray_a_128(self):
		"""Test fma as *nanarray_okarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_okarray_b_128(self):
		"""Test fma as *nanarray_okarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_none_a_129(self):
		"""Test fma as *nanarray_okarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_none_b_129(self):
		"""Test fma as *nanarray_okarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_okarray_a_130(self):
		"""Test fma as *nanarray_okarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_okarray_b_130(self):
		"""Test fma as *nanarray_okarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_none_a_131(self):
		"""Test fma as *nanarray_okarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_none_b_131(self):
		"""Test fma as *nanarray_okarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_okarray_a_132(self):
		"""Test fma as *nanarray_okarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_okarray_b_132(self):
		"""Test fma as *nanarray_okarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_none_a_133(self):
		"""Test fma as *nanarray_okarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_none_b_133(self):
		"""Test fma as *nanarray_okarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_okarray_a_134(self):
		"""Test fma as *nanarray_okarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_okarray_b_134(self):
		"""Test fma as *nanarray_okarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_none_a_135(self):
		"""Test fma as *nanarray_okarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_none_b_135(self):
		"""Test fma as *nanarray_okarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_okarray_a_136(self):
		"""Test fma as *nanarray_oknum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_okarray_b_136(self):
		"""Test fma as *nanarray_oknum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_none_a_137(self):
		"""Test fma as *nanarray_oknum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_none_b_137(self):
		"""Test fma as *nanarray_oknum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_okarray_a_138(self):
		"""Test fma as *nanarray_oknum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_okarray_b_138(self):
		"""Test fma as *nanarray_oknum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_none_a_139(self):
		"""Test fma as *nanarray_oknum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_none_b_139(self):
		"""Test fma as *nanarray_oknum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_okarray_a_140(self):
		"""Test fma as *nanarray_oknum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_okarray_b_140(self):
		"""Test fma as *nanarray_oknum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_none_a_141(self):
		"""Test fma as *nanarray_oknum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_none_b_141(self):
		"""Test fma as *nanarray_oknum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_okarray_a_142(self):
		"""Test fma as *nanarray_oknum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_okarray_b_142(self):
		"""Test fma as *nanarray_oknum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_none_a_143(self):
		"""Test fma as *nanarray_oknum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_none_b_143(self):
		"""Test fma as *nanarray_oknum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_okarray_a_144(self):
		"""Test fma as *nanarray_oknum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_okarray_b_144(self):
		"""Test fma as *nanarray_oknum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_none_a_145(self):
		"""Test fma as *nanarray_oknum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_none_b_145(self):
		"""Test fma as *nanarray_oknum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_okarray_a_146(self):
		"""Test fma as *nanarray_oknum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_okarray_b_146(self):
		"""Test fma as *nanarray_oknum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_none_a_147(self):
		"""Test fma as *nanarray_oknum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_none_b_147(self):
		"""Test fma as *nanarray_oknum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_okarray_a_148(self):
		"""Test fma as *nanarray_oknum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_okarray_b_148(self):
		"""Test fma as *nanarray_oknum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_none_a_149(self):
		"""Test fma as *nanarray_oknum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_none_b_149(self):
		"""Test fma as *nanarray_oknum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_okarray_a_150(self):
		"""Test fma as *nanarray_oknum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_okarray_b_150(self):
		"""Test fma as *nanarray_oknum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_none_a_151(self):
		"""Test fma as *nanarray_oknum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_none_b_151(self):
		"""Test fma as *nanarray_oknum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_okarray_a_152(self):
		"""Test fma as *nanarray_nanarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_okarray_b_152(self):
		"""Test fma as *nanarray_nanarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_none_a_153(self):
		"""Test fma as *nanarray_nanarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_none_b_153(self):
		"""Test fma as *nanarray_nanarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_okarray_a_154(self):
		"""Test fma as *nanarray_nanarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_okarray_b_154(self):
		"""Test fma as *nanarray_nanarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_none_a_155(self):
		"""Test fma as *nanarray_nanarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_none_b_155(self):
		"""Test fma as *nanarray_nanarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_okarray_a_156(self):
		"""Test fma as *nanarray_nanarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_okarray_b_156(self):
		"""Test fma as *nanarray_nanarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_none_a_157(self):
		"""Test fma as *nanarray_nanarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_none_b_157(self):
		"""Test fma as *nanarray_nanarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_okarray_a_158(self):
		"""Test fma as *nanarray_nanarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_okarray_b_158(self):
		"""Test fma as *nanarray_nanarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_none_a_159(self):
		"""Test fma as *nanarray_nanarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_none_b_159(self):
		"""Test fma as *nanarray_nanarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_okarray_a_160(self):
		"""Test fma as *nanarray_nanarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_okarray_b_160(self):
		"""Test fma as *nanarray_nanarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_none_a_161(self):
		"""Test fma as *nanarray_nanarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_none_b_161(self):
		"""Test fma as *nanarray_nanarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_okarray_a_162(self):
		"""Test fma as *nanarray_nanarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_okarray_b_162(self):
		"""Test fma as *nanarray_nanarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_none_a_163(self):
		"""Test fma as *nanarray_nanarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_none_b_163(self):
		"""Test fma as *nanarray_nanarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_okarray_a_164(self):
		"""Test fma as *nanarray_nanarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_okarray_b_164(self):
		"""Test fma as *nanarray_nanarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_none_a_165(self):
		"""Test fma as *nanarray_nanarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_none_b_165(self):
		"""Test fma as *nanarray_nanarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_okarray_a_166(self):
		"""Test fma as *nanarray_nanarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_okarray_b_166(self):
		"""Test fma as *nanarray_nanarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_none_a_167(self):
		"""Test fma as *nanarray_nanarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_none_b_167(self):
		"""Test fma as *nanarray_nanarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_okarray_a_168(self):
		"""Test fma as *nanarray_nannum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_okarray_b_168(self):
		"""Test fma as *nanarray_nannum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_none_a_169(self):
		"""Test fma as *nanarray_nannum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_none_b_169(self):
		"""Test fma as *nanarray_nannum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_okarray_a_170(self):
		"""Test fma as *nanarray_nannum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_okarray_b_170(self):
		"""Test fma as *nanarray_nannum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_none_a_171(self):
		"""Test fma as *nanarray_nannum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_none_b_171(self):
		"""Test fma as *nanarray_nannum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_okarray_a_172(self):
		"""Test fma as *nanarray_nannum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_okarray_b_172(self):
		"""Test fma as *nanarray_nannum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_none_a_173(self):
		"""Test fma as *nanarray_nannum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_none_b_173(self):
		"""Test fma as *nanarray_nannum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_okarray_a_174(self):
		"""Test fma as *nanarray_nannum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_okarray_b_174(self):
		"""Test fma as *nanarray_nannum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_none_a_175(self):
		"""Test fma as *nanarray_nannum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_none_b_175(self):
		"""Test fma as *nanarray_nannum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_okarray_a_176(self):
		"""Test fma as *nanarray_nannum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_okarray_b_176(self):
		"""Test fma as *nanarray_nannum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_none_a_177(self):
		"""Test fma as *nanarray_nannum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_none_b_177(self):
		"""Test fma as *nanarray_nannum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_okarray_a_178(self):
		"""Test fma as *nanarray_nannum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_okarray_b_178(self):
		"""Test fma as *nanarray_nannum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_none_a_179(self):
		"""Test fma as *nanarray_nannum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_none_b_179(self):
		"""Test fma as *nanarray_nannum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_okarray_a_180(self):
		"""Test fma as *nanarray_nannum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_okarray_b_180(self):
		"""Test fma as *nanarray_nannum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_none_a_181(self):
		"""Test fma as *nanarray_nannum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_none_b_181(self):
		"""Test fma as *nanarray_nannum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_okarray_a_182(self):
		"""Test fma as *nanarray_nannum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_okarray_b_182(self):
		"""Test fma as *nanarray_nannum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_none_a_183(self):
		"""Test fma as *nanarray_nannum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_none_b_183(self):
		"""Test fma as *nanarray_nannum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_okarray_a_184(self):
		"""Test fma as *nanarray_infarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_okarray_b_184(self):
		"""Test fma as *nanarray_infarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_none_a_185(self):
		"""Test fma as *nanarray_infarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_none_b_185(self):
		"""Test fma as *nanarray_infarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_okarray_a_186(self):
		"""Test fma as *nanarray_infarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_okarray_b_186(self):
		"""Test fma as *nanarray_infarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_none_a_187(self):
		"""Test fma as *nanarray_infarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_none_b_187(self):
		"""Test fma as *nanarray_infarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_okarray_a_188(self):
		"""Test fma as *nanarray_infarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_okarray_b_188(self):
		"""Test fma as *nanarray_infarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_none_a_189(self):
		"""Test fma as *nanarray_infarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_none_b_189(self):
		"""Test fma as *nanarray_infarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_okarray_a_190(self):
		"""Test fma as *nanarray_infarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_okarray_b_190(self):
		"""Test fma as *nanarray_infarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_none_a_191(self):
		"""Test fma as *nanarray_infarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_none_b_191(self):
		"""Test fma as *nanarray_infarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_okarray_a_192(self):
		"""Test fma as *nanarray_infarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_okarray_b_192(self):
		"""Test fma as *nanarray_infarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_none_a_193(self):
		"""Test fma as *nanarray_infarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_none_b_193(self):
		"""Test fma as *nanarray_infarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_okarray_a_194(self):
		"""Test fma as *nanarray_infarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_okarray_b_194(self):
		"""Test fma as *nanarray_infarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_none_a_195(self):
		"""Test fma as *nanarray_infarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_none_b_195(self):
		"""Test fma as *nanarray_infarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_okarray_a_196(self):
		"""Test fma as *nanarray_infarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_okarray_b_196(self):
		"""Test fma as *nanarray_infarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_none_a_197(self):
		"""Test fma as *nanarray_infarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_none_b_197(self):
		"""Test fma as *nanarray_infarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_okarray_a_198(self):
		"""Test fma as *nanarray_infarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_okarray_b_198(self):
		"""Test fma as *nanarray_infarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_none_a_199(self):
		"""Test fma as *nanarray_infarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_none_b_199(self):
		"""Test fma as *nanarray_infarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_okarray_a_200(self):
		"""Test fma as *nanarray_infnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_okarray_b_200(self):
		"""Test fma as *nanarray_infnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_none_a_201(self):
		"""Test fma as *nanarray_infnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_none_b_201(self):
		"""Test fma as *nanarray_infnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_okarray_a_202(self):
		"""Test fma as *nanarray_infnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_okarray_b_202(self):
		"""Test fma as *nanarray_infnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_none_a_203(self):
		"""Test fma as *nanarray_infnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_none_b_203(self):
		"""Test fma as *nanarray_infnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_okarray_a_204(self):
		"""Test fma as *nanarray_infnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_okarray_b_204(self):
		"""Test fma as *nanarray_infnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_none_a_205(self):
		"""Test fma as *nanarray_infnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_none_b_205(self):
		"""Test fma as *nanarray_infnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_okarray_a_206(self):
		"""Test fma as *nanarray_infnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_okarray_b_206(self):
		"""Test fma as *nanarray_infnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_none_a_207(self):
		"""Test fma as *nanarray_infnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_none_b_207(self):
		"""Test fma as *nanarray_infnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_okarray_a_208(self):
		"""Test fma as *nanarray_infnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_okarray_b_208(self):
		"""Test fma as *nanarray_infnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_none_a_209(self):
		"""Test fma as *nanarray_infnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_none_b_209(self):
		"""Test fma as *nanarray_infnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_okarray_a_210(self):
		"""Test fma as *nanarray_infnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_okarray_b_210(self):
		"""Test fma as *nanarray_infnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_none_a_211(self):
		"""Test fma as *nanarray_infnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_none_b_211(self):
		"""Test fma as *nanarray_infnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_okarray_a_212(self):
		"""Test fma as *nanarray_infnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_okarray_b_212(self):
		"""Test fma as *nanarray_infnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_none_a_213(self):
		"""Test fma as *nanarray_infnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_none_b_213(self):
		"""Test fma as *nanarray_infnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_okarray_a_214(self):
		"""Test fma as *nanarray_infnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_okarray_b_214(self):
		"""Test fma as *nanarray_infnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_none_a_215(self):
		"""Test fma as *nanarray_infnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_none_b_215(self):
		"""Test fma as *nanarray_infnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_okarray_a_216(self):
		"""Test fma as *nanarray_ninfarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_okarray_b_216(self):
		"""Test fma as *nanarray_ninfarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_none_a_217(self):
		"""Test fma as *nanarray_ninfarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_none_b_217(self):
		"""Test fma as *nanarray_ninfarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_okarray_a_218(self):
		"""Test fma as *nanarray_ninfarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_okarray_b_218(self):
		"""Test fma as *nanarray_ninfarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_none_a_219(self):
		"""Test fma as *nanarray_ninfarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_none_b_219(self):
		"""Test fma as *nanarray_ninfarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_okarray_a_220(self):
		"""Test fma as *nanarray_ninfarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_okarray_b_220(self):
		"""Test fma as *nanarray_ninfarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_none_a_221(self):
		"""Test fma as *nanarray_ninfarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_none_b_221(self):
		"""Test fma as *nanarray_ninfarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_okarray_a_222(self):
		"""Test fma as *nanarray_ninfarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_okarray_b_222(self):
		"""Test fma as *nanarray_ninfarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_none_a_223(self):
		"""Test fma as *nanarray_ninfarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_none_b_223(self):
		"""Test fma as *nanarray_ninfarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_okarray_a_224(self):
		"""Test fma as *nanarray_ninfarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_okarray_b_224(self):
		"""Test fma as *nanarray_ninfarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_none_a_225(self):
		"""Test fma as *nanarray_ninfarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_none_b_225(self):
		"""Test fma as *nanarray_ninfarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_okarray_a_226(self):
		"""Test fma as *nanarray_ninfarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_okarray_b_226(self):
		"""Test fma as *nanarray_ninfarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_none_a_227(self):
		"""Test fma as *nanarray_ninfarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_none_b_227(self):
		"""Test fma as *nanarray_ninfarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_okarray_a_228(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_okarray_b_228(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_none_a_229(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_none_b_229(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_okarray_a_230(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_okarray_b_230(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_none_a_231(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_none_b_231(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_okarray_a_232(self):
		"""Test fma as *nanarray_ninfnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_okarray_b_232(self):
		"""Test fma as *nanarray_ninfnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_none_a_233(self):
		"""Test fma as *nanarray_ninfnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_none_b_233(self):
		"""Test fma as *nanarray_ninfnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_okarray_a_234(self):
		"""Test fma as *nanarray_ninfnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_okarray_b_234(self):
		"""Test fma as *nanarray_ninfnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_none_a_235(self):
		"""Test fma as *nanarray_ninfnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_none_b_235(self):
		"""Test fma as *nanarray_ninfnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_okarray_a_236(self):
		"""Test fma as *nanarray_ninfnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_okarray_b_236(self):
		"""Test fma as *nanarray_ninfnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_none_a_237(self):
		"""Test fma as *nanarray_ninfnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_none_b_237(self):
		"""Test fma as *nanarray_ninfnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_okarray_a_238(self):
		"""Test fma as *nanarray_ninfnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_okarray_b_238(self):
		"""Test fma as *nanarray_ninfnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_none_a_239(self):
		"""Test fma as *nanarray_ninfnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_none_b_239(self):
		"""Test fma as *nanarray_ninfnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_okarray_a_240(self):
		"""Test fma as *nanarray_ninfnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_okarray_b_240(self):
		"""Test fma as *nanarray_ninfnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_none_a_241(self):
		"""Test fma as *nanarray_ninfnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_none_b_241(self):
		"""Test fma as *nanarray_ninfnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_okarray_a_242(self):
		"""Test fma as *nanarray_ninfnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_okarray_b_242(self):
		"""Test fma as *nanarray_ninfnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_none_a_243(self):
		"""Test fma as *nanarray_ninfnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_none_b_243(self):
		"""Test fma as *nanarray_ninfnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_okarray_a_244(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_okarray_b_244(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_none_a_245(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_none_b_245(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_okarray_a_246(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_okarray_b_246(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_none_a_247(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_none_b_247(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_okarray_a_248(self):
		"""Test fma as *infarray_okarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_okarray_b_248(self):
		"""Test fma as *infarray_okarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_none_a_249(self):
		"""Test fma as *infarray_okarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_none_b_249(self):
		"""Test fma as *infarray_okarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_okarray_a_250(self):
		"""Test fma as *infarray_okarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_okarray_b_250(self):
		"""Test fma as *infarray_okarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_none_a_251(self):
		"""Test fma as *infarray_okarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_none_b_251(self):
		"""Test fma as *infarray_okarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_okarray_a_252(self):
		"""Test fma as *infarray_okarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_okarray_b_252(self):
		"""Test fma as *infarray_okarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_none_a_253(self):
		"""Test fma as *infarray_okarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_none_b_253(self):
		"""Test fma as *infarray_okarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_okarray_a_254(self):
		"""Test fma as *infarray_okarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_okarray_b_254(self):
		"""Test fma as *infarray_okarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_none_a_255(self):
		"""Test fma as *infarray_okarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_none_b_255(self):
		"""Test fma as *infarray_okarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_okarray_a_256(self):
		"""Test fma as *infarray_okarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_okarray_b_256(self):
		"""Test fma as *infarray_okarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_none_a_257(self):
		"""Test fma as *infarray_okarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_none_b_257(self):
		"""Test fma as *infarray_okarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_okarray_a_258(self):
		"""Test fma as *infarray_okarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_okarray_b_258(self):
		"""Test fma as *infarray_okarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_none_a_259(self):
		"""Test fma as *infarray_okarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_none_b_259(self):
		"""Test fma as *infarray_okarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_okarray_a_260(self):
		"""Test fma as *infarray_okarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_okarray_b_260(self):
		"""Test fma as *infarray_okarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_none_a_261(self):
		"""Test fma as *infarray_okarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_none_b_261(self):
		"""Test fma as *infarray_okarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_okarray_a_262(self):
		"""Test fma as *infarray_okarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_okarray_b_262(self):
		"""Test fma as *infarray_okarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_none_a_263(self):
		"""Test fma as *infarray_okarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_none_b_263(self):
		"""Test fma as *infarray_okarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_okarray_a_264(self):
		"""Test fma as *infarray_oknum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_okarray_b_264(self):
		"""Test fma as *infarray_oknum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_none_a_265(self):
		"""Test fma as *infarray_oknum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_none_b_265(self):
		"""Test fma as *infarray_oknum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_okarray_a_266(self):
		"""Test fma as *infarray_oknum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_okarray_b_266(self):
		"""Test fma as *infarray_oknum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_none_a_267(self):
		"""Test fma as *infarray_oknum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_none_b_267(self):
		"""Test fma as *infarray_oknum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_okarray_a_268(self):
		"""Test fma as *infarray_oknum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_okarray_b_268(self):
		"""Test fma as *infarray_oknum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_none_a_269(self):
		"""Test fma as *infarray_oknum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_none_b_269(self):
		"""Test fma as *infarray_oknum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_okarray_a_270(self):
		"""Test fma as *infarray_oknum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_okarray_b_270(self):
		"""Test fma as *infarray_oknum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_none_a_271(self):
		"""Test fma as *infarray_oknum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_none_b_271(self):
		"""Test fma as *infarray_oknum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_okarray_a_272(self):
		"""Test fma as *infarray_oknum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_okarray_b_272(self):
		"""Test fma as *infarray_oknum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_none_a_273(self):
		"""Test fma as *infarray_oknum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_none_b_273(self):
		"""Test fma as *infarray_oknum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_okarray_a_274(self):
		"""Test fma as *infarray_oknum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_okarray_b_274(self):
		"""Test fma as *infarray_oknum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_none_a_275(self):
		"""Test fma as *infarray_oknum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_none_b_275(self):
		"""Test fma as *infarray_oknum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_okarray_a_276(self):
		"""Test fma as *infarray_oknum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_okarray_b_276(self):
		"""Test fma as *infarray_oknum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_none_a_277(self):
		"""Test fma as *infarray_oknum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_none_b_277(self):
		"""Test fma as *infarray_oknum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_okarray_a_278(self):
		"""Test fma as *infarray_oknum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_okarray_b_278(self):
		"""Test fma as *infarray_oknum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_none_a_279(self):
		"""Test fma as *infarray_oknum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_none_b_279(self):
		"""Test fma as *infarray_oknum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_okarray_a_280(self):
		"""Test fma as *infarray_nanarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_okarray_b_280(self):
		"""Test fma as *infarray_nanarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_none_a_281(self):
		"""Test fma as *infarray_nanarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_none_b_281(self):
		"""Test fma as *infarray_nanarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_okarray_a_282(self):
		"""Test fma as *infarray_nanarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_okarray_b_282(self):
		"""Test fma as *infarray_nanarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_none_a_283(self):
		"""Test fma as *infarray_nanarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_none_b_283(self):
		"""Test fma as *infarray_nanarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_okarray_a_284(self):
		"""Test fma as *infarray_nanarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_okarray_b_284(self):
		"""Test fma as *infarray_nanarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_none_a_285(self):
		"""Test fma as *infarray_nanarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_none_b_285(self):
		"""Test fma as *infarray_nanarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_okarray_a_286(self):
		"""Test fma as *infarray_nanarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_okarray_b_286(self):
		"""Test fma as *infarray_nanarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_none_a_287(self):
		"""Test fma as *infarray_nanarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_none_b_287(self):
		"""Test fma as *infarray_nanarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_okarray_a_288(self):
		"""Test fma as *infarray_nanarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_okarray_b_288(self):
		"""Test fma as *infarray_nanarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_none_a_289(self):
		"""Test fma as *infarray_nanarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_none_b_289(self):
		"""Test fma as *infarray_nanarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_okarray_a_290(self):
		"""Test fma as *infarray_nanarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_okarray_b_290(self):
		"""Test fma as *infarray_nanarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_none_a_291(self):
		"""Test fma as *infarray_nanarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_none_b_291(self):
		"""Test fma as *infarray_nanarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_okarray_a_292(self):
		"""Test fma as *infarray_nanarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_okarray_b_292(self):
		"""Test fma as *infarray_nanarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_none_a_293(self):
		"""Test fma as *infarray_nanarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_none_b_293(self):
		"""Test fma as *infarray_nanarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_okarray_a_294(self):
		"""Test fma as *infarray_nanarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_okarray_b_294(self):
		"""Test fma as *infarray_nanarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_none_a_295(self):
		"""Test fma as *infarray_nanarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_none_b_295(self):
		"""Test fma as *infarray_nanarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_okarray_a_296(self):
		"""Test fma as *infarray_nannum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_okarray_b_296(self):
		"""Test fma as *infarray_nannum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_none_a_297(self):
		"""Test fma as *infarray_nannum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_none_b_297(self):
		"""Test fma as *infarray_nannum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_okarray_a_298(self):
		"""Test fma as *infarray_nannum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_okarray_b_298(self):
		"""Test fma as *infarray_nannum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_none_a_299(self):
		"""Test fma as *infarray_nannum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_none_b_299(self):
		"""Test fma as *infarray_nannum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_okarray_a_300(self):
		"""Test fma as *infarray_nannum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_okarray_b_300(self):
		"""Test fma as *infarray_nannum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_none_a_301(self):
		"""Test fma as *infarray_nannum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_none_b_301(self):
		"""Test fma as *infarray_nannum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_okarray_a_302(self):
		"""Test fma as *infarray_nannum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_okarray_b_302(self):
		"""Test fma as *infarray_nannum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_none_a_303(self):
		"""Test fma as *infarray_nannum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_none_b_303(self):
		"""Test fma as *infarray_nannum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_okarray_a_304(self):
		"""Test fma as *infarray_nannum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_okarray_b_304(self):
		"""Test fma as *infarray_nannum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_none_a_305(self):
		"""Test fma as *infarray_nannum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_none_b_305(self):
		"""Test fma as *infarray_nannum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_okarray_a_306(self):
		"""Test fma as *infarray_nannum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_okarray_b_306(self):
		"""Test fma as *infarray_nannum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_none_a_307(self):
		"""Test fma as *infarray_nannum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_none_b_307(self):
		"""Test fma as *infarray_nannum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_okarray_a_308(self):
		"""Test fma as *infarray_nannum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_okarray_b_308(self):
		"""Test fma as *infarray_nannum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_none_a_309(self):
		"""Test fma as *infarray_nannum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_none_b_309(self):
		"""Test fma as *infarray_nannum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_okarray_a_310(self):
		"""Test fma as *infarray_nannum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_okarray_b_310(self):
		"""Test fma as *infarray_nannum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_none_a_311(self):
		"""Test fma as *infarray_nannum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_none_b_311(self):
		"""Test fma as *infarray_nannum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_okarray_a_312(self):
		"""Test fma as *infarray_infarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_okarray_b_312(self):
		"""Test fma as *infarray_infarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_none_a_313(self):
		"""Test fma as *infarray_infarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_none_b_313(self):
		"""Test fma as *infarray_infarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_okarray_a_314(self):
		"""Test fma as *infarray_infarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_okarray_b_314(self):
		"""Test fma as *infarray_infarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_none_a_315(self):
		"""Test fma as *infarray_infarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_none_b_315(self):
		"""Test fma as *infarray_infarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_okarray_a_316(self):
		"""Test fma as *infarray_infarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_okarray_b_316(self):
		"""Test fma as *infarray_infarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_none_a_317(self):
		"""Test fma as *infarray_infarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_none_b_317(self):
		"""Test fma as *infarray_infarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_okarray_a_318(self):
		"""Test fma as *infarray_infarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_okarray_b_318(self):
		"""Test fma as *infarray_infarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_none_a_319(self):
		"""Test fma as *infarray_infarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_none_b_319(self):
		"""Test fma as *infarray_infarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_okarray_a_320(self):
		"""Test fma as *infarray_infarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_okarray_b_320(self):
		"""Test fma as *infarray_infarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_none_a_321(self):
		"""Test fma as *infarray_infarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_none_b_321(self):
		"""Test fma as *infarray_infarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_okarray_a_322(self):
		"""Test fma as *infarray_infarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_okarray_b_322(self):
		"""Test fma as *infarray_infarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_none_a_323(self):
		"""Test fma as *infarray_infarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_none_b_323(self):
		"""Test fma as *infarray_infarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_okarray_a_324(self):
		"""Test fma as *infarray_infarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_okarray_b_324(self):
		"""Test fma as *infarray_infarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_none_a_325(self):
		"""Test fma as *infarray_infarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_none_b_325(self):
		"""Test fma as *infarray_infarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_okarray_a_326(self):
		"""Test fma as *infarray_infarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_okarray_b_326(self):
		"""Test fma as *infarray_infarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_none_a_327(self):
		"""Test fma as *infarray_infarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_none_b_327(self):
		"""Test fma as *infarray_infarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_okarray_a_328(self):
		"""Test fma as *infarray_infnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_okarray_b_328(self):
		"""Test fma as *infarray_infnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_none_a_329(self):
		"""Test fma as *infarray_infnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_none_b_329(self):
		"""Test fma as *infarray_infnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_okarray_a_330(self):
		"""Test fma as *infarray_infnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_okarray_b_330(self):
		"""Test fma as *infarray_infnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_none_a_331(self):
		"""Test fma as *infarray_infnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_none_b_331(self):
		"""Test fma as *infarray_infnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_okarray_a_332(self):
		"""Test fma as *infarray_infnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_okarray_b_332(self):
		"""Test fma as *infarray_infnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_none_a_333(self):
		"""Test fma as *infarray_infnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_none_b_333(self):
		"""Test fma as *infarray_infnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_okarray_a_334(self):
		"""Test fma as *infarray_infnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_okarray_b_334(self):
		"""Test fma as *infarray_infnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_none_a_335(self):
		"""Test fma as *infarray_infnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_none_b_335(self):
		"""Test fma as *infarray_infnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_okarray_a_336(self):
		"""Test fma as *infarray_infnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_okarray_b_336(self):
		"""Test fma as *infarray_infnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_none_a_337(self):
		"""Test fma as *infarray_infnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_none_b_337(self):
		"""Test fma as *infarray_infnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_okarray_a_338(self):
		"""Test fma as *infarray_infnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_okarray_b_338(self):
		"""Test fma as *infarray_infnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_none_a_339(self):
		"""Test fma as *infarray_infnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_none_b_339(self):
		"""Test fma as *infarray_infnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_okarray_a_340(self):
		"""Test fma as *infarray_infnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_okarray_b_340(self):
		"""Test fma as *infarray_infnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_none_a_341(self):
		"""Test fma as *infarray_infnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_none_b_341(self):
		"""Test fma as *infarray_infnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_okarray_a_342(self):
		"""Test fma as *infarray_infnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_okarray_b_342(self):
		"""Test fma as *infarray_infnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_none_a_343(self):
		"""Test fma as *infarray_infnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_none_b_343(self):
		"""Test fma as *infarray_infnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_okarray_a_344(self):
		"""Test fma as *infarray_ninfarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_okarray_b_344(self):
		"""Test fma as *infarray_ninfarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_none_a_345(self):
		"""Test fma as *infarray_ninfarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_none_b_345(self):
		"""Test fma as *infarray_ninfarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_okarray_a_346(self):
		"""Test fma as *infarray_ninfarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_okarray_b_346(self):
		"""Test fma as *infarray_ninfarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_none_a_347(self):
		"""Test fma as *infarray_ninfarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_none_b_347(self):
		"""Test fma as *infarray_ninfarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_okarray_a_348(self):
		"""Test fma as *infarray_ninfarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_okarray_b_348(self):
		"""Test fma as *infarray_ninfarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_none_a_349(self):
		"""Test fma as *infarray_ninfarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_none_b_349(self):
		"""Test fma as *infarray_ninfarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_okarray_a_350(self):
		"""Test fma as *infarray_ninfarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_okarray_b_350(self):
		"""Test fma as *infarray_ninfarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_none_a_351(self):
		"""Test fma as *infarray_ninfarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_none_b_351(self):
		"""Test fma as *infarray_ninfarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_okarray_a_352(self):
		"""Test fma as *infarray_ninfarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_okarray_b_352(self):
		"""Test fma as *infarray_ninfarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_none_a_353(self):
		"""Test fma as *infarray_ninfarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_none_b_353(self):
		"""Test fma as *infarray_ninfarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_okarray_a_354(self):
		"""Test fma as *infarray_ninfarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_okarray_b_354(self):
		"""Test fma as *infarray_ninfarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_none_a_355(self):
		"""Test fma as *infarray_ninfarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_none_b_355(self):
		"""Test fma as *infarray_ninfarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_okarray_a_356(self):
		"""Test fma as *infarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_okarray_b_356(self):
		"""Test fma as *infarray_ninfarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_none_a_357(self):
		"""Test fma as *infarray_ninfarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_none_b_357(self):
		"""Test fma as *infarray_ninfarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_okarray_a_358(self):
		"""Test fma as *infarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_okarray_b_358(self):
		"""Test fma as *infarray_ninfarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_none_a_359(self):
		"""Test fma as *infarray_ninfarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_none_b_359(self):
		"""Test fma as *infarray_ninfarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_okarray_a_360(self):
		"""Test fma as *infarray_ninfnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_okarray_b_360(self):
		"""Test fma as *infarray_ninfnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_none_a_361(self):
		"""Test fma as *infarray_ninfnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_none_b_361(self):
		"""Test fma as *infarray_ninfnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_okarray_a_362(self):
		"""Test fma as *infarray_ninfnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_okarray_b_362(self):
		"""Test fma as *infarray_ninfnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_none_a_363(self):
		"""Test fma as *infarray_ninfnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_none_b_363(self):
		"""Test fma as *infarray_ninfnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_okarray_a_364(self):
		"""Test fma as *infarray_ninfnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_okarray_b_364(self):
		"""Test fma as *infarray_ninfnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_none_a_365(self):
		"""Test fma as *infarray_ninfnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_none_b_365(self):
		"""Test fma as *infarray_ninfnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_okarray_a_366(self):
		"""Test fma as *infarray_ninfnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_okarray_b_366(self):
		"""Test fma as *infarray_ninfnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_none_a_367(self):
		"""Test fma as *infarray_ninfnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_none_b_367(self):
		"""Test fma as *infarray_ninfnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_okarray_a_368(self):
		"""Test fma as *infarray_ninfnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_okarray_b_368(self):
		"""Test fma as *infarray_ninfnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_none_a_369(self):
		"""Test fma as *infarray_ninfnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_none_b_369(self):
		"""Test fma as *infarray_ninfnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_okarray_a_370(self):
		"""Test fma as *infarray_ninfnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_okarray_b_370(self):
		"""Test fma as *infarray_ninfnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_none_a_371(self):
		"""Test fma as *infarray_ninfnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_none_b_371(self):
		"""Test fma as *infarray_ninfnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_okarray_a_372(self):
		"""Test fma as *infarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_okarray_b_372(self):
		"""Test fma as *infarray_ninfnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_none_a_373(self):
		"""Test fma as *infarray_ninfnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_none_b_373(self):
		"""Test fma as *infarray_ninfnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_okarray_a_374(self):
		"""Test fma as *infarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_okarray_b_374(self):
		"""Test fma as *infarray_ninfnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_none_a_375(self):
		"""Test fma as *infarray_ninfnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_none_b_375(self):
		"""Test fma as *infarray_ninfnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_okarray_a_376(self):
		"""Test fma as *ninfarray_okarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_okarray_b_376(self):
		"""Test fma as *ninfarray_okarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_none_a_377(self):
		"""Test fma as *ninfarray_okarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_none_b_377(self):
		"""Test fma as *ninfarray_okarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_okarray_a_378(self):
		"""Test fma as *ninfarray_okarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_okarray_b_378(self):
		"""Test fma as *ninfarray_okarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_none_a_379(self):
		"""Test fma as *ninfarray_okarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_none_b_379(self):
		"""Test fma as *ninfarray_okarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_okarray_a_380(self):
		"""Test fma as *ninfarray_okarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_okarray_b_380(self):
		"""Test fma as *ninfarray_okarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_none_a_381(self):
		"""Test fma as *ninfarray_okarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_none_b_381(self):
		"""Test fma as *ninfarray_okarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_okarray_a_382(self):
		"""Test fma as *ninfarray_okarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_okarray_b_382(self):
		"""Test fma as *ninfarray_okarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_none_a_383(self):
		"""Test fma as *ninfarray_okarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_none_b_383(self):
		"""Test fma as *ninfarray_okarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_okarray_a_384(self):
		"""Test fma as *ninfarray_okarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_okarray_b_384(self):
		"""Test fma as *ninfarray_okarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_none_a_385(self):
		"""Test fma as *ninfarray_okarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_none_b_385(self):
		"""Test fma as *ninfarray_okarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_okarray_a_386(self):
		"""Test fma as *ninfarray_okarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_okarray_b_386(self):
		"""Test fma as *ninfarray_okarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_none_a_387(self):
		"""Test fma as *ninfarray_okarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_none_b_387(self):
		"""Test fma as *ninfarray_okarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_okarray_a_388(self):
		"""Test fma as *ninfarray_okarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_okarray_b_388(self):
		"""Test fma as *ninfarray_okarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_none_a_389(self):
		"""Test fma as *ninfarray_okarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_none_b_389(self):
		"""Test fma as *ninfarray_okarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_okarray_a_390(self):
		"""Test fma as *ninfarray_okarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_okarray_b_390(self):
		"""Test fma as *ninfarray_okarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_none_a_391(self):
		"""Test fma as *ninfarray_okarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_none_b_391(self):
		"""Test fma as *ninfarray_okarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_okarray_a_392(self):
		"""Test fma as *ninfarray_oknum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_okarray_b_392(self):
		"""Test fma as *ninfarray_oknum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_none_a_393(self):
		"""Test fma as *ninfarray_oknum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_none_b_393(self):
		"""Test fma as *ninfarray_oknum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_okarray_a_394(self):
		"""Test fma as *ninfarray_oknum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_okarray_b_394(self):
		"""Test fma as *ninfarray_oknum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_none_a_395(self):
		"""Test fma as *ninfarray_oknum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_none_b_395(self):
		"""Test fma as *ninfarray_oknum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_okarray_a_396(self):
		"""Test fma as *ninfarray_oknum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_okarray_b_396(self):
		"""Test fma as *ninfarray_oknum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_none_a_397(self):
		"""Test fma as *ninfarray_oknum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_none_b_397(self):
		"""Test fma as *ninfarray_oknum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_okarray_a_398(self):
		"""Test fma as *ninfarray_oknum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_okarray_b_398(self):
		"""Test fma as *ninfarray_oknum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_none_a_399(self):
		"""Test fma as *ninfarray_oknum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_none_b_399(self):
		"""Test fma as *ninfarray_oknum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_okarray_a_400(self):
		"""Test fma as *ninfarray_oknum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_okarray_b_400(self):
		"""Test fma as *ninfarray_oknum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_none_a_401(self):
		"""Test fma as *ninfarray_oknum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_none_b_401(self):
		"""Test fma as *ninfarray_oknum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_okarray_a_402(self):
		"""Test fma as *ninfarray_oknum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_okarray_b_402(self):
		"""Test fma as *ninfarray_oknum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_none_a_403(self):
		"""Test fma as *ninfarray_oknum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_none_b_403(self):
		"""Test fma as *ninfarray_oknum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_okarray_a_404(self):
		"""Test fma as *ninfarray_oknum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_okarray_b_404(self):
		"""Test fma as *ninfarray_oknum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_none_a_405(self):
		"""Test fma as *ninfarray_oknum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_none_b_405(self):
		"""Test fma as *ninfarray_oknum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_okarray_a_406(self):
		"""Test fma as *ninfarray_oknum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_okarray_b_406(self):
		"""Test fma as *ninfarray_oknum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_none_a_407(self):
		"""Test fma as *ninfarray_oknum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_none_b_407(self):
		"""Test fma as *ninfarray_oknum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_okarray_a_408(self):
		"""Test fma as *ninfarray_nanarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_okarray_b_408(self):
		"""Test fma as *ninfarray_nanarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_none_a_409(self):
		"""Test fma as *ninfarray_nanarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_none_b_409(self):
		"""Test fma as *ninfarray_nanarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_okarray_a_410(self):
		"""Test fma as *ninfarray_nanarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_okarray_b_410(self):
		"""Test fma as *ninfarray_nanarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_none_a_411(self):
		"""Test fma as *ninfarray_nanarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_none_b_411(self):
		"""Test fma as *ninfarray_nanarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_okarray_a_412(self):
		"""Test fma as *ninfarray_nanarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_okarray_b_412(self):
		"""Test fma as *ninfarray_nanarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_none_a_413(self):
		"""Test fma as *ninfarray_nanarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_none_b_413(self):
		"""Test fma as *ninfarray_nanarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_okarray_a_414(self):
		"""Test fma as *ninfarray_nanarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_okarray_b_414(self):
		"""Test fma as *ninfarray_nanarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_none_a_415(self):
		"""Test fma as *ninfarray_nanarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_none_b_415(self):
		"""Test fma as *ninfarray_nanarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_okarray_a_416(self):
		"""Test fma as *ninfarray_nanarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_okarray_b_416(self):
		"""Test fma as *ninfarray_nanarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_none_a_417(self):
		"""Test fma as *ninfarray_nanarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_none_b_417(self):
		"""Test fma as *ninfarray_nanarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_okarray_a_418(self):
		"""Test fma as *ninfarray_nanarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_okarray_b_418(self):
		"""Test fma as *ninfarray_nanarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_none_a_419(self):
		"""Test fma as *ninfarray_nanarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_none_b_419(self):
		"""Test fma as *ninfarray_nanarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_okarray_a_420(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_okarray_b_420(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_none_a_421(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_none_b_421(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_okarray_a_422(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_okarray_b_422(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_none_a_423(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_none_b_423(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_okarray_a_424(self):
		"""Test fma as *ninfarray_nannum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_okarray_b_424(self):
		"""Test fma as *ninfarray_nannum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_none_a_425(self):
		"""Test fma as *ninfarray_nannum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_none_b_425(self):
		"""Test fma as *ninfarray_nannum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_okarray_a_426(self):
		"""Test fma as *ninfarray_nannum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_okarray_b_426(self):
		"""Test fma as *ninfarray_nannum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_none_a_427(self):
		"""Test fma as *ninfarray_nannum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_none_b_427(self):
		"""Test fma as *ninfarray_nannum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_okarray_a_428(self):
		"""Test fma as *ninfarray_nannum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_okarray_b_428(self):
		"""Test fma as *ninfarray_nannum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_none_a_429(self):
		"""Test fma as *ninfarray_nannum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_none_b_429(self):
		"""Test fma as *ninfarray_nannum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_okarray_a_430(self):
		"""Test fma as *ninfarray_nannum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_okarray_b_430(self):
		"""Test fma as *ninfarray_nannum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_none_a_431(self):
		"""Test fma as *ninfarray_nannum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_none_b_431(self):
		"""Test fma as *ninfarray_nannum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_okarray_a_432(self):
		"""Test fma as *ninfarray_nannum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_okarray_b_432(self):
		"""Test fma as *ninfarray_nannum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_none_a_433(self):
		"""Test fma as *ninfarray_nannum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_none_b_433(self):
		"""Test fma as *ninfarray_nannum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_okarray_a_434(self):
		"""Test fma as *ninfarray_nannum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_okarray_b_434(self):
		"""Test fma as *ninfarray_nannum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_none_a_435(self):
		"""Test fma as *ninfarray_nannum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_none_b_435(self):
		"""Test fma as *ninfarray_nannum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_okarray_a_436(self):
		"""Test fma as *ninfarray_nannum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_okarray_b_436(self):
		"""Test fma as *ninfarray_nannum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_none_a_437(self):
		"""Test fma as *ninfarray_nannum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_none_b_437(self):
		"""Test fma as *ninfarray_nannum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_okarray_a_438(self):
		"""Test fma as *ninfarray_nannum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_okarray_b_438(self):
		"""Test fma as *ninfarray_nannum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_none_a_439(self):
		"""Test fma as *ninfarray_nannum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_none_b_439(self):
		"""Test fma as *ninfarray_nannum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_okarray_a_440(self):
		"""Test fma as *ninfarray_infarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_okarray_b_440(self):
		"""Test fma as *ninfarray_infarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_none_a_441(self):
		"""Test fma as *ninfarray_infarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_none_b_441(self):
		"""Test fma as *ninfarray_infarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_okarray_a_442(self):
		"""Test fma as *ninfarray_infarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_okarray_b_442(self):
		"""Test fma as *ninfarray_infarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_none_a_443(self):
		"""Test fma as *ninfarray_infarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_none_b_443(self):
		"""Test fma as *ninfarray_infarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_okarray_a_444(self):
		"""Test fma as *ninfarray_infarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_okarray_b_444(self):
		"""Test fma as *ninfarray_infarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_none_a_445(self):
		"""Test fma as *ninfarray_infarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_none_b_445(self):
		"""Test fma as *ninfarray_infarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_okarray_a_446(self):
		"""Test fma as *ninfarray_infarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_okarray_b_446(self):
		"""Test fma as *ninfarray_infarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_none_a_447(self):
		"""Test fma as *ninfarray_infarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_none_b_447(self):
		"""Test fma as *ninfarray_infarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_okarray_a_448(self):
		"""Test fma as *ninfarray_infarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_okarray_b_448(self):
		"""Test fma as *ninfarray_infarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_none_a_449(self):
		"""Test fma as *ninfarray_infarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_none_b_449(self):
		"""Test fma as *ninfarray_infarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_okarray_a_450(self):
		"""Test fma as *ninfarray_infarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_okarray_b_450(self):
		"""Test fma as *ninfarray_infarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_none_a_451(self):
		"""Test fma as *ninfarray_infarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_none_b_451(self):
		"""Test fma as *ninfarray_infarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_okarray_a_452(self):
		"""Test fma as *ninfarray_infarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_okarray_b_452(self):
		"""Test fma as *ninfarray_infarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_none_a_453(self):
		"""Test fma as *ninfarray_infarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_none_b_453(self):
		"""Test fma as *ninfarray_infarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_okarray_a_454(self):
		"""Test fma as *ninfarray_infarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_okarray_b_454(self):
		"""Test fma as *ninfarray_infarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_none_a_455(self):
		"""Test fma as *ninfarray_infarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_none_b_455(self):
		"""Test fma as *ninfarray_infarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_okarray_a_456(self):
		"""Test fma as *ninfarray_infnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_okarray_b_456(self):
		"""Test fma as *ninfarray_infnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_none_a_457(self):
		"""Test fma as *ninfarray_infnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_none_b_457(self):
		"""Test fma as *ninfarray_infnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_okarray_a_458(self):
		"""Test fma as *ninfarray_infnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_okarray_b_458(self):
		"""Test fma as *ninfarray_infnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_none_a_459(self):
		"""Test fma as *ninfarray_infnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_none_b_459(self):
		"""Test fma as *ninfarray_infnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_okarray_a_460(self):
		"""Test fma as *ninfarray_infnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_okarray_b_460(self):
		"""Test fma as *ninfarray_infnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_none_a_461(self):
		"""Test fma as *ninfarray_infnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_none_b_461(self):
		"""Test fma as *ninfarray_infnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_okarray_a_462(self):
		"""Test fma as *ninfarray_infnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_okarray_b_462(self):
		"""Test fma as *ninfarray_infnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_none_a_463(self):
		"""Test fma as *ninfarray_infnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_none_b_463(self):
		"""Test fma as *ninfarray_infnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_okarray_a_464(self):
		"""Test fma as *ninfarray_infnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_okarray_b_464(self):
		"""Test fma as *ninfarray_infnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_none_a_465(self):
		"""Test fma as *ninfarray_infnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_none_b_465(self):
		"""Test fma as *ninfarray_infnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_okarray_a_466(self):
		"""Test fma as *ninfarray_infnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_okarray_b_466(self):
		"""Test fma as *ninfarray_infnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_none_a_467(self):
		"""Test fma as *ninfarray_infnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_none_b_467(self):
		"""Test fma as *ninfarray_infnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_okarray_a_468(self):
		"""Test fma as *ninfarray_infnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_okarray_b_468(self):
		"""Test fma as *ninfarray_infnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_none_a_469(self):
		"""Test fma as *ninfarray_infnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_none_b_469(self):
		"""Test fma as *ninfarray_infnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_okarray_a_470(self):
		"""Test fma as *ninfarray_infnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_okarray_b_470(self):
		"""Test fma as *ninfarray_infnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_none_a_471(self):
		"""Test fma as *ninfarray_infnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_none_b_471(self):
		"""Test fma as *ninfarray_infnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_okarray_a_472(self):
		"""Test fma as *ninfarray_ninfarray_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_okarray_b_472(self):
		"""Test fma as *ninfarray_ninfarray_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_none_a_473(self):
		"""Test fma as *ninfarray_ninfarray_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_none_b_473(self):
		"""Test fma as *ninfarray_ninfarray_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_okarray_a_474(self):
		"""Test fma as *ninfarray_ninfarray_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_okarray_b_474(self):
		"""Test fma as *ninfarray_ninfarray_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_none_a_475(self):
		"""Test fma as *ninfarray_ninfarray_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_none_b_475(self):
		"""Test fma as *ninfarray_ninfarray_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_okarray_a_476(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_okarray_b_476(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_none_a_477(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_none_b_477(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_okarray_a_478(self):
		"""Test fma as *ninfarray_ninfarray_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_okarray_b_478(self):
		"""Test fma as *ninfarray_ninfarray_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_none_a_479(self):
		"""Test fma as *ninfarray_ninfarray_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_none_b_479(self):
		"""Test fma as *ninfarray_ninfarray_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_okarray_a_480(self):
		"""Test fma as *ninfarray_ninfarray_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_okarray_b_480(self):
		"""Test fma as *ninfarray_ninfarray_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_none_a_481(self):
		"""Test fma as *ninfarray_ninfarray_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_none_b_481(self):
		"""Test fma as *ninfarray_ninfarray_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_okarray_a_482(self):
		"""Test fma as *ninfarray_ninfarray_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_okarray_b_482(self):
		"""Test fma as *ninfarray_ninfarray_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_none_a_483(self):
		"""Test fma as *ninfarray_ninfarray_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_none_b_483(self):
		"""Test fma as *ninfarray_ninfarray_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_okarray_a_484(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_okarray_b_484(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_none_a_485(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_none_b_485(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_okarray_a_486(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_okarray_b_486(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_none_a_487(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_none_b_487(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_okarray_a_488(self):
		"""Test fma as *ninfarray_ninfnum_okarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_okarray_b_488(self):
		"""Test fma as *ninfarray_ninfnum_okarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_none_a_489(self):
		"""Test fma as *ninfarray_ninfnum_okarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_none_b_489(self):
		"""Test fma as *ninfarray_ninfnum_okarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_okarray_a_490(self):
		"""Test fma as *ninfarray_ninfnum_oknum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_okarray_b_490(self):
		"""Test fma as *ninfarray_ninfnum_oknum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_none_a_491(self):
		"""Test fma as *ninfarray_ninfnum_oknum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_none_b_491(self):
		"""Test fma as *ninfarray_ninfnum_oknum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_okarray_a_492(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_okarray_b_492(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_none_a_493(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_none_b_493(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_okarray_a_494(self):
		"""Test fma as *ninfarray_ninfnum_nannum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_okarray_b_494(self):
		"""Test fma as *ninfarray_ninfnum_nannum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_none_a_495(self):
		"""Test fma as *ninfarray_ninfnum_nannum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_none_b_495(self):
		"""Test fma as *ninfarray_ninfnum_nannum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_okarray_a_496(self):
		"""Test fma as *ninfarray_ninfnum_infarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_okarray_b_496(self):
		"""Test fma as *ninfarray_ninfnum_infarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_none_a_497(self):
		"""Test fma as *ninfarray_ninfnum_infarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_none_b_497(self):
		"""Test fma as *ninfarray_ninfnum_infarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_okarray_a_498(self):
		"""Test fma as *ninfarray_ninfnum_infnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_okarray_b_498(self):
		"""Test fma as *ninfarray_ninfnum_infnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_none_a_499(self):
		"""Test fma as *ninfarray_ninfnum_infnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_none_b_499(self):
		"""Test fma as *ninfarray_ninfnum_infnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_okarray_a_500(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_okarray_b_500(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_none_a_501(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_none_b_501(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_okarray_a_502(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_okarray_b_502(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_okarray* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_none_a_503(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_none* with matherrors=True - Array code f.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_none_b_503(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_none* with error checking - Array code f.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsnone_d(unittest.TestCase):
	"""Test for basic general function operation using no options.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('d', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('d', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - no options - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					# No array limits used.

					arrayfunc.fma(datax, y, z)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - no options - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					# No array limits used.

					arrayfunc.fma(self.datax, y, z, self.dataout)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - no options - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(datax, self.datay, z)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - no options - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(self.datax, self.datay, z, self.dataout)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - no options - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(datax, y, self.dataz)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - no options - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - no options - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - no options - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsmaxlen_d(unittest.TestCase):
	"""Test for basic general function operation using maxlen option.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('d', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('d', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - maxlen option - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					expected = expected[0:self.limited] + list(self.datax)[self.limited:]

					arrayfunc.fma(datax, y, z, maxlen=self.limited)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - maxlen option - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

					arrayfunc.fma(self.datax, y, z, self.dataout, maxlen=self.limited)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - maxlen option - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, self.datay, z, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - maxlen option - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, self.datay, z, self.dataout, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - maxlen option - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, y, self.dataz, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - maxlen option - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout, maxlen=self.limited)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - maxlen option - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.datax)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, maxlen=self.limited)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - maxlen option - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout, maxlen=self.limited)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsmatherror_d(unittest.TestCase):
	"""Test for basic general function operation using matherror option.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('d', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('d', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - matherror option - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					# No array limits used.

					arrayfunc.fma(datax, y, z, matherrors=True)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - matherror option - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					# No array limits used.

					arrayfunc.fma(self.datax, y, z, self.dataout, matherrors=True)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - matherror option - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(datax, self.datay, z, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - matherror option - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				# No array limits used.

				arrayfunc.fma(self.datax, self.datay, z, self.dataout, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - matherror option - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(datax, y, self.dataz, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - matherror option - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				# No array limits used.

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - matherror option - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz, matherrors=True)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - matherror option - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		# No array limits used.

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout, matherrors=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_general_optionsmaxlenmatherrors_d(unittest.TestCase):
	"""Test for basic general function operation using maxlen and matherrors option.
	test_template_fma
	"""


	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		self.datax = array.array('d', [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
		self.datay = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), self.datax)])
		self.dataout = array.array('d', [0.0] * len(self.datax))

		self.limited = len(self.datax) // 2


	########################################################
	def test_fma_basic_arr_num_num_none_a1(self):
		"""Test fma as *arr_num_num_none* for basic function - maxlen and matherrors option - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):

					# Copy the array so the data doesn't get changed.
					datax = copy.copy(self.datax)

					expected = [x * y + z for x in datax]
					expected = expected[0:self.limited] + list(self.datax)[self.limited:]

					arrayfunc.fma(datax, y, z, maxlen=self.limited, matherrors=True)

					for dataoutitem, expecteditem in zip(datax, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_num_arr_a2(self):
		"""Test fma as *arr_num_num_arr* for basic function - maxlen and matherrors option - Array code d.
		"""
		for y in self.datay:
			for z in self.dataz:
				with self.subTest(msg='Failed with parameters', y = y, z = z):
					expected = [x * y + z for x in self.datax]
					expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

					arrayfunc.fma(self.datax, y, z, self.dataout, maxlen=self.limited, matherrors=True)

					for dataoutitem, expecteditem in zip(self.dataout, expected):
						# The behavour of assertEqual is modified by addTypeEqualityFunc.
						self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_none_b1(self):
		"""Test fma as *arr_arr_num_none* for basic function - maxlen and matherrors option - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,y in zip(datax, self.datay)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, self.datay, z, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_num_arr_b2(self):
		"""Test fma as *arr_arr_num_arr* for basic function - maxlen and matherrors option - Array code d.
		"""
		for z in self.dataz:
			with self.subTest(msg='Failed with parameters', z = z):
				expected = [x * y + z for x,y in zip(self.datax, self.datay)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, self.datay, z, self.dataout, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_none_c1(self):
		"""Test fma as *arr_num_arr_none* for basic function - maxlen and matherrors option - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):

				# Copy the array so the data doesn't get changed.
				datax = copy.copy(self.datax)

				expected = [x * y + z for x,z in zip(datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.datax)[self.limited:]

				arrayfunc.fma(datax, y, self.dataz, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(datax, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_num_arr_arr_c2(self):
		"""Test fma as *arr_num_arr_arr* for basic function - maxlen and matherrors option - Array code d.
		"""
		for y in self.datay:
			with self.subTest(msg='Failed with parameters', y = y):
				expected = [x * y + z for x,z in zip(self.datax, self.dataz)]
				expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

				arrayfunc.fma(self.datax, y, self.dataz, self.dataout, maxlen=self.limited, matherrors=True)

				for dataoutitem, expecteditem in zip(self.dataout, expected):
					# The behavour of assertEqual is modified by addTypeEqualityFunc.
					self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_none_d1(self):
		"""Test fma as *arr_arr_arr_none* for basic function - maxlen and matherrors option - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.datax)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, maxlen=self.limited, matherrors=True)

		for dataoutitem, expecteditem in zip(self.datax, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_basic_arr_arr_arr_arr_d2(self):
		"""Test fma as *arr_arr_arr_arr* for basic function - maxlen and matherrors option - Array code d.
		"""
		expected = [x * y + z for x,y,z in zip(self.datax, self.datay, self.dataz)]
		expected = expected[0:self.limited] + list(self.dataout)[self.limited:]

		arrayfunc.fma(self.datax, self.datay, self.dataz, self.dataout, maxlen=self.limited, matherrors=True)

		for dataoutitem, expecteditem in zip(self.dataout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################



##############################################################################
class fma_param_errors_types_d(unittest.TestCase):
	"""Test for invalid parameters.
	param_int_invalid_template
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		xdata = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]
		arraysize = len(xdata)

		# Floating point test data.
		self.floatarrayx = array.array('d', xdata)
		self.floatarrayy = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.floatarrayz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.floatarrayout = array.array('d', itertools.repeat(0.0, arraysize))

		# Take an arbitrary value from each data array for when we need only a single value.
		self.floatnumx = self.floatarrayx[1]
		self.floatnumy = self.floatarrayy[1]
		self.floatnumz = self.floatarrayz[1]
		self.floatnumout = 0.0

		# Integer test data.
		self.intarrayx = array.array('i', [int(x) for x in self.floatarrayx])
		self.intarrayy = array.array('i', [int(x) for x in self.floatarrayy])
		self.intarrayz = array.array('i', [int(x) for x in self.floatarrayz])
		self.intarrayout = array.array('i', [int(x) for x in self.floatarrayout])
		self.intarrayout = array.array('i', [0] * arraysize)

		# Take an arbitrary value from each data array for when we need only a single value.
		self.intnumx = self.intarrayx[1]
		self.intnumy = self.intarrayy[1]
		self.intnumz = self.intarrayz[1]
		self.intnumout = 0

		# Bytes test data.
		self.bytesx = bytes([abs(int(x)) for x in self.floatarrayx])
		self.bytesy = bytes([abs(int(x)) for x in self.floatarrayy])
		self.bytesz = bytes([abs(int(x)) for x in self.floatarrayz])
		self.bytesout = bytes([abs(int(x)) for x in self.floatarrayout])

		# String data.
		self.strx = ''.join([str(x) for x in self.bytesx])
		self.stry = ''.join([str(x) for x in self.bytesy])
		self.strz = ''.join([str(x) for x in self.bytesz])
		self.strout = ''.join([str(x) for x in self.bytesout])



	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_floatnum_0(self):
		"""Test fma as *floatarray_floatarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_intarray_1(self):
		"""Test fma as *floatarray_floatarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_intnum_2(self):
		"""Test fma as *floatarray_floatarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_bytes_3(self):
		"""Test fma as *floatarray_floatarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatarray_str_4(self):
		"""Test fma as *floatarray_floatarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_floatnum_5(self):
		"""Test fma as *floatarray_floatarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_intarray_6(self):
		"""Test fma as *floatarray_floatarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_intnum_7(self):
		"""Test fma as *floatarray_floatarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_bytes_8(self):
		"""Test fma as *floatarray_floatarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_floatnum_str_9(self):
		"""Test fma as *floatarray_floatarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_floatarray_10(self):
		"""Test fma as *floatarray_floatarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_floatnum_11(self):
		"""Test fma as *floatarray_floatarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_intarray_12(self):
		"""Test fma as *floatarray_floatarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_intnum_13(self):
		"""Test fma as *floatarray_floatarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_bytes_14(self):
		"""Test fma as *floatarray_floatarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_str_15(self):
		"""Test fma as *floatarray_floatarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intarray_none_16(self):
		"""Test fma as *floatarray_floatarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_floatarray_17(self):
		"""Test fma as *floatarray_floatarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_floatnum_18(self):
		"""Test fma as *floatarray_floatarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_intarray_19(self):
		"""Test fma as *floatarray_floatarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_intnum_20(self):
		"""Test fma as *floatarray_floatarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_bytes_21(self):
		"""Test fma as *floatarray_floatarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_str_22(self):
		"""Test fma as *floatarray_floatarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_intnum_none_23(self):
		"""Test fma as *floatarray_floatarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_floatarray_24(self):
		"""Test fma as *floatarray_floatarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_floatnum_25(self):
		"""Test fma as *floatarray_floatarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_intarray_26(self):
		"""Test fma as *floatarray_floatarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_intnum_27(self):
		"""Test fma as *floatarray_floatarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_bytes_28(self):
		"""Test fma as *floatarray_floatarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_str_29(self):
		"""Test fma as *floatarray_floatarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_bytes_none_30(self):
		"""Test fma as *floatarray_floatarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_floatarray_31(self):
		"""Test fma as *floatarray_floatarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_floatnum_32(self):
		"""Test fma as *floatarray_floatarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_intarray_33(self):
		"""Test fma as *floatarray_floatarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_intnum_34(self):
		"""Test fma as *floatarray_floatarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_bytes_35(self):
		"""Test fma as *floatarray_floatarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_str_36(self):
		"""Test fma as *floatarray_floatarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatarray_str_none_37(self):
		"""Test fma as *floatarray_floatarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_floatnum_38(self):
		"""Test fma as *floatarray_floatnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_intarray_39(self):
		"""Test fma as *floatarray_floatnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_intnum_40(self):
		"""Test fma as *floatarray_floatnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_bytes_41(self):
		"""Test fma as *floatarray_floatnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatarray_str_42(self):
		"""Test fma as *floatarray_floatnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_floatnum_43(self):
		"""Test fma as *floatarray_floatnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_intarray_44(self):
		"""Test fma as *floatarray_floatnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_intnum_45(self):
		"""Test fma as *floatarray_floatnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_bytes_46(self):
		"""Test fma as *floatarray_floatnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_floatnum_str_47(self):
		"""Test fma as *floatarray_floatnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_floatarray_48(self):
		"""Test fma as *floatarray_floatnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_floatnum_49(self):
		"""Test fma as *floatarray_floatnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_intarray_50(self):
		"""Test fma as *floatarray_floatnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_intnum_51(self):
		"""Test fma as *floatarray_floatnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_bytes_52(self):
		"""Test fma as *floatarray_floatnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_str_53(self):
		"""Test fma as *floatarray_floatnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intarray_none_54(self):
		"""Test fma as *floatarray_floatnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_floatarray_55(self):
		"""Test fma as *floatarray_floatnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_floatnum_56(self):
		"""Test fma as *floatarray_floatnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_intarray_57(self):
		"""Test fma as *floatarray_floatnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_intnum_58(self):
		"""Test fma as *floatarray_floatnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_bytes_59(self):
		"""Test fma as *floatarray_floatnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_str_60(self):
		"""Test fma as *floatarray_floatnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_intnum_none_61(self):
		"""Test fma as *floatarray_floatnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_floatarray_62(self):
		"""Test fma as *floatarray_floatnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_floatnum_63(self):
		"""Test fma as *floatarray_floatnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_intarray_64(self):
		"""Test fma as *floatarray_floatnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_intnum_65(self):
		"""Test fma as *floatarray_floatnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_bytes_66(self):
		"""Test fma as *floatarray_floatnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_str_67(self):
		"""Test fma as *floatarray_floatnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_bytes_none_68(self):
		"""Test fma as *floatarray_floatnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_floatarray_69(self):
		"""Test fma as *floatarray_floatnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_floatnum_70(self):
		"""Test fma as *floatarray_floatnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_intarray_71(self):
		"""Test fma as *floatarray_floatnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_intnum_72(self):
		"""Test fma as *floatarray_floatnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_bytes_73(self):
		"""Test fma as *floatarray_floatnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_str_74(self):
		"""Test fma as *floatarray_floatnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_floatnum_str_none_75(self):
		"""Test fma as *floatarray_floatnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_floatarray_76(self):
		"""Test fma as *floatarray_intarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_floatnum_77(self):
		"""Test fma as *floatarray_intarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_intarray_78(self):
		"""Test fma as *floatarray_intarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_intnum_79(self):
		"""Test fma as *floatarray_intarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_bytes_80(self):
		"""Test fma as *floatarray_intarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_str_81(self):
		"""Test fma as *floatarray_intarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatarray_none_82(self):
		"""Test fma as *floatarray_intarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_floatarray_83(self):
		"""Test fma as *floatarray_intarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_floatnum_84(self):
		"""Test fma as *floatarray_intarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_intarray_85(self):
		"""Test fma as *floatarray_intarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_intnum_86(self):
		"""Test fma as *floatarray_intarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_bytes_87(self):
		"""Test fma as *floatarray_intarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_str_88(self):
		"""Test fma as *floatarray_intarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_floatnum_none_89(self):
		"""Test fma as *floatarray_intarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_floatarray_90(self):
		"""Test fma as *floatarray_intarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_floatnum_91(self):
		"""Test fma as *floatarray_intarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_intarray_92(self):
		"""Test fma as *floatarray_intarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_intnum_93(self):
		"""Test fma as *floatarray_intarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_bytes_94(self):
		"""Test fma as *floatarray_intarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_str_95(self):
		"""Test fma as *floatarray_intarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intarray_none_96(self):
		"""Test fma as *floatarray_intarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_floatarray_97(self):
		"""Test fma as *floatarray_intarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_floatnum_98(self):
		"""Test fma as *floatarray_intarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_intarray_99(self):
		"""Test fma as *floatarray_intarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_intnum_100(self):
		"""Test fma as *floatarray_intarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_bytes_101(self):
		"""Test fma as *floatarray_intarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_str_102(self):
		"""Test fma as *floatarray_intarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_intnum_none_103(self):
		"""Test fma as *floatarray_intarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_floatarray_104(self):
		"""Test fma as *floatarray_intarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_floatnum_105(self):
		"""Test fma as *floatarray_intarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_intarray_106(self):
		"""Test fma as *floatarray_intarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_intnum_107(self):
		"""Test fma as *floatarray_intarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_bytes_108(self):
		"""Test fma as *floatarray_intarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_str_109(self):
		"""Test fma as *floatarray_intarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_bytes_none_110(self):
		"""Test fma as *floatarray_intarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_floatarray_111(self):
		"""Test fma as *floatarray_intarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_floatnum_112(self):
		"""Test fma as *floatarray_intarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_intarray_113(self):
		"""Test fma as *floatarray_intarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_intnum_114(self):
		"""Test fma as *floatarray_intarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_bytes_115(self):
		"""Test fma as *floatarray_intarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_str_116(self):
		"""Test fma as *floatarray_intarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intarray_str_none_117(self):
		"""Test fma as *floatarray_intarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_floatarray_118(self):
		"""Test fma as *floatarray_intnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_floatnum_119(self):
		"""Test fma as *floatarray_intnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_intarray_120(self):
		"""Test fma as *floatarray_intnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_intnum_121(self):
		"""Test fma as *floatarray_intnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_bytes_122(self):
		"""Test fma as *floatarray_intnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_str_123(self):
		"""Test fma as *floatarray_intnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatarray_none_124(self):
		"""Test fma as *floatarray_intnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_floatarray_125(self):
		"""Test fma as *floatarray_intnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_floatnum_126(self):
		"""Test fma as *floatarray_intnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_intarray_127(self):
		"""Test fma as *floatarray_intnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_intnum_128(self):
		"""Test fma as *floatarray_intnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_bytes_129(self):
		"""Test fma as *floatarray_intnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_str_130(self):
		"""Test fma as *floatarray_intnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_floatnum_none_131(self):
		"""Test fma as *floatarray_intnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_floatarray_132(self):
		"""Test fma as *floatarray_intnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_floatnum_133(self):
		"""Test fma as *floatarray_intnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_intarray_134(self):
		"""Test fma as *floatarray_intnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_intnum_135(self):
		"""Test fma as *floatarray_intnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_bytes_136(self):
		"""Test fma as *floatarray_intnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_str_137(self):
		"""Test fma as *floatarray_intnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intarray_none_138(self):
		"""Test fma as *floatarray_intnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_floatarray_139(self):
		"""Test fma as *floatarray_intnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_floatnum_140(self):
		"""Test fma as *floatarray_intnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_intarray_141(self):
		"""Test fma as *floatarray_intnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_intnum_142(self):
		"""Test fma as *floatarray_intnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_bytes_143(self):
		"""Test fma as *floatarray_intnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_str_144(self):
		"""Test fma as *floatarray_intnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_intnum_none_145(self):
		"""Test fma as *floatarray_intnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_floatarray_146(self):
		"""Test fma as *floatarray_intnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_floatnum_147(self):
		"""Test fma as *floatarray_intnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_intarray_148(self):
		"""Test fma as *floatarray_intnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_intnum_149(self):
		"""Test fma as *floatarray_intnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_bytes_150(self):
		"""Test fma as *floatarray_intnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_str_151(self):
		"""Test fma as *floatarray_intnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_bytes_none_152(self):
		"""Test fma as *floatarray_intnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_floatarray_153(self):
		"""Test fma as *floatarray_intnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_floatnum_154(self):
		"""Test fma as *floatarray_intnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_intarray_155(self):
		"""Test fma as *floatarray_intnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_intnum_156(self):
		"""Test fma as *floatarray_intnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_bytes_157(self):
		"""Test fma as *floatarray_intnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_str_158(self):
		"""Test fma as *floatarray_intnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_intnum_str_none_159(self):
		"""Test fma as *floatarray_intnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_floatarray_160(self):
		"""Test fma as *floatarray_bytes_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_floatnum_161(self):
		"""Test fma as *floatarray_bytes_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_intarray_162(self):
		"""Test fma as *floatarray_bytes_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_intnum_163(self):
		"""Test fma as *floatarray_bytes_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_bytes_164(self):
		"""Test fma as *floatarray_bytes_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_str_165(self):
		"""Test fma as *floatarray_bytes_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatarray_none_166(self):
		"""Test fma as *floatarray_bytes_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_floatarray_167(self):
		"""Test fma as *floatarray_bytes_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_floatnum_168(self):
		"""Test fma as *floatarray_bytes_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_intarray_169(self):
		"""Test fma as *floatarray_bytes_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_intnum_170(self):
		"""Test fma as *floatarray_bytes_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_bytes_171(self):
		"""Test fma as *floatarray_bytes_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_str_172(self):
		"""Test fma as *floatarray_bytes_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_floatnum_none_173(self):
		"""Test fma as *floatarray_bytes_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_floatarray_174(self):
		"""Test fma as *floatarray_bytes_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_floatnum_175(self):
		"""Test fma as *floatarray_bytes_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_intarray_176(self):
		"""Test fma as *floatarray_bytes_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_intnum_177(self):
		"""Test fma as *floatarray_bytes_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_bytes_178(self):
		"""Test fma as *floatarray_bytes_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_str_179(self):
		"""Test fma as *floatarray_bytes_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intarray_none_180(self):
		"""Test fma as *floatarray_bytes_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_floatarray_181(self):
		"""Test fma as *floatarray_bytes_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_floatnum_182(self):
		"""Test fma as *floatarray_bytes_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_intarray_183(self):
		"""Test fma as *floatarray_bytes_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_intnum_184(self):
		"""Test fma as *floatarray_bytes_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_bytes_185(self):
		"""Test fma as *floatarray_bytes_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_str_186(self):
		"""Test fma as *floatarray_bytes_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_intnum_none_187(self):
		"""Test fma as *floatarray_bytes_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_floatarray_188(self):
		"""Test fma as *floatarray_bytes_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_floatnum_189(self):
		"""Test fma as *floatarray_bytes_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_intarray_190(self):
		"""Test fma as *floatarray_bytes_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_intnum_191(self):
		"""Test fma as *floatarray_bytes_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_bytes_192(self):
		"""Test fma as *floatarray_bytes_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_str_193(self):
		"""Test fma as *floatarray_bytes_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_bytes_none_194(self):
		"""Test fma as *floatarray_bytes_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_floatarray_195(self):
		"""Test fma as *floatarray_bytes_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_floatnum_196(self):
		"""Test fma as *floatarray_bytes_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_intarray_197(self):
		"""Test fma as *floatarray_bytes_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_intnum_198(self):
		"""Test fma as *floatarray_bytes_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_bytes_199(self):
		"""Test fma as *floatarray_bytes_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_str_200(self):
		"""Test fma as *floatarray_bytes_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_bytes_str_none_201(self):
		"""Test fma as *floatarray_bytes_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_floatarray_202(self):
		"""Test fma as *floatarray_str_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_floatnum_203(self):
		"""Test fma as *floatarray_str_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_intarray_204(self):
		"""Test fma as *floatarray_str_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_intnum_205(self):
		"""Test fma as *floatarray_str_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_bytes_206(self):
		"""Test fma as *floatarray_str_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_str_207(self):
		"""Test fma as *floatarray_str_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatarray_none_208(self):
		"""Test fma as *floatarray_str_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_floatarray_209(self):
		"""Test fma as *floatarray_str_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_floatnum_210(self):
		"""Test fma as *floatarray_str_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_intarray_211(self):
		"""Test fma as *floatarray_str_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_intnum_212(self):
		"""Test fma as *floatarray_str_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_bytes_213(self):
		"""Test fma as *floatarray_str_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_str_214(self):
		"""Test fma as *floatarray_str_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_floatnum_none_215(self):
		"""Test fma as *floatarray_str_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_floatarray_216(self):
		"""Test fma as *floatarray_str_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_floatnum_217(self):
		"""Test fma as *floatarray_str_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_intarray_218(self):
		"""Test fma as *floatarray_str_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_intnum_219(self):
		"""Test fma as *floatarray_str_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_bytes_220(self):
		"""Test fma as *floatarray_str_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_str_221(self):
		"""Test fma as *floatarray_str_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intarray_none_222(self):
		"""Test fma as *floatarray_str_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_floatarray_223(self):
		"""Test fma as *floatarray_str_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_floatnum_224(self):
		"""Test fma as *floatarray_str_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_intarray_225(self):
		"""Test fma as *floatarray_str_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_intnum_226(self):
		"""Test fma as *floatarray_str_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_bytes_227(self):
		"""Test fma as *floatarray_str_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_str_228(self):
		"""Test fma as *floatarray_str_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_intnum_none_229(self):
		"""Test fma as *floatarray_str_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_floatarray_230(self):
		"""Test fma as *floatarray_str_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_floatnum_231(self):
		"""Test fma as *floatarray_str_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_intarray_232(self):
		"""Test fma as *floatarray_str_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_intnum_233(self):
		"""Test fma as *floatarray_str_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_bytes_234(self):
		"""Test fma as *floatarray_str_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_str_235(self):
		"""Test fma as *floatarray_str_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_bytes_none_236(self):
		"""Test fma as *floatarray_str_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_floatarray_237(self):
		"""Test fma as *floatarray_str_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_floatnum_238(self):
		"""Test fma as *floatarray_str_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_intarray_239(self):
		"""Test fma as *floatarray_str_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_intnum_240(self):
		"""Test fma as *floatarray_str_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_bytes_241(self):
		"""Test fma as *floatarray_str_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_str_242(self):
		"""Test fma as *floatarray_str_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatarray_str_str_none_243(self):
		"""Test fma as *floatarray_str_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatarrayx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_floatarray_244(self):
		"""Test fma as *floatnum_floatarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_floatnum_245(self):
		"""Test fma as *floatnum_floatarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_intarray_246(self):
		"""Test fma as *floatnum_floatarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_intnum_247(self):
		"""Test fma as *floatnum_floatarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_bytes_248(self):
		"""Test fma as *floatnum_floatarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_str_249(self):
		"""Test fma as *floatnum_floatarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatarray_none_250(self):
		"""Test fma as *floatnum_floatarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_floatarray_251(self):
		"""Test fma as *floatnum_floatarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_floatnum_252(self):
		"""Test fma as *floatnum_floatarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_intarray_253(self):
		"""Test fma as *floatnum_floatarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_intnum_254(self):
		"""Test fma as *floatnum_floatarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_bytes_255(self):
		"""Test fma as *floatnum_floatarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_str_256(self):
		"""Test fma as *floatnum_floatarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_floatnum_none_257(self):
		"""Test fma as *floatnum_floatarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_floatarray_258(self):
		"""Test fma as *floatnum_floatarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_floatnum_259(self):
		"""Test fma as *floatnum_floatarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_intarray_260(self):
		"""Test fma as *floatnum_floatarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_intnum_261(self):
		"""Test fma as *floatnum_floatarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_bytes_262(self):
		"""Test fma as *floatnum_floatarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_str_263(self):
		"""Test fma as *floatnum_floatarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intarray_none_264(self):
		"""Test fma as *floatnum_floatarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_floatarray_265(self):
		"""Test fma as *floatnum_floatarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_floatnum_266(self):
		"""Test fma as *floatnum_floatarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_intarray_267(self):
		"""Test fma as *floatnum_floatarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_intnum_268(self):
		"""Test fma as *floatnum_floatarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_bytes_269(self):
		"""Test fma as *floatnum_floatarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_str_270(self):
		"""Test fma as *floatnum_floatarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_intnum_none_271(self):
		"""Test fma as *floatnum_floatarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_floatarray_272(self):
		"""Test fma as *floatnum_floatarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_floatnum_273(self):
		"""Test fma as *floatnum_floatarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_intarray_274(self):
		"""Test fma as *floatnum_floatarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_intnum_275(self):
		"""Test fma as *floatnum_floatarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_bytes_276(self):
		"""Test fma as *floatnum_floatarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_str_277(self):
		"""Test fma as *floatnum_floatarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_bytes_none_278(self):
		"""Test fma as *floatnum_floatarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_floatarray_279(self):
		"""Test fma as *floatnum_floatarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_floatnum_280(self):
		"""Test fma as *floatnum_floatarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_intarray_281(self):
		"""Test fma as *floatnum_floatarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_intnum_282(self):
		"""Test fma as *floatnum_floatarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_bytes_283(self):
		"""Test fma as *floatnum_floatarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_str_284(self):
		"""Test fma as *floatnum_floatarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatarray_str_none_285(self):
		"""Test fma as *floatnum_floatarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_floatarray_286(self):
		"""Test fma as *floatnum_floatnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_floatnum_287(self):
		"""Test fma as *floatnum_floatnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_intarray_288(self):
		"""Test fma as *floatnum_floatnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_intnum_289(self):
		"""Test fma as *floatnum_floatnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_bytes_290(self):
		"""Test fma as *floatnum_floatnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_str_291(self):
		"""Test fma as *floatnum_floatnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatarray_none_292(self):
		"""Test fma as *floatnum_floatnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_floatarray_293(self):
		"""Test fma as *floatnum_floatnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_floatnum_294(self):
		"""Test fma as *floatnum_floatnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_intarray_295(self):
		"""Test fma as *floatnum_floatnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_intnum_296(self):
		"""Test fma as *floatnum_floatnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_bytes_297(self):
		"""Test fma as *floatnum_floatnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_str_298(self):
		"""Test fma as *floatnum_floatnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_floatnum_none_299(self):
		"""Test fma as *floatnum_floatnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_floatarray_300(self):
		"""Test fma as *floatnum_floatnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_floatnum_301(self):
		"""Test fma as *floatnum_floatnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_intarray_302(self):
		"""Test fma as *floatnum_floatnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_intnum_303(self):
		"""Test fma as *floatnum_floatnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_bytes_304(self):
		"""Test fma as *floatnum_floatnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_str_305(self):
		"""Test fma as *floatnum_floatnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intarray_none_306(self):
		"""Test fma as *floatnum_floatnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_floatarray_307(self):
		"""Test fma as *floatnum_floatnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_floatnum_308(self):
		"""Test fma as *floatnum_floatnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_intarray_309(self):
		"""Test fma as *floatnum_floatnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_intnum_310(self):
		"""Test fma as *floatnum_floatnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_bytes_311(self):
		"""Test fma as *floatnum_floatnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_str_312(self):
		"""Test fma as *floatnum_floatnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_intnum_none_313(self):
		"""Test fma as *floatnum_floatnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_floatarray_314(self):
		"""Test fma as *floatnum_floatnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_floatnum_315(self):
		"""Test fma as *floatnum_floatnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_intarray_316(self):
		"""Test fma as *floatnum_floatnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_intnum_317(self):
		"""Test fma as *floatnum_floatnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_bytes_318(self):
		"""Test fma as *floatnum_floatnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_str_319(self):
		"""Test fma as *floatnum_floatnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_bytes_none_320(self):
		"""Test fma as *floatnum_floatnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_floatarray_321(self):
		"""Test fma as *floatnum_floatnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_floatnum_322(self):
		"""Test fma as *floatnum_floatnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_intarray_323(self):
		"""Test fma as *floatnum_floatnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_intnum_324(self):
		"""Test fma as *floatnum_floatnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_bytes_325(self):
		"""Test fma as *floatnum_floatnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_str_326(self):
		"""Test fma as *floatnum_floatnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_floatnum_str_none_327(self):
		"""Test fma as *floatnum_floatnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_floatarray_328(self):
		"""Test fma as *floatnum_intarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_floatnum_329(self):
		"""Test fma as *floatnum_intarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_intarray_330(self):
		"""Test fma as *floatnum_intarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_intnum_331(self):
		"""Test fma as *floatnum_intarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_bytes_332(self):
		"""Test fma as *floatnum_intarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_str_333(self):
		"""Test fma as *floatnum_intarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatarray_none_334(self):
		"""Test fma as *floatnum_intarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_floatarray_335(self):
		"""Test fma as *floatnum_intarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_floatnum_336(self):
		"""Test fma as *floatnum_intarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_intarray_337(self):
		"""Test fma as *floatnum_intarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_intnum_338(self):
		"""Test fma as *floatnum_intarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_bytes_339(self):
		"""Test fma as *floatnum_intarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_str_340(self):
		"""Test fma as *floatnum_intarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_floatnum_none_341(self):
		"""Test fma as *floatnum_intarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_floatarray_342(self):
		"""Test fma as *floatnum_intarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_floatnum_343(self):
		"""Test fma as *floatnum_intarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_intarray_344(self):
		"""Test fma as *floatnum_intarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_intnum_345(self):
		"""Test fma as *floatnum_intarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_bytes_346(self):
		"""Test fma as *floatnum_intarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_str_347(self):
		"""Test fma as *floatnum_intarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intarray_none_348(self):
		"""Test fma as *floatnum_intarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_floatarray_349(self):
		"""Test fma as *floatnum_intarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_floatnum_350(self):
		"""Test fma as *floatnum_intarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_intarray_351(self):
		"""Test fma as *floatnum_intarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_intnum_352(self):
		"""Test fma as *floatnum_intarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_bytes_353(self):
		"""Test fma as *floatnum_intarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_str_354(self):
		"""Test fma as *floatnum_intarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_intnum_none_355(self):
		"""Test fma as *floatnum_intarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_floatarray_356(self):
		"""Test fma as *floatnum_intarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_floatnum_357(self):
		"""Test fma as *floatnum_intarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_intarray_358(self):
		"""Test fma as *floatnum_intarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_intnum_359(self):
		"""Test fma as *floatnum_intarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_bytes_360(self):
		"""Test fma as *floatnum_intarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_str_361(self):
		"""Test fma as *floatnum_intarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_bytes_none_362(self):
		"""Test fma as *floatnum_intarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_floatarray_363(self):
		"""Test fma as *floatnum_intarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_floatnum_364(self):
		"""Test fma as *floatnum_intarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_intarray_365(self):
		"""Test fma as *floatnum_intarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_intnum_366(self):
		"""Test fma as *floatnum_intarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_bytes_367(self):
		"""Test fma as *floatnum_intarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_str_368(self):
		"""Test fma as *floatnum_intarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intarray_str_none_369(self):
		"""Test fma as *floatnum_intarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_floatarray_370(self):
		"""Test fma as *floatnum_intnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_floatnum_371(self):
		"""Test fma as *floatnum_intnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_intarray_372(self):
		"""Test fma as *floatnum_intnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_intnum_373(self):
		"""Test fma as *floatnum_intnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_bytes_374(self):
		"""Test fma as *floatnum_intnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_str_375(self):
		"""Test fma as *floatnum_intnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatarray_none_376(self):
		"""Test fma as *floatnum_intnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_floatarray_377(self):
		"""Test fma as *floatnum_intnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_floatnum_378(self):
		"""Test fma as *floatnum_intnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_intarray_379(self):
		"""Test fma as *floatnum_intnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_intnum_380(self):
		"""Test fma as *floatnum_intnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_bytes_381(self):
		"""Test fma as *floatnum_intnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_str_382(self):
		"""Test fma as *floatnum_intnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_floatnum_none_383(self):
		"""Test fma as *floatnum_intnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_floatarray_384(self):
		"""Test fma as *floatnum_intnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_floatnum_385(self):
		"""Test fma as *floatnum_intnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_intarray_386(self):
		"""Test fma as *floatnum_intnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_intnum_387(self):
		"""Test fma as *floatnum_intnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_bytes_388(self):
		"""Test fma as *floatnum_intnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_str_389(self):
		"""Test fma as *floatnum_intnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intarray_none_390(self):
		"""Test fma as *floatnum_intnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_floatarray_391(self):
		"""Test fma as *floatnum_intnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_floatnum_392(self):
		"""Test fma as *floatnum_intnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_intarray_393(self):
		"""Test fma as *floatnum_intnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_intnum_394(self):
		"""Test fma as *floatnum_intnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_bytes_395(self):
		"""Test fma as *floatnum_intnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_str_396(self):
		"""Test fma as *floatnum_intnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_intnum_none_397(self):
		"""Test fma as *floatnum_intnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_floatarray_398(self):
		"""Test fma as *floatnum_intnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_floatnum_399(self):
		"""Test fma as *floatnum_intnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_intarray_400(self):
		"""Test fma as *floatnum_intnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_intnum_401(self):
		"""Test fma as *floatnum_intnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_bytes_402(self):
		"""Test fma as *floatnum_intnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_str_403(self):
		"""Test fma as *floatnum_intnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_bytes_none_404(self):
		"""Test fma as *floatnum_intnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_floatarray_405(self):
		"""Test fma as *floatnum_intnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_floatnum_406(self):
		"""Test fma as *floatnum_intnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_intarray_407(self):
		"""Test fma as *floatnum_intnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_intnum_408(self):
		"""Test fma as *floatnum_intnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_bytes_409(self):
		"""Test fma as *floatnum_intnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_str_410(self):
		"""Test fma as *floatnum_intnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_intnum_str_none_411(self):
		"""Test fma as *floatnum_intnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_floatarray_412(self):
		"""Test fma as *floatnum_bytes_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_floatnum_413(self):
		"""Test fma as *floatnum_bytes_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_intarray_414(self):
		"""Test fma as *floatnum_bytes_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_intnum_415(self):
		"""Test fma as *floatnum_bytes_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_bytes_416(self):
		"""Test fma as *floatnum_bytes_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_str_417(self):
		"""Test fma as *floatnum_bytes_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatarray_none_418(self):
		"""Test fma as *floatnum_bytes_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_floatarray_419(self):
		"""Test fma as *floatnum_bytes_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_floatnum_420(self):
		"""Test fma as *floatnum_bytes_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_intarray_421(self):
		"""Test fma as *floatnum_bytes_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_intnum_422(self):
		"""Test fma as *floatnum_bytes_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_bytes_423(self):
		"""Test fma as *floatnum_bytes_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_str_424(self):
		"""Test fma as *floatnum_bytes_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_floatnum_none_425(self):
		"""Test fma as *floatnum_bytes_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_floatarray_426(self):
		"""Test fma as *floatnum_bytes_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_floatnum_427(self):
		"""Test fma as *floatnum_bytes_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_intarray_428(self):
		"""Test fma as *floatnum_bytes_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_intnum_429(self):
		"""Test fma as *floatnum_bytes_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_bytes_430(self):
		"""Test fma as *floatnum_bytes_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_str_431(self):
		"""Test fma as *floatnum_bytes_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intarray_none_432(self):
		"""Test fma as *floatnum_bytes_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_floatarray_433(self):
		"""Test fma as *floatnum_bytes_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_floatnum_434(self):
		"""Test fma as *floatnum_bytes_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_intarray_435(self):
		"""Test fma as *floatnum_bytes_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_intnum_436(self):
		"""Test fma as *floatnum_bytes_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_bytes_437(self):
		"""Test fma as *floatnum_bytes_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_str_438(self):
		"""Test fma as *floatnum_bytes_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_intnum_none_439(self):
		"""Test fma as *floatnum_bytes_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_floatarray_440(self):
		"""Test fma as *floatnum_bytes_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_floatnum_441(self):
		"""Test fma as *floatnum_bytes_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_intarray_442(self):
		"""Test fma as *floatnum_bytes_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_intnum_443(self):
		"""Test fma as *floatnum_bytes_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_bytes_444(self):
		"""Test fma as *floatnum_bytes_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_str_445(self):
		"""Test fma as *floatnum_bytes_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_bytes_none_446(self):
		"""Test fma as *floatnum_bytes_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_floatarray_447(self):
		"""Test fma as *floatnum_bytes_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_floatnum_448(self):
		"""Test fma as *floatnum_bytes_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_intarray_449(self):
		"""Test fma as *floatnum_bytes_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_intnum_450(self):
		"""Test fma as *floatnum_bytes_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_bytes_451(self):
		"""Test fma as *floatnum_bytes_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_str_452(self):
		"""Test fma as *floatnum_bytes_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_bytes_str_none_453(self):
		"""Test fma as *floatnum_bytes_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_floatarray_454(self):
		"""Test fma as *floatnum_str_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_floatnum_455(self):
		"""Test fma as *floatnum_str_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_intarray_456(self):
		"""Test fma as *floatnum_str_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_intnum_457(self):
		"""Test fma as *floatnum_str_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_bytes_458(self):
		"""Test fma as *floatnum_str_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_str_459(self):
		"""Test fma as *floatnum_str_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatarray_none_460(self):
		"""Test fma as *floatnum_str_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_floatarray_461(self):
		"""Test fma as *floatnum_str_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_floatnum_462(self):
		"""Test fma as *floatnum_str_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_intarray_463(self):
		"""Test fma as *floatnum_str_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_intnum_464(self):
		"""Test fma as *floatnum_str_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_bytes_465(self):
		"""Test fma as *floatnum_str_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_str_466(self):
		"""Test fma as *floatnum_str_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_floatnum_none_467(self):
		"""Test fma as *floatnum_str_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_floatarray_468(self):
		"""Test fma as *floatnum_str_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_floatnum_469(self):
		"""Test fma as *floatnum_str_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_intarray_470(self):
		"""Test fma as *floatnum_str_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_intnum_471(self):
		"""Test fma as *floatnum_str_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_bytes_472(self):
		"""Test fma as *floatnum_str_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_str_473(self):
		"""Test fma as *floatnum_str_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intarray_none_474(self):
		"""Test fma as *floatnum_str_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_floatarray_475(self):
		"""Test fma as *floatnum_str_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_floatnum_476(self):
		"""Test fma as *floatnum_str_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_intarray_477(self):
		"""Test fma as *floatnum_str_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_intnum_478(self):
		"""Test fma as *floatnum_str_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_bytes_479(self):
		"""Test fma as *floatnum_str_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_str_480(self):
		"""Test fma as *floatnum_str_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_intnum_none_481(self):
		"""Test fma as *floatnum_str_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_floatarray_482(self):
		"""Test fma as *floatnum_str_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_floatnum_483(self):
		"""Test fma as *floatnum_str_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_intarray_484(self):
		"""Test fma as *floatnum_str_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_intnum_485(self):
		"""Test fma as *floatnum_str_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_bytes_486(self):
		"""Test fma as *floatnum_str_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_str_487(self):
		"""Test fma as *floatnum_str_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_bytes_none_488(self):
		"""Test fma as *floatnum_str_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_floatarray_489(self):
		"""Test fma as *floatnum_str_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_floatnum_490(self):
		"""Test fma as *floatnum_str_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_intarray_491(self):
		"""Test fma as *floatnum_str_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_intnum_492(self):
		"""Test fma as *floatnum_str_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_bytes_493(self):
		"""Test fma as *floatnum_str_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_str_494(self):
		"""Test fma as *floatnum_str_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_floatnum_str_str_none_495(self):
		"""Test fma as *floatnum_str_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.floatnumx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_floatarray_496(self):
		"""Test fma as *intarray_floatarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_floatnum_497(self):
		"""Test fma as *intarray_floatarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_intarray_498(self):
		"""Test fma as *intarray_floatarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_intnum_499(self):
		"""Test fma as *intarray_floatarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_bytes_500(self):
		"""Test fma as *intarray_floatarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_str_501(self):
		"""Test fma as *intarray_floatarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatarray_none_502(self):
		"""Test fma as *intarray_floatarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_floatarray_503(self):
		"""Test fma as *intarray_floatarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_floatnum_504(self):
		"""Test fma as *intarray_floatarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_intarray_505(self):
		"""Test fma as *intarray_floatarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_intnum_506(self):
		"""Test fma as *intarray_floatarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_bytes_507(self):
		"""Test fma as *intarray_floatarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_str_508(self):
		"""Test fma as *intarray_floatarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_floatnum_none_509(self):
		"""Test fma as *intarray_floatarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_floatarray_510(self):
		"""Test fma as *intarray_floatarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_floatnum_511(self):
		"""Test fma as *intarray_floatarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_intarray_512(self):
		"""Test fma as *intarray_floatarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_intnum_513(self):
		"""Test fma as *intarray_floatarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_bytes_514(self):
		"""Test fma as *intarray_floatarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_str_515(self):
		"""Test fma as *intarray_floatarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intarray_none_516(self):
		"""Test fma as *intarray_floatarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_floatarray_517(self):
		"""Test fma as *intarray_floatarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_floatnum_518(self):
		"""Test fma as *intarray_floatarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_intarray_519(self):
		"""Test fma as *intarray_floatarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_intnum_520(self):
		"""Test fma as *intarray_floatarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_bytes_521(self):
		"""Test fma as *intarray_floatarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_str_522(self):
		"""Test fma as *intarray_floatarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_intnum_none_523(self):
		"""Test fma as *intarray_floatarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_floatarray_524(self):
		"""Test fma as *intarray_floatarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_floatnum_525(self):
		"""Test fma as *intarray_floatarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_intarray_526(self):
		"""Test fma as *intarray_floatarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_intnum_527(self):
		"""Test fma as *intarray_floatarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_bytes_528(self):
		"""Test fma as *intarray_floatarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_str_529(self):
		"""Test fma as *intarray_floatarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_bytes_none_530(self):
		"""Test fma as *intarray_floatarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_floatarray_531(self):
		"""Test fma as *intarray_floatarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_floatnum_532(self):
		"""Test fma as *intarray_floatarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_intarray_533(self):
		"""Test fma as *intarray_floatarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_intnum_534(self):
		"""Test fma as *intarray_floatarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_bytes_535(self):
		"""Test fma as *intarray_floatarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_str_536(self):
		"""Test fma as *intarray_floatarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatarray_str_none_537(self):
		"""Test fma as *intarray_floatarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_floatarray_538(self):
		"""Test fma as *intarray_floatnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_floatnum_539(self):
		"""Test fma as *intarray_floatnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_intarray_540(self):
		"""Test fma as *intarray_floatnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_intnum_541(self):
		"""Test fma as *intarray_floatnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_bytes_542(self):
		"""Test fma as *intarray_floatnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_str_543(self):
		"""Test fma as *intarray_floatnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatarray_none_544(self):
		"""Test fma as *intarray_floatnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_floatarray_545(self):
		"""Test fma as *intarray_floatnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_floatnum_546(self):
		"""Test fma as *intarray_floatnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_intarray_547(self):
		"""Test fma as *intarray_floatnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_intnum_548(self):
		"""Test fma as *intarray_floatnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_bytes_549(self):
		"""Test fma as *intarray_floatnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_str_550(self):
		"""Test fma as *intarray_floatnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_floatnum_none_551(self):
		"""Test fma as *intarray_floatnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_floatarray_552(self):
		"""Test fma as *intarray_floatnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_floatnum_553(self):
		"""Test fma as *intarray_floatnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_intarray_554(self):
		"""Test fma as *intarray_floatnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_intnum_555(self):
		"""Test fma as *intarray_floatnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_bytes_556(self):
		"""Test fma as *intarray_floatnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_str_557(self):
		"""Test fma as *intarray_floatnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intarray_none_558(self):
		"""Test fma as *intarray_floatnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_floatarray_559(self):
		"""Test fma as *intarray_floatnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_floatnum_560(self):
		"""Test fma as *intarray_floatnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_intarray_561(self):
		"""Test fma as *intarray_floatnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_intnum_562(self):
		"""Test fma as *intarray_floatnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_bytes_563(self):
		"""Test fma as *intarray_floatnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_str_564(self):
		"""Test fma as *intarray_floatnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_intnum_none_565(self):
		"""Test fma as *intarray_floatnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_floatarray_566(self):
		"""Test fma as *intarray_floatnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_floatnum_567(self):
		"""Test fma as *intarray_floatnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_intarray_568(self):
		"""Test fma as *intarray_floatnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_intnum_569(self):
		"""Test fma as *intarray_floatnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_bytes_570(self):
		"""Test fma as *intarray_floatnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_str_571(self):
		"""Test fma as *intarray_floatnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_bytes_none_572(self):
		"""Test fma as *intarray_floatnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_floatarray_573(self):
		"""Test fma as *intarray_floatnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_floatnum_574(self):
		"""Test fma as *intarray_floatnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_intarray_575(self):
		"""Test fma as *intarray_floatnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_intnum_576(self):
		"""Test fma as *intarray_floatnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_bytes_577(self):
		"""Test fma as *intarray_floatnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_str_578(self):
		"""Test fma as *intarray_floatnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_floatnum_str_none_579(self):
		"""Test fma as *intarray_floatnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_floatarray_580(self):
		"""Test fma as *intarray_intarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_floatnum_581(self):
		"""Test fma as *intarray_intarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_intarray_582(self):
		"""Test fma as *intarray_intarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_intnum_583(self):
		"""Test fma as *intarray_intarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_bytes_584(self):
		"""Test fma as *intarray_intarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_str_585(self):
		"""Test fma as *intarray_intarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatarray_none_586(self):
		"""Test fma as *intarray_intarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_floatarray_587(self):
		"""Test fma as *intarray_intarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_floatnum_588(self):
		"""Test fma as *intarray_intarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_intarray_589(self):
		"""Test fma as *intarray_intarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_intnum_590(self):
		"""Test fma as *intarray_intarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_bytes_591(self):
		"""Test fma as *intarray_intarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_str_592(self):
		"""Test fma as *intarray_intarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_floatnum_none_593(self):
		"""Test fma as *intarray_intarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_floatarray_594(self):
		"""Test fma as *intarray_intarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_floatnum_595(self):
		"""Test fma as *intarray_intarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_intarray_596(self):
		"""Test fma as *intarray_intarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_intnum_597(self):
		"""Test fma as *intarray_intarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_bytes_598(self):
		"""Test fma as *intarray_intarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_str_599(self):
		"""Test fma as *intarray_intarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intarray_none_600(self):
		"""Test fma as *intarray_intarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_floatarray_601(self):
		"""Test fma as *intarray_intarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_floatnum_602(self):
		"""Test fma as *intarray_intarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_intarray_603(self):
		"""Test fma as *intarray_intarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_intnum_604(self):
		"""Test fma as *intarray_intarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_bytes_605(self):
		"""Test fma as *intarray_intarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_str_606(self):
		"""Test fma as *intarray_intarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_intnum_none_607(self):
		"""Test fma as *intarray_intarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_floatarray_608(self):
		"""Test fma as *intarray_intarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_floatnum_609(self):
		"""Test fma as *intarray_intarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_intarray_610(self):
		"""Test fma as *intarray_intarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_intnum_611(self):
		"""Test fma as *intarray_intarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_bytes_612(self):
		"""Test fma as *intarray_intarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_str_613(self):
		"""Test fma as *intarray_intarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_bytes_none_614(self):
		"""Test fma as *intarray_intarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_floatarray_615(self):
		"""Test fma as *intarray_intarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_floatnum_616(self):
		"""Test fma as *intarray_intarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_intarray_617(self):
		"""Test fma as *intarray_intarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_intnum_618(self):
		"""Test fma as *intarray_intarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_bytes_619(self):
		"""Test fma as *intarray_intarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_str_620(self):
		"""Test fma as *intarray_intarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intarray_str_none_621(self):
		"""Test fma as *intarray_intarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_floatarray_622(self):
		"""Test fma as *intarray_intnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_floatnum_623(self):
		"""Test fma as *intarray_intnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_intarray_624(self):
		"""Test fma as *intarray_intnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_intnum_625(self):
		"""Test fma as *intarray_intnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_bytes_626(self):
		"""Test fma as *intarray_intnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_str_627(self):
		"""Test fma as *intarray_intnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatarray_none_628(self):
		"""Test fma as *intarray_intnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_floatarray_629(self):
		"""Test fma as *intarray_intnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_floatnum_630(self):
		"""Test fma as *intarray_intnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_intarray_631(self):
		"""Test fma as *intarray_intnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_intnum_632(self):
		"""Test fma as *intarray_intnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_bytes_633(self):
		"""Test fma as *intarray_intnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_str_634(self):
		"""Test fma as *intarray_intnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_floatnum_none_635(self):
		"""Test fma as *intarray_intnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_floatarray_636(self):
		"""Test fma as *intarray_intnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_floatnum_637(self):
		"""Test fma as *intarray_intnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_intarray_638(self):
		"""Test fma as *intarray_intnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_intnum_639(self):
		"""Test fma as *intarray_intnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_bytes_640(self):
		"""Test fma as *intarray_intnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_str_641(self):
		"""Test fma as *intarray_intnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intarray_none_642(self):
		"""Test fma as *intarray_intnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_floatarray_643(self):
		"""Test fma as *intarray_intnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_floatnum_644(self):
		"""Test fma as *intarray_intnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_intarray_645(self):
		"""Test fma as *intarray_intnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_intnum_646(self):
		"""Test fma as *intarray_intnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_bytes_647(self):
		"""Test fma as *intarray_intnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_str_648(self):
		"""Test fma as *intarray_intnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_intnum_none_649(self):
		"""Test fma as *intarray_intnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_floatarray_650(self):
		"""Test fma as *intarray_intnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_floatnum_651(self):
		"""Test fma as *intarray_intnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_intarray_652(self):
		"""Test fma as *intarray_intnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_intnum_653(self):
		"""Test fma as *intarray_intnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_bytes_654(self):
		"""Test fma as *intarray_intnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_str_655(self):
		"""Test fma as *intarray_intnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_bytes_none_656(self):
		"""Test fma as *intarray_intnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_floatarray_657(self):
		"""Test fma as *intarray_intnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_floatnum_658(self):
		"""Test fma as *intarray_intnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_intarray_659(self):
		"""Test fma as *intarray_intnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_intnum_660(self):
		"""Test fma as *intarray_intnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_bytes_661(self):
		"""Test fma as *intarray_intnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_str_662(self):
		"""Test fma as *intarray_intnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_intnum_str_none_663(self):
		"""Test fma as *intarray_intnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_floatarray_664(self):
		"""Test fma as *intarray_bytes_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_floatnum_665(self):
		"""Test fma as *intarray_bytes_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_intarray_666(self):
		"""Test fma as *intarray_bytes_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_intnum_667(self):
		"""Test fma as *intarray_bytes_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_bytes_668(self):
		"""Test fma as *intarray_bytes_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_str_669(self):
		"""Test fma as *intarray_bytes_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatarray_none_670(self):
		"""Test fma as *intarray_bytes_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_floatarray_671(self):
		"""Test fma as *intarray_bytes_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_floatnum_672(self):
		"""Test fma as *intarray_bytes_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_intarray_673(self):
		"""Test fma as *intarray_bytes_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_intnum_674(self):
		"""Test fma as *intarray_bytes_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_bytes_675(self):
		"""Test fma as *intarray_bytes_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_str_676(self):
		"""Test fma as *intarray_bytes_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_floatnum_none_677(self):
		"""Test fma as *intarray_bytes_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_floatarray_678(self):
		"""Test fma as *intarray_bytes_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_floatnum_679(self):
		"""Test fma as *intarray_bytes_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_intarray_680(self):
		"""Test fma as *intarray_bytes_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_intnum_681(self):
		"""Test fma as *intarray_bytes_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_bytes_682(self):
		"""Test fma as *intarray_bytes_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_str_683(self):
		"""Test fma as *intarray_bytes_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intarray_none_684(self):
		"""Test fma as *intarray_bytes_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_floatarray_685(self):
		"""Test fma as *intarray_bytes_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_floatnum_686(self):
		"""Test fma as *intarray_bytes_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_intarray_687(self):
		"""Test fma as *intarray_bytes_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_intnum_688(self):
		"""Test fma as *intarray_bytes_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_bytes_689(self):
		"""Test fma as *intarray_bytes_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_str_690(self):
		"""Test fma as *intarray_bytes_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_intnum_none_691(self):
		"""Test fma as *intarray_bytes_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_floatarray_692(self):
		"""Test fma as *intarray_bytes_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_floatnum_693(self):
		"""Test fma as *intarray_bytes_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_intarray_694(self):
		"""Test fma as *intarray_bytes_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_intnum_695(self):
		"""Test fma as *intarray_bytes_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_bytes_696(self):
		"""Test fma as *intarray_bytes_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_str_697(self):
		"""Test fma as *intarray_bytes_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_bytes_none_698(self):
		"""Test fma as *intarray_bytes_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_floatarray_699(self):
		"""Test fma as *intarray_bytes_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_floatnum_700(self):
		"""Test fma as *intarray_bytes_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_intarray_701(self):
		"""Test fma as *intarray_bytes_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_intnum_702(self):
		"""Test fma as *intarray_bytes_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_bytes_703(self):
		"""Test fma as *intarray_bytes_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_str_704(self):
		"""Test fma as *intarray_bytes_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_bytes_str_none_705(self):
		"""Test fma as *intarray_bytes_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_floatarray_706(self):
		"""Test fma as *intarray_str_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_floatnum_707(self):
		"""Test fma as *intarray_str_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_intarray_708(self):
		"""Test fma as *intarray_str_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_intnum_709(self):
		"""Test fma as *intarray_str_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_bytes_710(self):
		"""Test fma as *intarray_str_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_str_711(self):
		"""Test fma as *intarray_str_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatarray_none_712(self):
		"""Test fma as *intarray_str_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_floatarray_713(self):
		"""Test fma as *intarray_str_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_floatnum_714(self):
		"""Test fma as *intarray_str_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_intarray_715(self):
		"""Test fma as *intarray_str_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_intnum_716(self):
		"""Test fma as *intarray_str_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_bytes_717(self):
		"""Test fma as *intarray_str_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_str_718(self):
		"""Test fma as *intarray_str_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_floatnum_none_719(self):
		"""Test fma as *intarray_str_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_floatarray_720(self):
		"""Test fma as *intarray_str_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_floatnum_721(self):
		"""Test fma as *intarray_str_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_intarray_722(self):
		"""Test fma as *intarray_str_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_intnum_723(self):
		"""Test fma as *intarray_str_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_bytes_724(self):
		"""Test fma as *intarray_str_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_str_725(self):
		"""Test fma as *intarray_str_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_intarray_none_726(self):
		"""Test fma as *intarray_str_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_floatarray_727(self):
		"""Test fma as *intarray_str_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_floatnum_728(self):
		"""Test fma as *intarray_str_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_intarray_729(self):
		"""Test fma as *intarray_str_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_intnum_730(self):
		"""Test fma as *intarray_str_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_bytes_731(self):
		"""Test fma as *intarray_str_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_str_732(self):
		"""Test fma as *intarray_str_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_intnum_none_733(self):
		"""Test fma as *intarray_str_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_floatarray_734(self):
		"""Test fma as *intarray_str_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_floatnum_735(self):
		"""Test fma as *intarray_str_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_intarray_736(self):
		"""Test fma as *intarray_str_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_intnum_737(self):
		"""Test fma as *intarray_str_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_bytes_738(self):
		"""Test fma as *intarray_str_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_str_739(self):
		"""Test fma as *intarray_str_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_bytes_none_740(self):
		"""Test fma as *intarray_str_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_intarray_str_str_floatarray_741(self):
		"""Test fma as *intarray_str_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_floatnum_742(self):
		"""Test fma as *intarray_str_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_intarray_743(self):
		"""Test fma as *intarray_str_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_intnum_744(self):
		"""Test fma as *intarray_str_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_bytes_745(self):
		"""Test fma as *intarray_str_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_str_746(self):
		"""Test fma as *intarray_str_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intarray_str_str_none_747(self):
		"""Test fma as *intarray_str_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intarrayx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_floatarray_748(self):
		"""Test fma as *intnum_floatarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_floatnum_749(self):
		"""Test fma as *intnum_floatarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_intarray_750(self):
		"""Test fma as *intnum_floatarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_intnum_751(self):
		"""Test fma as *intnum_floatarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_bytes_752(self):
		"""Test fma as *intnum_floatarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_str_753(self):
		"""Test fma as *intnum_floatarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatarray_none_754(self):
		"""Test fma as *intnum_floatarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_floatarray_755(self):
		"""Test fma as *intnum_floatarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_floatnum_756(self):
		"""Test fma as *intnum_floatarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_intarray_757(self):
		"""Test fma as *intnum_floatarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_intnum_758(self):
		"""Test fma as *intnum_floatarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_bytes_759(self):
		"""Test fma as *intnum_floatarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_str_760(self):
		"""Test fma as *intnum_floatarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_floatnum_none_761(self):
		"""Test fma as *intnum_floatarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_floatarray_762(self):
		"""Test fma as *intnum_floatarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_floatnum_763(self):
		"""Test fma as *intnum_floatarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_intarray_764(self):
		"""Test fma as *intnum_floatarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_intnum_765(self):
		"""Test fma as *intnum_floatarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_bytes_766(self):
		"""Test fma as *intnum_floatarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_str_767(self):
		"""Test fma as *intnum_floatarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intarray_none_768(self):
		"""Test fma as *intnum_floatarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_floatarray_769(self):
		"""Test fma as *intnum_floatarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_floatnum_770(self):
		"""Test fma as *intnum_floatarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_intarray_771(self):
		"""Test fma as *intnum_floatarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_intnum_772(self):
		"""Test fma as *intnum_floatarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_bytes_773(self):
		"""Test fma as *intnum_floatarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_str_774(self):
		"""Test fma as *intnum_floatarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_intnum_none_775(self):
		"""Test fma as *intnum_floatarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_floatarray_776(self):
		"""Test fma as *intnum_floatarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_floatnum_777(self):
		"""Test fma as *intnum_floatarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_intarray_778(self):
		"""Test fma as *intnum_floatarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_intnum_779(self):
		"""Test fma as *intnum_floatarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_bytes_780(self):
		"""Test fma as *intnum_floatarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_str_781(self):
		"""Test fma as *intnum_floatarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_bytes_none_782(self):
		"""Test fma as *intnum_floatarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_floatarray_783(self):
		"""Test fma as *intnum_floatarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_floatnum_784(self):
		"""Test fma as *intnum_floatarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_intarray_785(self):
		"""Test fma as *intnum_floatarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_intnum_786(self):
		"""Test fma as *intnum_floatarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_bytes_787(self):
		"""Test fma as *intnum_floatarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_str_788(self):
		"""Test fma as *intnum_floatarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatarray_str_none_789(self):
		"""Test fma as *intnum_floatarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_floatarray_790(self):
		"""Test fma as *intnum_floatnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_floatnum_791(self):
		"""Test fma as *intnum_floatnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_intarray_792(self):
		"""Test fma as *intnum_floatnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_intnum_793(self):
		"""Test fma as *intnum_floatnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_bytes_794(self):
		"""Test fma as *intnum_floatnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_str_795(self):
		"""Test fma as *intnum_floatnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatarray_none_796(self):
		"""Test fma as *intnum_floatnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_floatarray_797(self):
		"""Test fma as *intnum_floatnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_floatnum_798(self):
		"""Test fma as *intnum_floatnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_intarray_799(self):
		"""Test fma as *intnum_floatnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_intnum_800(self):
		"""Test fma as *intnum_floatnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_bytes_801(self):
		"""Test fma as *intnum_floatnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_str_802(self):
		"""Test fma as *intnum_floatnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_floatnum_none_803(self):
		"""Test fma as *intnum_floatnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_floatarray_804(self):
		"""Test fma as *intnum_floatnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_floatnum_805(self):
		"""Test fma as *intnum_floatnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_intarray_806(self):
		"""Test fma as *intnum_floatnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_intnum_807(self):
		"""Test fma as *intnum_floatnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_bytes_808(self):
		"""Test fma as *intnum_floatnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_str_809(self):
		"""Test fma as *intnum_floatnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intarray_none_810(self):
		"""Test fma as *intnum_floatnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_floatarray_811(self):
		"""Test fma as *intnum_floatnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_floatnum_812(self):
		"""Test fma as *intnum_floatnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_intarray_813(self):
		"""Test fma as *intnum_floatnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_intnum_814(self):
		"""Test fma as *intnum_floatnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_bytes_815(self):
		"""Test fma as *intnum_floatnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_str_816(self):
		"""Test fma as *intnum_floatnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_intnum_none_817(self):
		"""Test fma as *intnum_floatnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_floatarray_818(self):
		"""Test fma as *intnum_floatnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_floatnum_819(self):
		"""Test fma as *intnum_floatnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_intarray_820(self):
		"""Test fma as *intnum_floatnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_intnum_821(self):
		"""Test fma as *intnum_floatnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_bytes_822(self):
		"""Test fma as *intnum_floatnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_str_823(self):
		"""Test fma as *intnum_floatnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_bytes_none_824(self):
		"""Test fma as *intnum_floatnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_floatarray_825(self):
		"""Test fma as *intnum_floatnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_floatnum_826(self):
		"""Test fma as *intnum_floatnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_intarray_827(self):
		"""Test fma as *intnum_floatnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_intnum_828(self):
		"""Test fma as *intnum_floatnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_bytes_829(self):
		"""Test fma as *intnum_floatnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_str_830(self):
		"""Test fma as *intnum_floatnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_floatnum_str_none_831(self):
		"""Test fma as *intnum_floatnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_floatarray_832(self):
		"""Test fma as *intnum_intarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_floatnum_833(self):
		"""Test fma as *intnum_intarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_intarray_834(self):
		"""Test fma as *intnum_intarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_intnum_835(self):
		"""Test fma as *intnum_intarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_bytes_836(self):
		"""Test fma as *intnum_intarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_str_837(self):
		"""Test fma as *intnum_intarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatarray_none_838(self):
		"""Test fma as *intnum_intarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_floatarray_839(self):
		"""Test fma as *intnum_intarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_floatnum_840(self):
		"""Test fma as *intnum_intarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_intarray_841(self):
		"""Test fma as *intnum_intarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_intnum_842(self):
		"""Test fma as *intnum_intarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_bytes_843(self):
		"""Test fma as *intnum_intarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_str_844(self):
		"""Test fma as *intnum_intarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_floatnum_none_845(self):
		"""Test fma as *intnum_intarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_floatarray_846(self):
		"""Test fma as *intnum_intarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_floatnum_847(self):
		"""Test fma as *intnum_intarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_intarray_848(self):
		"""Test fma as *intnum_intarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_intnum_849(self):
		"""Test fma as *intnum_intarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_bytes_850(self):
		"""Test fma as *intnum_intarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_str_851(self):
		"""Test fma as *intnum_intarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intarray_none_852(self):
		"""Test fma as *intnum_intarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_floatarray_853(self):
		"""Test fma as *intnum_intarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_floatnum_854(self):
		"""Test fma as *intnum_intarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_intarray_855(self):
		"""Test fma as *intnum_intarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_intnum_856(self):
		"""Test fma as *intnum_intarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_bytes_857(self):
		"""Test fma as *intnum_intarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_str_858(self):
		"""Test fma as *intnum_intarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_intnum_none_859(self):
		"""Test fma as *intnum_intarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_floatarray_860(self):
		"""Test fma as *intnum_intarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_floatnum_861(self):
		"""Test fma as *intnum_intarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_intarray_862(self):
		"""Test fma as *intnum_intarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_intnum_863(self):
		"""Test fma as *intnum_intarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_bytes_864(self):
		"""Test fma as *intnum_intarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_str_865(self):
		"""Test fma as *intnum_intarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_bytes_none_866(self):
		"""Test fma as *intnum_intarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_floatarray_867(self):
		"""Test fma as *intnum_intarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_floatnum_868(self):
		"""Test fma as *intnum_intarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_intarray_869(self):
		"""Test fma as *intnum_intarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_intnum_870(self):
		"""Test fma as *intnum_intarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_bytes_871(self):
		"""Test fma as *intnum_intarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_str_872(self):
		"""Test fma as *intnum_intarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intarray_str_none_873(self):
		"""Test fma as *intnum_intarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_floatarray_874(self):
		"""Test fma as *intnum_intnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_floatnum_875(self):
		"""Test fma as *intnum_intnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_intarray_876(self):
		"""Test fma as *intnum_intnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_intnum_877(self):
		"""Test fma as *intnum_intnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_bytes_878(self):
		"""Test fma as *intnum_intnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_str_879(self):
		"""Test fma as *intnum_intnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatarray_none_880(self):
		"""Test fma as *intnum_intnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_floatarray_881(self):
		"""Test fma as *intnum_intnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_floatnum_882(self):
		"""Test fma as *intnum_intnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_intarray_883(self):
		"""Test fma as *intnum_intnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_intnum_884(self):
		"""Test fma as *intnum_intnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_bytes_885(self):
		"""Test fma as *intnum_intnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_str_886(self):
		"""Test fma as *intnum_intnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_floatnum_none_887(self):
		"""Test fma as *intnum_intnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_floatarray_888(self):
		"""Test fma as *intnum_intnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_floatnum_889(self):
		"""Test fma as *intnum_intnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_intarray_890(self):
		"""Test fma as *intnum_intnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_intnum_891(self):
		"""Test fma as *intnum_intnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_bytes_892(self):
		"""Test fma as *intnum_intnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_str_893(self):
		"""Test fma as *intnum_intnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intarray_none_894(self):
		"""Test fma as *intnum_intnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_floatarray_895(self):
		"""Test fma as *intnum_intnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_floatnum_896(self):
		"""Test fma as *intnum_intnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_intarray_897(self):
		"""Test fma as *intnum_intnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_intnum_898(self):
		"""Test fma as *intnum_intnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_bytes_899(self):
		"""Test fma as *intnum_intnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_str_900(self):
		"""Test fma as *intnum_intnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_intnum_none_901(self):
		"""Test fma as *intnum_intnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_floatarray_902(self):
		"""Test fma as *intnum_intnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_floatnum_903(self):
		"""Test fma as *intnum_intnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_intarray_904(self):
		"""Test fma as *intnum_intnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_intnum_905(self):
		"""Test fma as *intnum_intnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_bytes_906(self):
		"""Test fma as *intnum_intnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_str_907(self):
		"""Test fma as *intnum_intnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_bytes_none_908(self):
		"""Test fma as *intnum_intnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_floatarray_909(self):
		"""Test fma as *intnum_intnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_floatnum_910(self):
		"""Test fma as *intnum_intnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_intarray_911(self):
		"""Test fma as *intnum_intnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_intnum_912(self):
		"""Test fma as *intnum_intnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_bytes_913(self):
		"""Test fma as *intnum_intnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_str_914(self):
		"""Test fma as *intnum_intnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_intnum_str_none_915(self):
		"""Test fma as *intnum_intnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_floatarray_916(self):
		"""Test fma as *intnum_bytes_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_floatnum_917(self):
		"""Test fma as *intnum_bytes_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_intarray_918(self):
		"""Test fma as *intnum_bytes_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_intnum_919(self):
		"""Test fma as *intnum_bytes_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_bytes_920(self):
		"""Test fma as *intnum_bytes_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_str_921(self):
		"""Test fma as *intnum_bytes_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatarray_none_922(self):
		"""Test fma as *intnum_bytes_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_floatarray_923(self):
		"""Test fma as *intnum_bytes_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_floatnum_924(self):
		"""Test fma as *intnum_bytes_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_intarray_925(self):
		"""Test fma as *intnum_bytes_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_intnum_926(self):
		"""Test fma as *intnum_bytes_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_bytes_927(self):
		"""Test fma as *intnum_bytes_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_str_928(self):
		"""Test fma as *intnum_bytes_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_floatnum_none_929(self):
		"""Test fma as *intnum_bytes_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_floatarray_930(self):
		"""Test fma as *intnum_bytes_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_floatnum_931(self):
		"""Test fma as *intnum_bytes_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_intarray_932(self):
		"""Test fma as *intnum_bytes_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_intnum_933(self):
		"""Test fma as *intnum_bytes_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_bytes_934(self):
		"""Test fma as *intnum_bytes_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_str_935(self):
		"""Test fma as *intnum_bytes_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intarray_none_936(self):
		"""Test fma as *intnum_bytes_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_floatarray_937(self):
		"""Test fma as *intnum_bytes_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_floatnum_938(self):
		"""Test fma as *intnum_bytes_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_intarray_939(self):
		"""Test fma as *intnum_bytes_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_intnum_940(self):
		"""Test fma as *intnum_bytes_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_bytes_941(self):
		"""Test fma as *intnum_bytes_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_str_942(self):
		"""Test fma as *intnum_bytes_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_intnum_none_943(self):
		"""Test fma as *intnum_bytes_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_floatarray_944(self):
		"""Test fma as *intnum_bytes_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_floatnum_945(self):
		"""Test fma as *intnum_bytes_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_intarray_946(self):
		"""Test fma as *intnum_bytes_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_intnum_947(self):
		"""Test fma as *intnum_bytes_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_bytes_948(self):
		"""Test fma as *intnum_bytes_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_str_949(self):
		"""Test fma as *intnum_bytes_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_bytes_none_950(self):
		"""Test fma as *intnum_bytes_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_floatarray_951(self):
		"""Test fma as *intnum_bytes_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_floatnum_952(self):
		"""Test fma as *intnum_bytes_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_intarray_953(self):
		"""Test fma as *intnum_bytes_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_intnum_954(self):
		"""Test fma as *intnum_bytes_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_bytes_955(self):
		"""Test fma as *intnum_bytes_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_str_956(self):
		"""Test fma as *intnum_bytes_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_bytes_str_none_957(self):
		"""Test fma as *intnum_bytes_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_floatarray_958(self):
		"""Test fma as *intnum_str_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_floatnum_959(self):
		"""Test fma as *intnum_str_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_intarray_960(self):
		"""Test fma as *intnum_str_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_intnum_961(self):
		"""Test fma as *intnum_str_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_bytes_962(self):
		"""Test fma as *intnum_str_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_str_963(self):
		"""Test fma as *intnum_str_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatarray_none_964(self):
		"""Test fma as *intnum_str_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_floatarray_965(self):
		"""Test fma as *intnum_str_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_floatnum_966(self):
		"""Test fma as *intnum_str_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_intarray_967(self):
		"""Test fma as *intnum_str_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_intnum_968(self):
		"""Test fma as *intnum_str_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_bytes_969(self):
		"""Test fma as *intnum_str_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_str_970(self):
		"""Test fma as *intnum_str_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_floatnum_none_971(self):
		"""Test fma as *intnum_str_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_floatarray_972(self):
		"""Test fma as *intnum_str_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_floatnum_973(self):
		"""Test fma as *intnum_str_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_intarray_974(self):
		"""Test fma as *intnum_str_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_intnum_975(self):
		"""Test fma as *intnum_str_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_bytes_976(self):
		"""Test fma as *intnum_str_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_str_977(self):
		"""Test fma as *intnum_str_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_intarray_none_978(self):
		"""Test fma as *intnum_str_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_floatarray_979(self):
		"""Test fma as *intnum_str_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_floatnum_980(self):
		"""Test fma as *intnum_str_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_intarray_981(self):
		"""Test fma as *intnum_str_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_intnum_982(self):
		"""Test fma as *intnum_str_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_bytes_983(self):
		"""Test fma as *intnum_str_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_str_984(self):
		"""Test fma as *intnum_str_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_intnum_none_985(self):
		"""Test fma as *intnum_str_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_floatarray_986(self):
		"""Test fma as *intnum_str_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_floatnum_987(self):
		"""Test fma as *intnum_str_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_intarray_988(self):
		"""Test fma as *intnum_str_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_intnum_989(self):
		"""Test fma as *intnum_str_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_bytes_990(self):
		"""Test fma as *intnum_str_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_str_991(self):
		"""Test fma as *intnum_str_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_bytes_none_992(self):
		"""Test fma as *intnum_str_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_intnum_str_str_floatarray_993(self):
		"""Test fma as *intnum_str_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_floatnum_994(self):
		"""Test fma as *intnum_str_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_intarray_995(self):
		"""Test fma as *intnum_str_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_intnum_996(self):
		"""Test fma as *intnum_str_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_bytes_997(self):
		"""Test fma as *intnum_str_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_str_998(self):
		"""Test fma as *intnum_str_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_intnum_str_str_none_999(self):
		"""Test fma as *intnum_str_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.intnumx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_floatarray_1000(self):
		"""Test fma as *bytes_floatarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_floatnum_1001(self):
		"""Test fma as *bytes_floatarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_intarray_1002(self):
		"""Test fma as *bytes_floatarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_intnum_1003(self):
		"""Test fma as *bytes_floatarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_bytes_1004(self):
		"""Test fma as *bytes_floatarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_str_1005(self):
		"""Test fma as *bytes_floatarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatarray_none_1006(self):
		"""Test fma as *bytes_floatarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_floatarray_1007(self):
		"""Test fma as *bytes_floatarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_floatnum_1008(self):
		"""Test fma as *bytes_floatarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_intarray_1009(self):
		"""Test fma as *bytes_floatarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_intnum_1010(self):
		"""Test fma as *bytes_floatarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_bytes_1011(self):
		"""Test fma as *bytes_floatarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_str_1012(self):
		"""Test fma as *bytes_floatarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_floatnum_none_1013(self):
		"""Test fma as *bytes_floatarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_floatarray_1014(self):
		"""Test fma as *bytes_floatarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_floatnum_1015(self):
		"""Test fma as *bytes_floatarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_intarray_1016(self):
		"""Test fma as *bytes_floatarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_intnum_1017(self):
		"""Test fma as *bytes_floatarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_bytes_1018(self):
		"""Test fma as *bytes_floatarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_str_1019(self):
		"""Test fma as *bytes_floatarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intarray_none_1020(self):
		"""Test fma as *bytes_floatarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_floatarray_1021(self):
		"""Test fma as *bytes_floatarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_floatnum_1022(self):
		"""Test fma as *bytes_floatarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_intarray_1023(self):
		"""Test fma as *bytes_floatarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_intnum_1024(self):
		"""Test fma as *bytes_floatarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_bytes_1025(self):
		"""Test fma as *bytes_floatarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_str_1026(self):
		"""Test fma as *bytes_floatarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_intnum_none_1027(self):
		"""Test fma as *bytes_floatarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_floatarray_1028(self):
		"""Test fma as *bytes_floatarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_floatnum_1029(self):
		"""Test fma as *bytes_floatarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_intarray_1030(self):
		"""Test fma as *bytes_floatarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_intnum_1031(self):
		"""Test fma as *bytes_floatarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_bytes_1032(self):
		"""Test fma as *bytes_floatarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_str_1033(self):
		"""Test fma as *bytes_floatarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_bytes_none_1034(self):
		"""Test fma as *bytes_floatarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_floatarray_1035(self):
		"""Test fma as *bytes_floatarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_floatnum_1036(self):
		"""Test fma as *bytes_floatarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_intarray_1037(self):
		"""Test fma as *bytes_floatarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_intnum_1038(self):
		"""Test fma as *bytes_floatarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_bytes_1039(self):
		"""Test fma as *bytes_floatarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_str_1040(self):
		"""Test fma as *bytes_floatarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatarray_str_none_1041(self):
		"""Test fma as *bytes_floatarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_floatarray_1042(self):
		"""Test fma as *bytes_floatnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_floatnum_1043(self):
		"""Test fma as *bytes_floatnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_intarray_1044(self):
		"""Test fma as *bytes_floatnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_intnum_1045(self):
		"""Test fma as *bytes_floatnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_bytes_1046(self):
		"""Test fma as *bytes_floatnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_str_1047(self):
		"""Test fma as *bytes_floatnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatarray_none_1048(self):
		"""Test fma as *bytes_floatnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_floatarray_1049(self):
		"""Test fma as *bytes_floatnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_floatnum_1050(self):
		"""Test fma as *bytes_floatnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_intarray_1051(self):
		"""Test fma as *bytes_floatnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_intnum_1052(self):
		"""Test fma as *bytes_floatnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_bytes_1053(self):
		"""Test fma as *bytes_floatnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_str_1054(self):
		"""Test fma as *bytes_floatnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_floatnum_none_1055(self):
		"""Test fma as *bytes_floatnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_floatarray_1056(self):
		"""Test fma as *bytes_floatnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_floatnum_1057(self):
		"""Test fma as *bytes_floatnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_intarray_1058(self):
		"""Test fma as *bytes_floatnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_intnum_1059(self):
		"""Test fma as *bytes_floatnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_bytes_1060(self):
		"""Test fma as *bytes_floatnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_str_1061(self):
		"""Test fma as *bytes_floatnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intarray_none_1062(self):
		"""Test fma as *bytes_floatnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_floatarray_1063(self):
		"""Test fma as *bytes_floatnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_floatnum_1064(self):
		"""Test fma as *bytes_floatnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_intarray_1065(self):
		"""Test fma as *bytes_floatnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_intnum_1066(self):
		"""Test fma as *bytes_floatnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_bytes_1067(self):
		"""Test fma as *bytes_floatnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_str_1068(self):
		"""Test fma as *bytes_floatnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_intnum_none_1069(self):
		"""Test fma as *bytes_floatnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_floatarray_1070(self):
		"""Test fma as *bytes_floatnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_floatnum_1071(self):
		"""Test fma as *bytes_floatnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_intarray_1072(self):
		"""Test fma as *bytes_floatnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_intnum_1073(self):
		"""Test fma as *bytes_floatnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_bytes_1074(self):
		"""Test fma as *bytes_floatnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_str_1075(self):
		"""Test fma as *bytes_floatnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_bytes_none_1076(self):
		"""Test fma as *bytes_floatnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_floatarray_1077(self):
		"""Test fma as *bytes_floatnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_floatnum_1078(self):
		"""Test fma as *bytes_floatnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_intarray_1079(self):
		"""Test fma as *bytes_floatnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_intnum_1080(self):
		"""Test fma as *bytes_floatnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_bytes_1081(self):
		"""Test fma as *bytes_floatnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_str_1082(self):
		"""Test fma as *bytes_floatnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_floatnum_str_none_1083(self):
		"""Test fma as *bytes_floatnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_floatarray_1084(self):
		"""Test fma as *bytes_intarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_floatnum_1085(self):
		"""Test fma as *bytes_intarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_intarray_1086(self):
		"""Test fma as *bytes_intarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_intnum_1087(self):
		"""Test fma as *bytes_intarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_bytes_1088(self):
		"""Test fma as *bytes_intarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_str_1089(self):
		"""Test fma as *bytes_intarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatarray_none_1090(self):
		"""Test fma as *bytes_intarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_floatarray_1091(self):
		"""Test fma as *bytes_intarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_floatnum_1092(self):
		"""Test fma as *bytes_intarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_intarray_1093(self):
		"""Test fma as *bytes_intarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_intnum_1094(self):
		"""Test fma as *bytes_intarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_bytes_1095(self):
		"""Test fma as *bytes_intarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_str_1096(self):
		"""Test fma as *bytes_intarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_floatnum_none_1097(self):
		"""Test fma as *bytes_intarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_floatarray_1098(self):
		"""Test fma as *bytes_intarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_floatnum_1099(self):
		"""Test fma as *bytes_intarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_intarray_1100(self):
		"""Test fma as *bytes_intarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_intnum_1101(self):
		"""Test fma as *bytes_intarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_bytes_1102(self):
		"""Test fma as *bytes_intarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_str_1103(self):
		"""Test fma as *bytes_intarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intarray_none_1104(self):
		"""Test fma as *bytes_intarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_floatarray_1105(self):
		"""Test fma as *bytes_intarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_floatnum_1106(self):
		"""Test fma as *bytes_intarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_intarray_1107(self):
		"""Test fma as *bytes_intarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_intnum_1108(self):
		"""Test fma as *bytes_intarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_bytes_1109(self):
		"""Test fma as *bytes_intarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_str_1110(self):
		"""Test fma as *bytes_intarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_intnum_none_1111(self):
		"""Test fma as *bytes_intarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_floatarray_1112(self):
		"""Test fma as *bytes_intarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_floatnum_1113(self):
		"""Test fma as *bytes_intarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_intarray_1114(self):
		"""Test fma as *bytes_intarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_intnum_1115(self):
		"""Test fma as *bytes_intarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_bytes_1116(self):
		"""Test fma as *bytes_intarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_str_1117(self):
		"""Test fma as *bytes_intarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_bytes_none_1118(self):
		"""Test fma as *bytes_intarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_floatarray_1119(self):
		"""Test fma as *bytes_intarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_floatnum_1120(self):
		"""Test fma as *bytes_intarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_intarray_1121(self):
		"""Test fma as *bytes_intarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_intnum_1122(self):
		"""Test fma as *bytes_intarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_bytes_1123(self):
		"""Test fma as *bytes_intarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_str_1124(self):
		"""Test fma as *bytes_intarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intarray_str_none_1125(self):
		"""Test fma as *bytes_intarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_floatarray_1126(self):
		"""Test fma as *bytes_intnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_floatnum_1127(self):
		"""Test fma as *bytes_intnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_intarray_1128(self):
		"""Test fma as *bytes_intnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_intnum_1129(self):
		"""Test fma as *bytes_intnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_bytes_1130(self):
		"""Test fma as *bytes_intnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_str_1131(self):
		"""Test fma as *bytes_intnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatarray_none_1132(self):
		"""Test fma as *bytes_intnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_floatarray_1133(self):
		"""Test fma as *bytes_intnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_floatnum_1134(self):
		"""Test fma as *bytes_intnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_intarray_1135(self):
		"""Test fma as *bytes_intnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_intnum_1136(self):
		"""Test fma as *bytes_intnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_bytes_1137(self):
		"""Test fma as *bytes_intnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_str_1138(self):
		"""Test fma as *bytes_intnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_floatnum_none_1139(self):
		"""Test fma as *bytes_intnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_floatarray_1140(self):
		"""Test fma as *bytes_intnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_floatnum_1141(self):
		"""Test fma as *bytes_intnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_intarray_1142(self):
		"""Test fma as *bytes_intnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_intnum_1143(self):
		"""Test fma as *bytes_intnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_bytes_1144(self):
		"""Test fma as *bytes_intnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_str_1145(self):
		"""Test fma as *bytes_intnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intarray_none_1146(self):
		"""Test fma as *bytes_intnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_floatarray_1147(self):
		"""Test fma as *bytes_intnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_floatnum_1148(self):
		"""Test fma as *bytes_intnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_intarray_1149(self):
		"""Test fma as *bytes_intnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_intnum_1150(self):
		"""Test fma as *bytes_intnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_bytes_1151(self):
		"""Test fma as *bytes_intnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_str_1152(self):
		"""Test fma as *bytes_intnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_intnum_none_1153(self):
		"""Test fma as *bytes_intnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_floatarray_1154(self):
		"""Test fma as *bytes_intnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_floatnum_1155(self):
		"""Test fma as *bytes_intnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_intarray_1156(self):
		"""Test fma as *bytes_intnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_intnum_1157(self):
		"""Test fma as *bytes_intnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_bytes_1158(self):
		"""Test fma as *bytes_intnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_str_1159(self):
		"""Test fma as *bytes_intnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_bytes_none_1160(self):
		"""Test fma as *bytes_intnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_floatarray_1161(self):
		"""Test fma as *bytes_intnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_floatnum_1162(self):
		"""Test fma as *bytes_intnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_intarray_1163(self):
		"""Test fma as *bytes_intnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_intnum_1164(self):
		"""Test fma as *bytes_intnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_bytes_1165(self):
		"""Test fma as *bytes_intnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_str_1166(self):
		"""Test fma as *bytes_intnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_intnum_str_none_1167(self):
		"""Test fma as *bytes_intnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_floatarray_1168(self):
		"""Test fma as *bytes_bytes_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_floatnum_1169(self):
		"""Test fma as *bytes_bytes_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_intarray_1170(self):
		"""Test fma as *bytes_bytes_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_intnum_1171(self):
		"""Test fma as *bytes_bytes_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_bytes_1172(self):
		"""Test fma as *bytes_bytes_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_str_1173(self):
		"""Test fma as *bytes_bytes_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatarray_none_1174(self):
		"""Test fma as *bytes_bytes_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_floatarray_1175(self):
		"""Test fma as *bytes_bytes_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_floatnum_1176(self):
		"""Test fma as *bytes_bytes_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_intarray_1177(self):
		"""Test fma as *bytes_bytes_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_intnum_1178(self):
		"""Test fma as *bytes_bytes_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_bytes_1179(self):
		"""Test fma as *bytes_bytes_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_str_1180(self):
		"""Test fma as *bytes_bytes_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_floatnum_none_1181(self):
		"""Test fma as *bytes_bytes_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_floatarray_1182(self):
		"""Test fma as *bytes_bytes_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_floatnum_1183(self):
		"""Test fma as *bytes_bytes_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_intarray_1184(self):
		"""Test fma as *bytes_bytes_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_intnum_1185(self):
		"""Test fma as *bytes_bytes_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_bytes_1186(self):
		"""Test fma as *bytes_bytes_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_str_1187(self):
		"""Test fma as *bytes_bytes_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intarray_none_1188(self):
		"""Test fma as *bytes_bytes_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_floatarray_1189(self):
		"""Test fma as *bytes_bytes_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_floatnum_1190(self):
		"""Test fma as *bytes_bytes_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_intarray_1191(self):
		"""Test fma as *bytes_bytes_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_intnum_1192(self):
		"""Test fma as *bytes_bytes_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_bytes_1193(self):
		"""Test fma as *bytes_bytes_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_str_1194(self):
		"""Test fma as *bytes_bytes_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_intnum_none_1195(self):
		"""Test fma as *bytes_bytes_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_floatarray_1196(self):
		"""Test fma as *bytes_bytes_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_floatnum_1197(self):
		"""Test fma as *bytes_bytes_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_intarray_1198(self):
		"""Test fma as *bytes_bytes_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_intnum_1199(self):
		"""Test fma as *bytes_bytes_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_bytes_1200(self):
		"""Test fma as *bytes_bytes_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_str_1201(self):
		"""Test fma as *bytes_bytes_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_bytes_none_1202(self):
		"""Test fma as *bytes_bytes_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_floatarray_1203(self):
		"""Test fma as *bytes_bytes_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_floatnum_1204(self):
		"""Test fma as *bytes_bytes_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_intarray_1205(self):
		"""Test fma as *bytes_bytes_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_intnum_1206(self):
		"""Test fma as *bytes_bytes_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_bytes_1207(self):
		"""Test fma as *bytes_bytes_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_str_1208(self):
		"""Test fma as *bytes_bytes_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_bytes_str_none_1209(self):
		"""Test fma as *bytes_bytes_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_floatarray_1210(self):
		"""Test fma as *bytes_str_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_floatnum_1211(self):
		"""Test fma as *bytes_str_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_intarray_1212(self):
		"""Test fma as *bytes_str_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_intnum_1213(self):
		"""Test fma as *bytes_str_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_bytes_1214(self):
		"""Test fma as *bytes_str_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_str_1215(self):
		"""Test fma as *bytes_str_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatarray_none_1216(self):
		"""Test fma as *bytes_str_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_floatarray_1217(self):
		"""Test fma as *bytes_str_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_floatnum_1218(self):
		"""Test fma as *bytes_str_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_intarray_1219(self):
		"""Test fma as *bytes_str_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_intnum_1220(self):
		"""Test fma as *bytes_str_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_bytes_1221(self):
		"""Test fma as *bytes_str_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_str_1222(self):
		"""Test fma as *bytes_str_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_floatnum_none_1223(self):
		"""Test fma as *bytes_str_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_floatarray_1224(self):
		"""Test fma as *bytes_str_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_floatnum_1225(self):
		"""Test fma as *bytes_str_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_intarray_1226(self):
		"""Test fma as *bytes_str_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_intnum_1227(self):
		"""Test fma as *bytes_str_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_bytes_1228(self):
		"""Test fma as *bytes_str_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_str_1229(self):
		"""Test fma as *bytes_str_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_intarray_none_1230(self):
		"""Test fma as *bytes_str_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_floatarray_1231(self):
		"""Test fma as *bytes_str_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_floatnum_1232(self):
		"""Test fma as *bytes_str_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_intarray_1233(self):
		"""Test fma as *bytes_str_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_intnum_1234(self):
		"""Test fma as *bytes_str_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_bytes_1235(self):
		"""Test fma as *bytes_str_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_str_1236(self):
		"""Test fma as *bytes_str_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_intnum_none_1237(self):
		"""Test fma as *bytes_str_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_floatarray_1238(self):
		"""Test fma as *bytes_str_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_floatnum_1239(self):
		"""Test fma as *bytes_str_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_intarray_1240(self):
		"""Test fma as *bytes_str_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_intnum_1241(self):
		"""Test fma as *bytes_str_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_bytes_1242(self):
		"""Test fma as *bytes_str_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_str_1243(self):
		"""Test fma as *bytes_str_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_bytes_none_1244(self):
		"""Test fma as *bytes_str_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_bytes_str_str_floatarray_1245(self):
		"""Test fma as *bytes_str_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_floatnum_1246(self):
		"""Test fma as *bytes_str_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_intarray_1247(self):
		"""Test fma as *bytes_str_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_intnum_1248(self):
		"""Test fma as *bytes_str_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_bytes_1249(self):
		"""Test fma as *bytes_str_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_str_1250(self):
		"""Test fma as *bytes_str_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_bytes_str_str_none_1251(self):
		"""Test fma as *bytes_str_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.bytesx, self.stry, self.strz)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_floatarray_1252(self):
		"""Test fma as *str_floatarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_floatnum_1253(self):
		"""Test fma as *str_floatarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_intarray_1254(self):
		"""Test fma as *str_floatarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_intnum_1255(self):
		"""Test fma as *str_floatarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_bytes_1256(self):
		"""Test fma as *str_floatarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_str_1257(self):
		"""Test fma as *str_floatarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatarray_none_1258(self):
		"""Test fma as *str_floatarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_floatarray_1259(self):
		"""Test fma as *str_floatarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_floatnum_1260(self):
		"""Test fma as *str_floatarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_intarray_1261(self):
		"""Test fma as *str_floatarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_intnum_1262(self):
		"""Test fma as *str_floatarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_bytes_1263(self):
		"""Test fma as *str_floatarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_str_1264(self):
		"""Test fma as *str_floatarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_floatnum_none_1265(self):
		"""Test fma as *str_floatarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_floatarray_1266(self):
		"""Test fma as *str_floatarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_floatnum_1267(self):
		"""Test fma as *str_floatarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_intarray_1268(self):
		"""Test fma as *str_floatarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_intnum_1269(self):
		"""Test fma as *str_floatarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_bytes_1270(self):
		"""Test fma as *str_floatarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_str_1271(self):
		"""Test fma as *str_floatarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intarray_none_1272(self):
		"""Test fma as *str_floatarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_floatarray_1273(self):
		"""Test fma as *str_floatarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_floatnum_1274(self):
		"""Test fma as *str_floatarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_intarray_1275(self):
		"""Test fma as *str_floatarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_intnum_1276(self):
		"""Test fma as *str_floatarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_bytes_1277(self):
		"""Test fma as *str_floatarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_str_1278(self):
		"""Test fma as *str_floatarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_intnum_none_1279(self):
		"""Test fma as *str_floatarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_floatarray_1280(self):
		"""Test fma as *str_floatarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_floatnum_1281(self):
		"""Test fma as *str_floatarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_intarray_1282(self):
		"""Test fma as *str_floatarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_intnum_1283(self):
		"""Test fma as *str_floatarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_bytes_1284(self):
		"""Test fma as *str_floatarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_str_1285(self):
		"""Test fma as *str_floatarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_bytes_none_1286(self):
		"""Test fma as *str_floatarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_floatarray_1287(self):
		"""Test fma as *str_floatarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_floatnum_1288(self):
		"""Test fma as *str_floatarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_intarray_1289(self):
		"""Test fma as *str_floatarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_intnum_1290(self):
		"""Test fma as *str_floatarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_bytes_1291(self):
		"""Test fma as *str_floatarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_str_1292(self):
		"""Test fma as *str_floatarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatarray_str_none_1293(self):
		"""Test fma as *str_floatarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_floatarray_1294(self):
		"""Test fma as *str_floatnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_floatnum_1295(self):
		"""Test fma as *str_floatnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_intarray_1296(self):
		"""Test fma as *str_floatnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_intnum_1297(self):
		"""Test fma as *str_floatnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_bytes_1298(self):
		"""Test fma as *str_floatnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_str_1299(self):
		"""Test fma as *str_floatnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatarray_none_1300(self):
		"""Test fma as *str_floatnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_floatarray_1301(self):
		"""Test fma as *str_floatnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_floatnum_1302(self):
		"""Test fma as *str_floatnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_intarray_1303(self):
		"""Test fma as *str_floatnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_intnum_1304(self):
		"""Test fma as *str_floatnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_bytes_1305(self):
		"""Test fma as *str_floatnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_str_1306(self):
		"""Test fma as *str_floatnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_floatnum_none_1307(self):
		"""Test fma as *str_floatnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_floatarray_1308(self):
		"""Test fma as *str_floatnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_floatnum_1309(self):
		"""Test fma as *str_floatnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_intarray_1310(self):
		"""Test fma as *str_floatnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_intnum_1311(self):
		"""Test fma as *str_floatnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_bytes_1312(self):
		"""Test fma as *str_floatnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_str_1313(self):
		"""Test fma as *str_floatnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intarray_none_1314(self):
		"""Test fma as *str_floatnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_floatarray_1315(self):
		"""Test fma as *str_floatnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_floatnum_1316(self):
		"""Test fma as *str_floatnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_intarray_1317(self):
		"""Test fma as *str_floatnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_intnum_1318(self):
		"""Test fma as *str_floatnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_bytes_1319(self):
		"""Test fma as *str_floatnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_str_1320(self):
		"""Test fma as *str_floatnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_intnum_none_1321(self):
		"""Test fma as *str_floatnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_floatarray_1322(self):
		"""Test fma as *str_floatnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_floatnum_1323(self):
		"""Test fma as *str_floatnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_intarray_1324(self):
		"""Test fma as *str_floatnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_intnum_1325(self):
		"""Test fma as *str_floatnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_bytes_1326(self):
		"""Test fma as *str_floatnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_str_1327(self):
		"""Test fma as *str_floatnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_bytes_none_1328(self):
		"""Test fma as *str_floatnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_floatarray_1329(self):
		"""Test fma as *str_floatnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_floatnum_1330(self):
		"""Test fma as *str_floatnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_intarray_1331(self):
		"""Test fma as *str_floatnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_intnum_1332(self):
		"""Test fma as *str_floatnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_bytes_1333(self):
		"""Test fma as *str_floatnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_str_1334(self):
		"""Test fma as *str_floatnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_floatnum_str_none_1335(self):
		"""Test fma as *str_floatnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.floatnumy, self.strz)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_floatarray_1336(self):
		"""Test fma as *str_intarray_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_floatnum_1337(self):
		"""Test fma as *str_intarray_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_intarray_1338(self):
		"""Test fma as *str_intarray_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_intnum_1339(self):
		"""Test fma as *str_intarray_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_bytes_1340(self):
		"""Test fma as *str_intarray_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_str_1341(self):
		"""Test fma as *str_intarray_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatarray_none_1342(self):
		"""Test fma as *str_intarray_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_floatarray_1343(self):
		"""Test fma as *str_intarray_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_floatnum_1344(self):
		"""Test fma as *str_intarray_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_intarray_1345(self):
		"""Test fma as *str_intarray_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_intnum_1346(self):
		"""Test fma as *str_intarray_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_bytes_1347(self):
		"""Test fma as *str_intarray_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_str_1348(self):
		"""Test fma as *str_intarray_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_floatnum_none_1349(self):
		"""Test fma as *str_intarray_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_floatarray_1350(self):
		"""Test fma as *str_intarray_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_floatnum_1351(self):
		"""Test fma as *str_intarray_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_intarray_1352(self):
		"""Test fma as *str_intarray_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_intnum_1353(self):
		"""Test fma as *str_intarray_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_bytes_1354(self):
		"""Test fma as *str_intarray_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_str_1355(self):
		"""Test fma as *str_intarray_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_intarray_none_1356(self):
		"""Test fma as *str_intarray_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_floatarray_1357(self):
		"""Test fma as *str_intarray_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_floatnum_1358(self):
		"""Test fma as *str_intarray_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_intarray_1359(self):
		"""Test fma as *str_intarray_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_intnum_1360(self):
		"""Test fma as *str_intarray_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_bytes_1361(self):
		"""Test fma as *str_intarray_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_str_1362(self):
		"""Test fma as *str_intarray_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_intnum_none_1363(self):
		"""Test fma as *str_intarray_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_floatarray_1364(self):
		"""Test fma as *str_intarray_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_floatnum_1365(self):
		"""Test fma as *str_intarray_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_intarray_1366(self):
		"""Test fma as *str_intarray_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_intnum_1367(self):
		"""Test fma as *str_intarray_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_bytes_1368(self):
		"""Test fma as *str_intarray_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_str_1369(self):
		"""Test fma as *str_intarray_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_bytes_none_1370(self):
		"""Test fma as *str_intarray_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_intarray_str_floatarray_1371(self):
		"""Test fma as *str_intarray_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_floatnum_1372(self):
		"""Test fma as *str_intarray_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_intarray_1373(self):
		"""Test fma as *str_intarray_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_intnum_1374(self):
		"""Test fma as *str_intarray_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_bytes_1375(self):
		"""Test fma as *str_intarray_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_str_1376(self):
		"""Test fma as *str_intarray_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intarray_str_none_1377(self):
		"""Test fma as *str_intarray_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intarrayy, self.strz)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_floatarray_1378(self):
		"""Test fma as *str_intnum_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_floatnum_1379(self):
		"""Test fma as *str_intnum_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_intarray_1380(self):
		"""Test fma as *str_intnum_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_intnum_1381(self):
		"""Test fma as *str_intnum_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_bytes_1382(self):
		"""Test fma as *str_intnum_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_str_1383(self):
		"""Test fma as *str_intnum_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatarray_none_1384(self):
		"""Test fma as *str_intnum_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_floatarray_1385(self):
		"""Test fma as *str_intnum_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_floatnum_1386(self):
		"""Test fma as *str_intnum_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_intarray_1387(self):
		"""Test fma as *str_intnum_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_intnum_1388(self):
		"""Test fma as *str_intnum_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_bytes_1389(self):
		"""Test fma as *str_intnum_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_str_1390(self):
		"""Test fma as *str_intnum_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_floatnum_none_1391(self):
		"""Test fma as *str_intnum_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_floatarray_1392(self):
		"""Test fma as *str_intnum_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_floatnum_1393(self):
		"""Test fma as *str_intnum_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_intarray_1394(self):
		"""Test fma as *str_intnum_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_intnum_1395(self):
		"""Test fma as *str_intnum_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_bytes_1396(self):
		"""Test fma as *str_intnum_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_str_1397(self):
		"""Test fma as *str_intnum_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_intarray_none_1398(self):
		"""Test fma as *str_intnum_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_floatarray_1399(self):
		"""Test fma as *str_intnum_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_floatnum_1400(self):
		"""Test fma as *str_intnum_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_intarray_1401(self):
		"""Test fma as *str_intnum_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_intnum_1402(self):
		"""Test fma as *str_intnum_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_bytes_1403(self):
		"""Test fma as *str_intnum_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_str_1404(self):
		"""Test fma as *str_intnum_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_intnum_none_1405(self):
		"""Test fma as *str_intnum_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_floatarray_1406(self):
		"""Test fma as *str_intnum_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_floatnum_1407(self):
		"""Test fma as *str_intnum_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_intarray_1408(self):
		"""Test fma as *str_intnum_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_intnum_1409(self):
		"""Test fma as *str_intnum_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_bytes_1410(self):
		"""Test fma as *str_intnum_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_str_1411(self):
		"""Test fma as *str_intnum_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_bytes_none_1412(self):
		"""Test fma as *str_intnum_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_intnum_str_floatarray_1413(self):
		"""Test fma as *str_intnum_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_floatnum_1414(self):
		"""Test fma as *str_intnum_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_intarray_1415(self):
		"""Test fma as *str_intnum_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_intnum_1416(self):
		"""Test fma as *str_intnum_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_bytes_1417(self):
		"""Test fma as *str_intnum_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_str_1418(self):
		"""Test fma as *str_intnum_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_intnum_str_none_1419(self):
		"""Test fma as *str_intnum_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatnumy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.intnumy, self.strz)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_floatarray_1420(self):
		"""Test fma as *str_bytes_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_floatnum_1421(self):
		"""Test fma as *str_bytes_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_intarray_1422(self):
		"""Test fma as *str_bytes_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_intnum_1423(self):
		"""Test fma as *str_bytes_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_bytes_1424(self):
		"""Test fma as *str_bytes_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_str_1425(self):
		"""Test fma as *str_bytes_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatarray_none_1426(self):
		"""Test fma as *str_bytes_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_floatarray_1427(self):
		"""Test fma as *str_bytes_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_floatnum_1428(self):
		"""Test fma as *str_bytes_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_intarray_1429(self):
		"""Test fma as *str_bytes_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_intnum_1430(self):
		"""Test fma as *str_bytes_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_bytes_1431(self):
		"""Test fma as *str_bytes_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_str_1432(self):
		"""Test fma as *str_bytes_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_floatnum_none_1433(self):
		"""Test fma as *str_bytes_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_floatarray_1434(self):
		"""Test fma as *str_bytes_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_floatnum_1435(self):
		"""Test fma as *str_bytes_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_intarray_1436(self):
		"""Test fma as *str_bytes_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_intnum_1437(self):
		"""Test fma as *str_bytes_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_bytes_1438(self):
		"""Test fma as *str_bytes_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_str_1439(self):
		"""Test fma as *str_bytes_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_intarray_none_1440(self):
		"""Test fma as *str_bytes_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_floatarray_1441(self):
		"""Test fma as *str_bytes_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_floatnum_1442(self):
		"""Test fma as *str_bytes_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_intarray_1443(self):
		"""Test fma as *str_bytes_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_intnum_1444(self):
		"""Test fma as *str_bytes_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_bytes_1445(self):
		"""Test fma as *str_bytes_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_str_1446(self):
		"""Test fma as *str_bytes_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_intnum_none_1447(self):
		"""Test fma as *str_bytes_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_floatarray_1448(self):
		"""Test fma as *str_bytes_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_floatnum_1449(self):
		"""Test fma as *str_bytes_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_intarray_1450(self):
		"""Test fma as *str_bytes_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_intnum_1451(self):
		"""Test fma as *str_bytes_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_bytes_1452(self):
		"""Test fma as *str_bytes_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_str_1453(self):
		"""Test fma as *str_bytes_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_bytes_none_1454(self):
		"""Test fma as *str_bytes_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_bytes_str_floatarray_1455(self):
		"""Test fma as *str_bytes_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_floatnum_1456(self):
		"""Test fma as *str_bytes_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_intarray_1457(self):
		"""Test fma as *str_bytes_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_intnum_1458(self):
		"""Test fma as *str_bytes_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_bytes_1459(self):
		"""Test fma as *str_bytes_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_str_1460(self):
		"""Test fma as *str_bytes_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_bytes_str_none_1461(self):
		"""Test fma as *str_bytes_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.bytesy, self.strz)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_floatarray_1462(self):
		"""Test fma as *str_str_floatarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_floatnum_1463(self):
		"""Test fma as *str_str_floatarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_intarray_1464(self):
		"""Test fma as *str_str_floatarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_intnum_1465(self):
		"""Test fma as *str_str_floatarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_bytes_1466(self):
		"""Test fma as *str_str_floatarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_str_1467(self):
		"""Test fma as *str_str_floatarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_floatarray_none_1468(self):
		"""Test fma as *str_str_floatarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatarrayz)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_floatarray_1469(self):
		"""Test fma as *str_str_floatnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_floatnum_1470(self):
		"""Test fma as *str_str_floatnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_intarray_1471(self):
		"""Test fma as *str_str_floatnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_intnum_1472(self):
		"""Test fma as *str_str_floatnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_bytes_1473(self):
		"""Test fma as *str_str_floatnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_str_1474(self):
		"""Test fma as *str_str_floatnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_floatnum_none_1475(self):
		"""Test fma as *str_str_floatnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.floatnumz)


	########################################################
	def test_fma_invalid_param_str_str_intarray_floatarray_1476(self):
		"""Test fma as *str_str_intarray_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_floatnum_1477(self):
		"""Test fma as *str_str_intarray_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_intarray_1478(self):
		"""Test fma as *str_str_intarray_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_intnum_1479(self):
		"""Test fma as *str_str_intarray_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_bytes_1480(self):
		"""Test fma as *str_str_intarray_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_str_1481(self):
		"""Test fma as *str_str_intarray_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_intarray_none_1482(self):
		"""Test fma as *str_str_intarray_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intarrayz)


	########################################################
	def test_fma_invalid_param_str_str_intnum_floatarray_1483(self):
		"""Test fma as *str_str_intnum_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_floatnum_1484(self):
		"""Test fma as *str_str_intnum_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_intarray_1485(self):
		"""Test fma as *str_str_intnum_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_intnum_1486(self):
		"""Test fma as *str_str_intnum_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_bytes_1487(self):
		"""Test fma as *str_str_intnum_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_str_1488(self):
		"""Test fma as *str_str_intnum_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_intnum_none_1489(self):
		"""Test fma as *str_str_intnum_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatnumz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.intnumz)


	########################################################
	def test_fma_invalid_param_str_str_bytes_floatarray_1490(self):
		"""Test fma as *str_str_bytes_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_floatnum_1491(self):
		"""Test fma as *str_str_bytes_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_intarray_1492(self):
		"""Test fma as *str_str_bytes_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_intnum_1493(self):
		"""Test fma as *str_str_bytes_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_bytes_1494(self):
		"""Test fma as *str_str_bytes_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_str_1495(self):
		"""Test fma as *str_str_bytes_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_bytes_none_1496(self):
		"""Test fma as *str_str_bytes_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.bytesz)


	########################################################
	def test_fma_invalid_param_str_str_str_floatarray_1497(self):
		"""Test fma as *str_str_str_floatarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.floatarrayout)


	########################################################
	def test_fma_invalid_param_str_str_str_floatnum_1498(self):
		"""Test fma as *str_str_str_floatnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.floatnumout)


	########################################################
	def test_fma_invalid_param_str_str_str_intarray_1499(self):
		"""Test fma as *str_str_str_intarray* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.intarrayout)


	########################################################
	def test_fma_invalid_param_str_str_str_intnum_1500(self):
		"""Test fma as *str_str_str_intnum* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.intnumout)


	########################################################
	def test_fma_invalid_param_str_str_str_bytes_1501(self):
		"""Test fma as *str_str_str_bytes* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.bytesout)


	########################################################
	def test_fma_invalid_param_str_str_str_str_1502(self):
		"""Test fma as *str_str_str_str* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz, self.floatarrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz, self.strout)


	########################################################
	def test_fma_invalid_param_str_str_str_none_1503(self):
		"""Test fma as *str_str_str_none* for invalid integer array - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.floatarrayx, self.floatarrayy, self.floatarrayz)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.strx, self.stry, self.strz)



##############################################################################



##############################################################################
class fma_param_errors_numbers_d(unittest.TestCase):
	"""Test for invalid parameters.
	param_invalid_options_template
	"""


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		xdata = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]
		arraysize =  len(xdata)

		# Floating point test data.
		self.arrayx = array.array('d', xdata)
		self.arrayy = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.arrayz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.arrayout = array.array('d', itertools.repeat(0.0, arraysize))

		# Take an arbitrary value from each data array for when we need only a single value.
		self.numx = self.arrayx[1]
		self.numy = self.arrayy[1]
		self.numz = self.arrayz[1]



	########################################################
	def test_fma_array_num_num_none_a1(self):
		"""Test fma as *array_num_num_array* for matherrors='a' - Array code d.
		"""
		# Copy the array so we don't change the original data.
		arrayx = copy.copy(self.arrayx)

		# This version is expected to pass.
		arrayfunc.fma(arrayx, self.numy, self.numz, matherrors=True)

		arrayx = copy.copy(self.arrayx)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(arrayx, self.numy, self.numz, matherrors='a')


	########################################################
	def test_fma_array_num_num_array_a2(self):
		"""Test fma as *array_num_num_array* for matherrors='a' - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, matherrors=True)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, matherrors='a')



	########################################################
	def test_fma_array_num_num_none_b1(self):
		"""Test fma as *array_num_num_array* for maxlen='a' - Array code d.
		"""
		# Copy the array so we don't change the original data.
		arrayx = copy.copy(self.arrayx)

		# This version is expected to pass.
		arrayfunc.fma(arrayx, self.numy, self.numz, maxlen=True)

		arrayx = copy.copy(self.arrayx)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(arrayx, self.numy, self.numz, maxlen='a')


	########################################################
	def test_fma_array_num_num_array_b2(self):
		"""Test fma as *array_num_num_array* for maxlen='a' - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, maxlen=True)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, maxlen='a')



	########################################################
	def test_fma_array_num_num_none_c1(self):
		"""Test fma as *array_num_num_array* for badparam=True - Array code d.
		"""
		# Copy the array so we don't change the original data.
		arrayx = copy.copy(self.arrayx)

		# This version is expected to pass.
		arrayfunc.fma(arrayx, self.numy, self.numz)

		arrayx = copy.copy(self.arrayx)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(arrayx, self.numy, self.numz, badparam=True)


	########################################################
	def test_fma_array_num_num_array_c2(self):
		"""Test fma as *array_num_num_array* for badparam=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout)

		# This is the actual test.
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy, self.numz, self.arrayout, badparam=True)



	########################################################
	def test_fma_array_num_array_d1(self):
		"""Test fma as *array_num* for missing numeric parameter - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.numy)


	########################################################
	def test_fma_array_num_array_d2(self):
		"""Test fma as *array_num* for missing array parameter - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx, self.arrayy)


	########################################################
	def test_fma_array_num_array_e1(self):
		"""Test fma as *array_num* for two missing numeric parameters - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma(self.arrayx)


	########################################################
	def test_fma_no_params_f1(self):
		"""Test fma with no parameters - Array code d.
		"""
		with self.assertRaises(TypeError):
			arrayfunc.fma()



##############################################################################



##############################################################################
class fma_finite_errors_d(unittest.TestCase):
	"""Test for non-finite parameters, nan, inf, -inf.
	nan_data_error_fma_template
	"""

	##############################################################################
	def FloatassertEqual(self, expecteditem, dataoutitem, msg=None):
		"""This function is patched into assertEqual to allow testing for 
		the floating point special values NaN, Inf, and -Inf.
		"""
		# NaN cannot be compared using normal means.
		if math.isnan(dataoutitem) and math.isnan(expecteditem):
			pass
		# Anything else can be compared normally.
		else:
			if not math.isclose(expecteditem, dataoutitem, rel_tol=0.01, abs_tol=0.0):
				raise self.failureException('%0.3f != %0.3f' % (expecteditem, dataoutitem))


	########################################################
	def setUp(self):
		"""Initialise.
		"""
		self.addTypeEqualityFunc(float, self.FloatassertEqual)

		xdata = [0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]
		self.arraysize = len(xdata)

		# Floating point test data.
		self.okarrayx = array.array('d', xdata)
		self.okarrayy = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.okarrayz = array.array('d', [x for (x,y) in zip(itertools.cycle([-2.0, -1.0, 1.0, 2.0]), xdata)])
		self.arrayout = array.array('d', itertools.repeat(0.0, self.arraysize))

		# Take an arbitrary value from each data array for when we need only a single value.
		self.oknumx = self.okarrayx[1]
		self.oknumy = self.okarrayy[1]
		self.oknumz = self.okarrayz[1]

		# NaN as array.
		self.nanarrayx = array.array('d', itertools.repeat(math.nan, self.arraysize))
		self.nanarrayy = array.array('d', itertools.repeat(math.nan, self.arraysize))
		self.nanarrayz = array.array('d', itertools.repeat(math.nan, self.arraysize))

		# NaN as individual value.
		self.nannumx = math.nan
		self.nannumy = math.nan
		self.nannumz = math.nan

		# inf as array.
		self.infarrayx = array.array('d', itertools.repeat(math.inf, self.arraysize))
		self.infarrayy = array.array('d', itertools.repeat(math.inf, self.arraysize))
		self.infarrayz = array.array('d', itertools.repeat(math.inf, self.arraysize))

		# inf as individual value.
		self.infnumx = math.inf
		self.infnumy = math.inf
		self.infnumz = math.inf

		# Negative inf as array.
		self.ninfarrayx = array.array('d', itertools.repeat(-math.inf, self.arraysize))
		self.ninfarrayy = array.array('d', itertools.repeat(-math.inf, self.arraysize))
		self.ninfarrayz = array.array('d', itertools.repeat(-math.inf, self.arraysize))

		# Negative inf as individual value.
		self.ninfnumx = -math.inf
		self.ninfnumy = -math.inf
		self.ninfnumz = -math.inf


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_okarray_a_0(self):
		"""Test fma as *okarray_okarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_okarray_b_0(self):
		"""Test fma as *okarray_okarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_none_a_1(self):
		"""Test fma as *okarray_okarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_okarray_nanarray_none_b_1(self):
		"""Test fma as *okarray_okarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_okarray_a_2(self):
		"""Test fma as *okarray_okarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_okarray_b_2(self):
		"""Test fma as *okarray_okarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_none_a_3(self):
		"""Test fma as *okarray_okarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_okarray_nannum_none_b_3(self):
		"""Test fma as *okarray_okarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_okarray_a_4(self):
		"""Test fma as *okarray_okarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_okarray_b_4(self):
		"""Test fma as *okarray_okarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_none_a_5(self):
		"""Test fma as *okarray_okarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_okarray_infarray_none_b_5(self):
		"""Test fma as *okarray_okarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_okarray_a_6(self):
		"""Test fma as *okarray_okarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_okarray_b_6(self):
		"""Test fma as *okarray_okarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_none_a_7(self):
		"""Test fma as *okarray_okarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_okarray_infnum_none_b_7(self):
		"""Test fma as *okarray_okarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_okarray_a_8(self):
		"""Test fma as *okarray_okarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_okarray_b_8(self):
		"""Test fma as *okarray_okarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_none_a_9(self):
		"""Test fma as *okarray_okarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfarray_none_b_9(self):
		"""Test fma as *okarray_okarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_okarray_a_10(self):
		"""Test fma as *okarray_okarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_okarray_b_10(self):
		"""Test fma as *okarray_okarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_none_a_11(self):
		"""Test fma as *okarray_okarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_okarray_ninfnum_none_b_11(self):
		"""Test fma as *okarray_okarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_okarray_a_12(self):
		"""Test fma as *okarray_oknum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_okarray_b_12(self):
		"""Test fma as *okarray_oknum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_none_a_13(self):
		"""Test fma as *okarray_oknum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_oknum_nanarray_none_b_13(self):
		"""Test fma as *okarray_oknum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_okarray_a_14(self):
		"""Test fma as *okarray_oknum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_okarray_b_14(self):
		"""Test fma as *okarray_oknum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_none_a_15(self):
		"""Test fma as *okarray_oknum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_oknum_nannum_none_b_15(self):
		"""Test fma as *okarray_oknum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_okarray_a_16(self):
		"""Test fma as *okarray_oknum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_okarray_b_16(self):
		"""Test fma as *okarray_oknum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_none_a_17(self):
		"""Test fma as *okarray_oknum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_oknum_infarray_none_b_17(self):
		"""Test fma as *okarray_oknum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_okarray_a_18(self):
		"""Test fma as *okarray_oknum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_okarray_b_18(self):
		"""Test fma as *okarray_oknum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_none_a_19(self):
		"""Test fma as *okarray_oknum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_oknum_infnum_none_b_19(self):
		"""Test fma as *okarray_oknum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_okarray_a_20(self):
		"""Test fma as *okarray_oknum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_okarray_b_20(self):
		"""Test fma as *okarray_oknum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_none_a_21(self):
		"""Test fma as *okarray_oknum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfarray_none_b_21(self):
		"""Test fma as *okarray_oknum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_okarray_a_22(self):
		"""Test fma as *okarray_oknum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_okarray_b_22(self):
		"""Test fma as *okarray_oknum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_none_a_23(self):
		"""Test fma as *okarray_oknum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_oknum_ninfnum_none_b_23(self):
		"""Test fma as *okarray_oknum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_okarray_a_24(self):
		"""Test fma as *okarray_nanarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_okarray_b_24(self):
		"""Test fma as *okarray_nanarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_none_a_25(self):
		"""Test fma as *okarray_nanarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_okarray_none_b_25(self):
		"""Test fma as *okarray_nanarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_okarray_a_26(self):
		"""Test fma as *okarray_nanarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_okarray_b_26(self):
		"""Test fma as *okarray_nanarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_none_a_27(self):
		"""Test fma as *okarray_nanarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_oknum_none_b_27(self):
		"""Test fma as *okarray_nanarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_okarray_a_28(self):
		"""Test fma as *okarray_nanarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_okarray_b_28(self):
		"""Test fma as *okarray_nanarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_none_a_29(self):
		"""Test fma as *okarray_nanarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nanarray_none_b_29(self):
		"""Test fma as *okarray_nanarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_okarray_a_30(self):
		"""Test fma as *okarray_nanarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_okarray_b_30(self):
		"""Test fma as *okarray_nanarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_none_a_31(self):
		"""Test fma as *okarray_nanarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_nannum_none_b_31(self):
		"""Test fma as *okarray_nanarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_okarray_a_32(self):
		"""Test fma as *okarray_nanarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_okarray_b_32(self):
		"""Test fma as *okarray_nanarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_none_a_33(self):
		"""Test fma as *okarray_nanarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infarray_none_b_33(self):
		"""Test fma as *okarray_nanarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_okarray_a_34(self):
		"""Test fma as *okarray_nanarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_okarray_b_34(self):
		"""Test fma as *okarray_nanarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_none_a_35(self):
		"""Test fma as *okarray_nanarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_infnum_none_b_35(self):
		"""Test fma as *okarray_nanarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_okarray_a_36(self):
		"""Test fma as *okarray_nanarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_okarray_b_36(self):
		"""Test fma as *okarray_nanarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_none_a_37(self):
		"""Test fma as *okarray_nanarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfarray_none_b_37(self):
		"""Test fma as *okarray_nanarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_okarray_a_38(self):
		"""Test fma as *okarray_nanarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_okarray_b_38(self):
		"""Test fma as *okarray_nanarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_none_a_39(self):
		"""Test fma as *okarray_nanarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_nanarray_ninfnum_none_b_39(self):
		"""Test fma as *okarray_nanarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_okarray_a_40(self):
		"""Test fma as *okarray_nannum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_okarray_b_40(self):
		"""Test fma as *okarray_nannum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_none_a_41(self):
		"""Test fma as *okarray_nannum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_okarray_none_b_41(self):
		"""Test fma as *okarray_nannum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_okarray_a_42(self):
		"""Test fma as *okarray_nannum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_okarray_b_42(self):
		"""Test fma as *okarray_nannum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_none_a_43(self):
		"""Test fma as *okarray_nannum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_oknum_none_b_43(self):
		"""Test fma as *okarray_nannum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_okarray_a_44(self):
		"""Test fma as *okarray_nannum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_okarray_b_44(self):
		"""Test fma as *okarray_nannum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_none_a_45(self):
		"""Test fma as *okarray_nannum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_nanarray_none_b_45(self):
		"""Test fma as *okarray_nannum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_okarray_a_46(self):
		"""Test fma as *okarray_nannum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_okarray_b_46(self):
		"""Test fma as *okarray_nannum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_none_a_47(self):
		"""Test fma as *okarray_nannum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_nannum_none_b_47(self):
		"""Test fma as *okarray_nannum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_okarray_a_48(self):
		"""Test fma as *okarray_nannum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_okarray_b_48(self):
		"""Test fma as *okarray_nannum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_none_a_49(self):
		"""Test fma as *okarray_nannum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_infarray_none_b_49(self):
		"""Test fma as *okarray_nannum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_okarray_a_50(self):
		"""Test fma as *okarray_nannum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_okarray_b_50(self):
		"""Test fma as *okarray_nannum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_none_a_51(self):
		"""Test fma as *okarray_nannum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_infnum_none_b_51(self):
		"""Test fma as *okarray_nannum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_okarray_a_52(self):
		"""Test fma as *okarray_nannum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_okarray_b_52(self):
		"""Test fma as *okarray_nannum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_none_a_53(self):
		"""Test fma as *okarray_nannum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfarray_none_b_53(self):
		"""Test fma as *okarray_nannum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_okarray_a_54(self):
		"""Test fma as *okarray_nannum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_okarray_b_54(self):
		"""Test fma as *okarray_nannum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_none_a_55(self):
		"""Test fma as *okarray_nannum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_nannum_ninfnum_none_b_55(self):
		"""Test fma as *okarray_nannum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_okarray_a_56(self):
		"""Test fma as *okarray_infarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_okarray_b_56(self):
		"""Test fma as *okarray_infarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_none_a_57(self):
		"""Test fma as *okarray_infarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_okarray_none_b_57(self):
		"""Test fma as *okarray_infarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_okarray_a_58(self):
		"""Test fma as *okarray_infarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_okarray_b_58(self):
		"""Test fma as *okarray_infarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_none_a_59(self):
		"""Test fma as *okarray_infarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_oknum_none_b_59(self):
		"""Test fma as *okarray_infarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_okarray_a_60(self):
		"""Test fma as *okarray_infarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_okarray_b_60(self):
		"""Test fma as *okarray_infarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_none_a_61(self):
		"""Test fma as *okarray_infarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_nanarray_none_b_61(self):
		"""Test fma as *okarray_infarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_okarray_a_62(self):
		"""Test fma as *okarray_infarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_okarray_b_62(self):
		"""Test fma as *okarray_infarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_none_a_63(self):
		"""Test fma as *okarray_infarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_nannum_none_b_63(self):
		"""Test fma as *okarray_infarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_okarray_a_64(self):
		"""Test fma as *okarray_infarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_okarray_b_64(self):
		"""Test fma as *okarray_infarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_none_a_65(self):
		"""Test fma as *okarray_infarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_infarray_none_b_65(self):
		"""Test fma as *okarray_infarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_okarray_a_66(self):
		"""Test fma as *okarray_infarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_okarray_b_66(self):
		"""Test fma as *okarray_infarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_none_a_67(self):
		"""Test fma as *okarray_infarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_infnum_none_b_67(self):
		"""Test fma as *okarray_infarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_okarray_a_68(self):
		"""Test fma as *okarray_infarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_okarray_b_68(self):
		"""Test fma as *okarray_infarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_none_a_69(self):
		"""Test fma as *okarray_infarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfarray_none_b_69(self):
		"""Test fma as *okarray_infarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_okarray_a_70(self):
		"""Test fma as *okarray_infarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_okarray_b_70(self):
		"""Test fma as *okarray_infarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_none_a_71(self):
		"""Test fma as *okarray_infarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_infarray_ninfnum_none_b_71(self):
		"""Test fma as *okarray_infarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_okarray_a_72(self):
		"""Test fma as *okarray_infnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_okarray_b_72(self):
		"""Test fma as *okarray_infnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_none_a_73(self):
		"""Test fma as *okarray_infnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_okarray_none_b_73(self):
		"""Test fma as *okarray_infnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_okarray_a_74(self):
		"""Test fma as *okarray_infnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_okarray_b_74(self):
		"""Test fma as *okarray_infnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_none_a_75(self):
		"""Test fma as *okarray_infnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_oknum_none_b_75(self):
		"""Test fma as *okarray_infnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_okarray_a_76(self):
		"""Test fma as *okarray_infnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_okarray_b_76(self):
		"""Test fma as *okarray_infnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_none_a_77(self):
		"""Test fma as *okarray_infnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_nanarray_none_b_77(self):
		"""Test fma as *okarray_infnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_okarray_a_78(self):
		"""Test fma as *okarray_infnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_okarray_b_78(self):
		"""Test fma as *okarray_infnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_none_a_79(self):
		"""Test fma as *okarray_infnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_nannum_none_b_79(self):
		"""Test fma as *okarray_infnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_okarray_a_80(self):
		"""Test fma as *okarray_infnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_okarray_b_80(self):
		"""Test fma as *okarray_infnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_none_a_81(self):
		"""Test fma as *okarray_infnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_infarray_none_b_81(self):
		"""Test fma as *okarray_infnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_okarray_a_82(self):
		"""Test fma as *okarray_infnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_okarray_b_82(self):
		"""Test fma as *okarray_infnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_none_a_83(self):
		"""Test fma as *okarray_infnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_infnum_none_b_83(self):
		"""Test fma as *okarray_infnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_okarray_a_84(self):
		"""Test fma as *okarray_infnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_okarray_b_84(self):
		"""Test fma as *okarray_infnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_none_a_85(self):
		"""Test fma as *okarray_infnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfarray_none_b_85(self):
		"""Test fma as *okarray_infnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_okarray_a_86(self):
		"""Test fma as *okarray_infnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_okarray_b_86(self):
		"""Test fma as *okarray_infnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_none_a_87(self):
		"""Test fma as *okarray_infnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_infnum_ninfnum_none_b_87(self):
		"""Test fma as *okarray_infnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_okarray_a_88(self):
		"""Test fma as *okarray_ninfarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_okarray_b_88(self):
		"""Test fma as *okarray_ninfarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_none_a_89(self):
		"""Test fma as *okarray_ninfarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_okarray_none_b_89(self):
		"""Test fma as *okarray_ninfarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_okarray_a_90(self):
		"""Test fma as *okarray_ninfarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_okarray_b_90(self):
		"""Test fma as *okarray_ninfarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_none_a_91(self):
		"""Test fma as *okarray_ninfarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_oknum_none_b_91(self):
		"""Test fma as *okarray_ninfarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_okarray_a_92(self):
		"""Test fma as *okarray_ninfarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_okarray_b_92(self):
		"""Test fma as *okarray_ninfarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_none_a_93(self):
		"""Test fma as *okarray_ninfarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nanarray_none_b_93(self):
		"""Test fma as *okarray_ninfarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_okarray_a_94(self):
		"""Test fma as *okarray_ninfarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_okarray_b_94(self):
		"""Test fma as *okarray_ninfarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_none_a_95(self):
		"""Test fma as *okarray_ninfarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_nannum_none_b_95(self):
		"""Test fma as *okarray_ninfarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_okarray_a_96(self):
		"""Test fma as *okarray_ninfarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_okarray_b_96(self):
		"""Test fma as *okarray_ninfarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_none_a_97(self):
		"""Test fma as *okarray_ninfarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infarray_none_b_97(self):
		"""Test fma as *okarray_ninfarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_okarray_a_98(self):
		"""Test fma as *okarray_ninfarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_okarray_b_98(self):
		"""Test fma as *okarray_ninfarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_none_a_99(self):
		"""Test fma as *okarray_ninfarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_infnum_none_b_99(self):
		"""Test fma as *okarray_ninfarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_okarray_a_100(self):
		"""Test fma as *okarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_okarray_b_100(self):
		"""Test fma as *okarray_ninfarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_none_a_101(self):
		"""Test fma as *okarray_ninfarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfarray_none_b_101(self):
		"""Test fma as *okarray_ninfarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_okarray_a_102(self):
		"""Test fma as *okarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_okarray_b_102(self):
		"""Test fma as *okarray_ninfarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_none_a_103(self):
		"""Test fma as *okarray_ninfarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfarray_ninfnum_none_b_103(self):
		"""Test fma as *okarray_ninfarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_okarray_a_104(self):
		"""Test fma as *okarray_ninfnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_okarray_b_104(self):
		"""Test fma as *okarray_ninfnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_none_a_105(self):
		"""Test fma as *okarray_ninfnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_okarray_none_b_105(self):
		"""Test fma as *okarray_ninfnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_okarray_a_106(self):
		"""Test fma as *okarray_ninfnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_okarray_b_106(self):
		"""Test fma as *okarray_ninfnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_none_a_107(self):
		"""Test fma as *okarray_ninfnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_oknum_none_b_107(self):
		"""Test fma as *okarray_ninfnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_okarray_a_108(self):
		"""Test fma as *okarray_ninfnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_okarray_b_108(self):
		"""Test fma as *okarray_ninfnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_none_a_109(self):
		"""Test fma as *okarray_ninfnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nanarray_none_b_109(self):
		"""Test fma as *okarray_ninfnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_okarray_a_110(self):
		"""Test fma as *okarray_ninfnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_okarray_b_110(self):
		"""Test fma as *okarray_ninfnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_none_a_111(self):
		"""Test fma as *okarray_ninfnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_nannum_none_b_111(self):
		"""Test fma as *okarray_ninfnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_okarray_a_112(self):
		"""Test fma as *okarray_ninfnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_okarray_b_112(self):
		"""Test fma as *okarray_ninfnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_none_a_113(self):
		"""Test fma as *okarray_ninfnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infarray_none_b_113(self):
		"""Test fma as *okarray_ninfnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_okarray_a_114(self):
		"""Test fma as *okarray_ninfnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_okarray_b_114(self):
		"""Test fma as *okarray_ninfnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_none_a_115(self):
		"""Test fma as *okarray_ninfnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_infnum_none_b_115(self):
		"""Test fma as *okarray_ninfnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_okarray_a_116(self):
		"""Test fma as *okarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_okarray_b_116(self):
		"""Test fma as *okarray_ninfnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_none_a_117(self):
		"""Test fma as *okarray_ninfnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfarray_none_b_117(self):
		"""Test fma as *okarray_ninfnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_okarray_a_118(self):
		"""Test fma as *okarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_okarray_b_118(self):
		"""Test fma as *okarray_ninfnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_none_a_119(self):
		"""Test fma as *okarray_ninfnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_okarray_ninfnum_ninfnum_none_b_119(self):
		"""Test fma as *okarray_ninfnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.okarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.okarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.okarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_okarray_a_120(self):
		"""Test fma as *nanarray_okarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_okarray_b_120(self):
		"""Test fma as *nanarray_okarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_none_a_121(self):
		"""Test fma as *nanarray_okarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_okarray_none_b_121(self):
		"""Test fma as *nanarray_okarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_okarray_a_122(self):
		"""Test fma as *nanarray_okarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_okarray_b_122(self):
		"""Test fma as *nanarray_okarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_none_a_123(self):
		"""Test fma as *nanarray_okarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_oknum_none_b_123(self):
		"""Test fma as *nanarray_okarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_okarray_a_124(self):
		"""Test fma as *nanarray_okarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_okarray_b_124(self):
		"""Test fma as *nanarray_okarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_none_a_125(self):
		"""Test fma as *nanarray_okarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nanarray_none_b_125(self):
		"""Test fma as *nanarray_okarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_okarray_a_126(self):
		"""Test fma as *nanarray_okarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_okarray_b_126(self):
		"""Test fma as *nanarray_okarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_none_a_127(self):
		"""Test fma as *nanarray_okarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_nannum_none_b_127(self):
		"""Test fma as *nanarray_okarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_okarray_a_128(self):
		"""Test fma as *nanarray_okarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_okarray_b_128(self):
		"""Test fma as *nanarray_okarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_none_a_129(self):
		"""Test fma as *nanarray_okarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infarray_none_b_129(self):
		"""Test fma as *nanarray_okarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_okarray_a_130(self):
		"""Test fma as *nanarray_okarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_okarray_b_130(self):
		"""Test fma as *nanarray_okarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_none_a_131(self):
		"""Test fma as *nanarray_okarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_infnum_none_b_131(self):
		"""Test fma as *nanarray_okarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_okarray_a_132(self):
		"""Test fma as *nanarray_okarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_okarray_b_132(self):
		"""Test fma as *nanarray_okarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_none_a_133(self):
		"""Test fma as *nanarray_okarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfarray_none_b_133(self):
		"""Test fma as *nanarray_okarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_okarray_a_134(self):
		"""Test fma as *nanarray_okarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_okarray_b_134(self):
		"""Test fma as *nanarray_okarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_none_a_135(self):
		"""Test fma as *nanarray_okarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_okarray_ninfnum_none_b_135(self):
		"""Test fma as *nanarray_okarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_okarray_a_136(self):
		"""Test fma as *nanarray_oknum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_okarray_b_136(self):
		"""Test fma as *nanarray_oknum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_none_a_137(self):
		"""Test fma as *nanarray_oknum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_okarray_none_b_137(self):
		"""Test fma as *nanarray_oknum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_okarray_a_138(self):
		"""Test fma as *nanarray_oknum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_okarray_b_138(self):
		"""Test fma as *nanarray_oknum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_none_a_139(self):
		"""Test fma as *nanarray_oknum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_oknum_none_b_139(self):
		"""Test fma as *nanarray_oknum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_okarray_a_140(self):
		"""Test fma as *nanarray_oknum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_okarray_b_140(self):
		"""Test fma as *nanarray_oknum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_none_a_141(self):
		"""Test fma as *nanarray_oknum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nanarray_none_b_141(self):
		"""Test fma as *nanarray_oknum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_okarray_a_142(self):
		"""Test fma as *nanarray_oknum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_okarray_b_142(self):
		"""Test fma as *nanarray_oknum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_none_a_143(self):
		"""Test fma as *nanarray_oknum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_nannum_none_b_143(self):
		"""Test fma as *nanarray_oknum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_okarray_a_144(self):
		"""Test fma as *nanarray_oknum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_okarray_b_144(self):
		"""Test fma as *nanarray_oknum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_none_a_145(self):
		"""Test fma as *nanarray_oknum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infarray_none_b_145(self):
		"""Test fma as *nanarray_oknum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_okarray_a_146(self):
		"""Test fma as *nanarray_oknum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_okarray_b_146(self):
		"""Test fma as *nanarray_oknum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_none_a_147(self):
		"""Test fma as *nanarray_oknum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_infnum_none_b_147(self):
		"""Test fma as *nanarray_oknum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_okarray_a_148(self):
		"""Test fma as *nanarray_oknum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_okarray_b_148(self):
		"""Test fma as *nanarray_oknum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_none_a_149(self):
		"""Test fma as *nanarray_oknum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfarray_none_b_149(self):
		"""Test fma as *nanarray_oknum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_okarray_a_150(self):
		"""Test fma as *nanarray_oknum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_okarray_b_150(self):
		"""Test fma as *nanarray_oknum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_none_a_151(self):
		"""Test fma as *nanarray_oknum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_oknum_ninfnum_none_b_151(self):
		"""Test fma as *nanarray_oknum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_okarray_a_152(self):
		"""Test fma as *nanarray_nanarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_okarray_b_152(self):
		"""Test fma as *nanarray_nanarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_none_a_153(self):
		"""Test fma as *nanarray_nanarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_okarray_none_b_153(self):
		"""Test fma as *nanarray_nanarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_okarray_a_154(self):
		"""Test fma as *nanarray_nanarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_okarray_b_154(self):
		"""Test fma as *nanarray_nanarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_none_a_155(self):
		"""Test fma as *nanarray_nanarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_oknum_none_b_155(self):
		"""Test fma as *nanarray_nanarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_okarray_a_156(self):
		"""Test fma as *nanarray_nanarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_okarray_b_156(self):
		"""Test fma as *nanarray_nanarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_none_a_157(self):
		"""Test fma as *nanarray_nanarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nanarray_none_b_157(self):
		"""Test fma as *nanarray_nanarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_okarray_a_158(self):
		"""Test fma as *nanarray_nanarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_okarray_b_158(self):
		"""Test fma as *nanarray_nanarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_none_a_159(self):
		"""Test fma as *nanarray_nanarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_nannum_none_b_159(self):
		"""Test fma as *nanarray_nanarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_okarray_a_160(self):
		"""Test fma as *nanarray_nanarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_okarray_b_160(self):
		"""Test fma as *nanarray_nanarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_none_a_161(self):
		"""Test fma as *nanarray_nanarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infarray_none_b_161(self):
		"""Test fma as *nanarray_nanarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_okarray_a_162(self):
		"""Test fma as *nanarray_nanarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_okarray_b_162(self):
		"""Test fma as *nanarray_nanarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_none_a_163(self):
		"""Test fma as *nanarray_nanarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_infnum_none_b_163(self):
		"""Test fma as *nanarray_nanarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_okarray_a_164(self):
		"""Test fma as *nanarray_nanarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_okarray_b_164(self):
		"""Test fma as *nanarray_nanarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_none_a_165(self):
		"""Test fma as *nanarray_nanarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfarray_none_b_165(self):
		"""Test fma as *nanarray_nanarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_okarray_a_166(self):
		"""Test fma as *nanarray_nanarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_okarray_b_166(self):
		"""Test fma as *nanarray_nanarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_none_a_167(self):
		"""Test fma as *nanarray_nanarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_nanarray_ninfnum_none_b_167(self):
		"""Test fma as *nanarray_nanarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_okarray_a_168(self):
		"""Test fma as *nanarray_nannum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_okarray_b_168(self):
		"""Test fma as *nanarray_nannum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_none_a_169(self):
		"""Test fma as *nanarray_nannum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_okarray_none_b_169(self):
		"""Test fma as *nanarray_nannum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_okarray_a_170(self):
		"""Test fma as *nanarray_nannum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_okarray_b_170(self):
		"""Test fma as *nanarray_nannum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_none_a_171(self):
		"""Test fma as *nanarray_nannum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_oknum_none_b_171(self):
		"""Test fma as *nanarray_nannum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_okarray_a_172(self):
		"""Test fma as *nanarray_nannum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_okarray_b_172(self):
		"""Test fma as *nanarray_nannum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_none_a_173(self):
		"""Test fma as *nanarray_nannum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nanarray_none_b_173(self):
		"""Test fma as *nanarray_nannum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_okarray_a_174(self):
		"""Test fma as *nanarray_nannum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_okarray_b_174(self):
		"""Test fma as *nanarray_nannum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_none_a_175(self):
		"""Test fma as *nanarray_nannum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_nannum_none_b_175(self):
		"""Test fma as *nanarray_nannum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_okarray_a_176(self):
		"""Test fma as *nanarray_nannum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_okarray_b_176(self):
		"""Test fma as *nanarray_nannum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_none_a_177(self):
		"""Test fma as *nanarray_nannum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infarray_none_b_177(self):
		"""Test fma as *nanarray_nannum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_okarray_a_178(self):
		"""Test fma as *nanarray_nannum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_okarray_b_178(self):
		"""Test fma as *nanarray_nannum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_none_a_179(self):
		"""Test fma as *nanarray_nannum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_infnum_none_b_179(self):
		"""Test fma as *nanarray_nannum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_okarray_a_180(self):
		"""Test fma as *nanarray_nannum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_okarray_b_180(self):
		"""Test fma as *nanarray_nannum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_none_a_181(self):
		"""Test fma as *nanarray_nannum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfarray_none_b_181(self):
		"""Test fma as *nanarray_nannum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_okarray_a_182(self):
		"""Test fma as *nanarray_nannum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_okarray_b_182(self):
		"""Test fma as *nanarray_nannum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_none_a_183(self):
		"""Test fma as *nanarray_nannum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_nannum_ninfnum_none_b_183(self):
		"""Test fma as *nanarray_nannum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_okarray_a_184(self):
		"""Test fma as *nanarray_infarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_okarray_b_184(self):
		"""Test fma as *nanarray_infarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_none_a_185(self):
		"""Test fma as *nanarray_infarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_okarray_none_b_185(self):
		"""Test fma as *nanarray_infarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_okarray_a_186(self):
		"""Test fma as *nanarray_infarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_okarray_b_186(self):
		"""Test fma as *nanarray_infarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_none_a_187(self):
		"""Test fma as *nanarray_infarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_oknum_none_b_187(self):
		"""Test fma as *nanarray_infarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_okarray_a_188(self):
		"""Test fma as *nanarray_infarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_okarray_b_188(self):
		"""Test fma as *nanarray_infarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_none_a_189(self):
		"""Test fma as *nanarray_infarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nanarray_none_b_189(self):
		"""Test fma as *nanarray_infarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_okarray_a_190(self):
		"""Test fma as *nanarray_infarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_okarray_b_190(self):
		"""Test fma as *nanarray_infarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_none_a_191(self):
		"""Test fma as *nanarray_infarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_nannum_none_b_191(self):
		"""Test fma as *nanarray_infarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_okarray_a_192(self):
		"""Test fma as *nanarray_infarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_okarray_b_192(self):
		"""Test fma as *nanarray_infarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_none_a_193(self):
		"""Test fma as *nanarray_infarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infarray_none_b_193(self):
		"""Test fma as *nanarray_infarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_okarray_a_194(self):
		"""Test fma as *nanarray_infarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_okarray_b_194(self):
		"""Test fma as *nanarray_infarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_none_a_195(self):
		"""Test fma as *nanarray_infarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_infnum_none_b_195(self):
		"""Test fma as *nanarray_infarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_okarray_a_196(self):
		"""Test fma as *nanarray_infarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_okarray_b_196(self):
		"""Test fma as *nanarray_infarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_none_a_197(self):
		"""Test fma as *nanarray_infarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfarray_none_b_197(self):
		"""Test fma as *nanarray_infarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_okarray_a_198(self):
		"""Test fma as *nanarray_infarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_okarray_b_198(self):
		"""Test fma as *nanarray_infarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_none_a_199(self):
		"""Test fma as *nanarray_infarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_infarray_ninfnum_none_b_199(self):
		"""Test fma as *nanarray_infarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_okarray_a_200(self):
		"""Test fma as *nanarray_infnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_okarray_b_200(self):
		"""Test fma as *nanarray_infnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_none_a_201(self):
		"""Test fma as *nanarray_infnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_okarray_none_b_201(self):
		"""Test fma as *nanarray_infnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_okarray_a_202(self):
		"""Test fma as *nanarray_infnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_okarray_b_202(self):
		"""Test fma as *nanarray_infnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_none_a_203(self):
		"""Test fma as *nanarray_infnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_oknum_none_b_203(self):
		"""Test fma as *nanarray_infnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_okarray_a_204(self):
		"""Test fma as *nanarray_infnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_okarray_b_204(self):
		"""Test fma as *nanarray_infnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_none_a_205(self):
		"""Test fma as *nanarray_infnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nanarray_none_b_205(self):
		"""Test fma as *nanarray_infnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_okarray_a_206(self):
		"""Test fma as *nanarray_infnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_okarray_b_206(self):
		"""Test fma as *nanarray_infnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_none_a_207(self):
		"""Test fma as *nanarray_infnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_nannum_none_b_207(self):
		"""Test fma as *nanarray_infnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_okarray_a_208(self):
		"""Test fma as *nanarray_infnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_okarray_b_208(self):
		"""Test fma as *nanarray_infnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_none_a_209(self):
		"""Test fma as *nanarray_infnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infarray_none_b_209(self):
		"""Test fma as *nanarray_infnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_okarray_a_210(self):
		"""Test fma as *nanarray_infnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_okarray_b_210(self):
		"""Test fma as *nanarray_infnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_none_a_211(self):
		"""Test fma as *nanarray_infnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_infnum_none_b_211(self):
		"""Test fma as *nanarray_infnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_okarray_a_212(self):
		"""Test fma as *nanarray_infnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_okarray_b_212(self):
		"""Test fma as *nanarray_infnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_none_a_213(self):
		"""Test fma as *nanarray_infnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfarray_none_b_213(self):
		"""Test fma as *nanarray_infnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_okarray_a_214(self):
		"""Test fma as *nanarray_infnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_okarray_b_214(self):
		"""Test fma as *nanarray_infnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_none_a_215(self):
		"""Test fma as *nanarray_infnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_infnum_ninfnum_none_b_215(self):
		"""Test fma as *nanarray_infnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_okarray_a_216(self):
		"""Test fma as *nanarray_ninfarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_okarray_b_216(self):
		"""Test fma as *nanarray_ninfarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_none_a_217(self):
		"""Test fma as *nanarray_ninfarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_okarray_none_b_217(self):
		"""Test fma as *nanarray_ninfarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_okarray_a_218(self):
		"""Test fma as *nanarray_ninfarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_okarray_b_218(self):
		"""Test fma as *nanarray_ninfarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_none_a_219(self):
		"""Test fma as *nanarray_ninfarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_oknum_none_b_219(self):
		"""Test fma as *nanarray_ninfarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_okarray_a_220(self):
		"""Test fma as *nanarray_ninfarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_okarray_b_220(self):
		"""Test fma as *nanarray_ninfarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_none_a_221(self):
		"""Test fma as *nanarray_ninfarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nanarray_none_b_221(self):
		"""Test fma as *nanarray_ninfarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_okarray_a_222(self):
		"""Test fma as *nanarray_ninfarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_okarray_b_222(self):
		"""Test fma as *nanarray_ninfarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_none_a_223(self):
		"""Test fma as *nanarray_ninfarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_nannum_none_b_223(self):
		"""Test fma as *nanarray_ninfarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_okarray_a_224(self):
		"""Test fma as *nanarray_ninfarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_okarray_b_224(self):
		"""Test fma as *nanarray_ninfarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_none_a_225(self):
		"""Test fma as *nanarray_ninfarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infarray_none_b_225(self):
		"""Test fma as *nanarray_ninfarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_okarray_a_226(self):
		"""Test fma as *nanarray_ninfarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_okarray_b_226(self):
		"""Test fma as *nanarray_ninfarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_none_a_227(self):
		"""Test fma as *nanarray_ninfarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_infnum_none_b_227(self):
		"""Test fma as *nanarray_ninfarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_okarray_a_228(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_okarray_b_228(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_none_a_229(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfarray_none_b_229(self):
		"""Test fma as *nanarray_ninfarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_okarray_a_230(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_okarray_b_230(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_none_a_231(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfarray_ninfnum_none_b_231(self):
		"""Test fma as *nanarray_ninfarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_okarray_a_232(self):
		"""Test fma as *nanarray_ninfnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_okarray_b_232(self):
		"""Test fma as *nanarray_ninfnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_none_a_233(self):
		"""Test fma as *nanarray_ninfnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_okarray_none_b_233(self):
		"""Test fma as *nanarray_ninfnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_okarray_a_234(self):
		"""Test fma as *nanarray_ninfnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_okarray_b_234(self):
		"""Test fma as *nanarray_ninfnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_none_a_235(self):
		"""Test fma as *nanarray_ninfnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_oknum_none_b_235(self):
		"""Test fma as *nanarray_ninfnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_okarray_a_236(self):
		"""Test fma as *nanarray_ninfnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_okarray_b_236(self):
		"""Test fma as *nanarray_ninfnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_none_a_237(self):
		"""Test fma as *nanarray_ninfnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nanarray_none_b_237(self):
		"""Test fma as *nanarray_ninfnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_okarray_a_238(self):
		"""Test fma as *nanarray_ninfnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_okarray_b_238(self):
		"""Test fma as *nanarray_ninfnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_none_a_239(self):
		"""Test fma as *nanarray_ninfnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_nannum_none_b_239(self):
		"""Test fma as *nanarray_ninfnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_okarray_a_240(self):
		"""Test fma as *nanarray_ninfnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_okarray_b_240(self):
		"""Test fma as *nanarray_ninfnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_none_a_241(self):
		"""Test fma as *nanarray_ninfnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infarray_none_b_241(self):
		"""Test fma as *nanarray_ninfnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_okarray_a_242(self):
		"""Test fma as *nanarray_ninfnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_okarray_b_242(self):
		"""Test fma as *nanarray_ninfnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_none_a_243(self):
		"""Test fma as *nanarray_ninfnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_infnum_none_b_243(self):
		"""Test fma as *nanarray_ninfnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_okarray_a_244(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_okarray_b_244(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_none_a_245(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfarray_none_b_245(self):
		"""Test fma as *nanarray_ninfnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_okarray_a_246(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_okarray_b_246(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_none_a_247(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_nanarray_ninfnum_ninfnum_none_b_247(self):
		"""Test fma as *nanarray_ninfnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.nanarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.nanarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.nanarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_okarray_a_248(self):
		"""Test fma as *infarray_okarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_okarray_b_248(self):
		"""Test fma as *infarray_okarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_none_a_249(self):
		"""Test fma as *infarray_okarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_okarray_none_b_249(self):
		"""Test fma as *infarray_okarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_okarray_a_250(self):
		"""Test fma as *infarray_okarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_okarray_b_250(self):
		"""Test fma as *infarray_okarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_none_a_251(self):
		"""Test fma as *infarray_okarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_oknum_none_b_251(self):
		"""Test fma as *infarray_okarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_okarray_a_252(self):
		"""Test fma as *infarray_okarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_okarray_b_252(self):
		"""Test fma as *infarray_okarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_none_a_253(self):
		"""Test fma as *infarray_okarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_nanarray_none_b_253(self):
		"""Test fma as *infarray_okarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_okarray_a_254(self):
		"""Test fma as *infarray_okarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_okarray_b_254(self):
		"""Test fma as *infarray_okarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_none_a_255(self):
		"""Test fma as *infarray_okarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_nannum_none_b_255(self):
		"""Test fma as *infarray_okarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_okarray_a_256(self):
		"""Test fma as *infarray_okarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_okarray_b_256(self):
		"""Test fma as *infarray_okarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_none_a_257(self):
		"""Test fma as *infarray_okarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_infarray_none_b_257(self):
		"""Test fma as *infarray_okarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_okarray_a_258(self):
		"""Test fma as *infarray_okarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_okarray_b_258(self):
		"""Test fma as *infarray_okarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_none_a_259(self):
		"""Test fma as *infarray_okarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_infnum_none_b_259(self):
		"""Test fma as *infarray_okarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_okarray_a_260(self):
		"""Test fma as *infarray_okarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_okarray_b_260(self):
		"""Test fma as *infarray_okarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_none_a_261(self):
		"""Test fma as *infarray_okarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfarray_none_b_261(self):
		"""Test fma as *infarray_okarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_okarray_a_262(self):
		"""Test fma as *infarray_okarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_okarray_b_262(self):
		"""Test fma as *infarray_okarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_none_a_263(self):
		"""Test fma as *infarray_okarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_okarray_ninfnum_none_b_263(self):
		"""Test fma as *infarray_okarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_okarray_a_264(self):
		"""Test fma as *infarray_oknum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_okarray_b_264(self):
		"""Test fma as *infarray_oknum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_none_a_265(self):
		"""Test fma as *infarray_oknum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_okarray_none_b_265(self):
		"""Test fma as *infarray_oknum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_okarray_a_266(self):
		"""Test fma as *infarray_oknum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_okarray_b_266(self):
		"""Test fma as *infarray_oknum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_none_a_267(self):
		"""Test fma as *infarray_oknum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_oknum_none_b_267(self):
		"""Test fma as *infarray_oknum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_okarray_a_268(self):
		"""Test fma as *infarray_oknum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_okarray_b_268(self):
		"""Test fma as *infarray_oknum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_none_a_269(self):
		"""Test fma as *infarray_oknum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_nanarray_none_b_269(self):
		"""Test fma as *infarray_oknum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_okarray_a_270(self):
		"""Test fma as *infarray_oknum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_okarray_b_270(self):
		"""Test fma as *infarray_oknum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_none_a_271(self):
		"""Test fma as *infarray_oknum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_nannum_none_b_271(self):
		"""Test fma as *infarray_oknum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_okarray_a_272(self):
		"""Test fma as *infarray_oknum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_okarray_b_272(self):
		"""Test fma as *infarray_oknum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_none_a_273(self):
		"""Test fma as *infarray_oknum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_infarray_none_b_273(self):
		"""Test fma as *infarray_oknum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_okarray_a_274(self):
		"""Test fma as *infarray_oknum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_okarray_b_274(self):
		"""Test fma as *infarray_oknum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_none_a_275(self):
		"""Test fma as *infarray_oknum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_infnum_none_b_275(self):
		"""Test fma as *infarray_oknum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_okarray_a_276(self):
		"""Test fma as *infarray_oknum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_okarray_b_276(self):
		"""Test fma as *infarray_oknum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_none_a_277(self):
		"""Test fma as *infarray_oknum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfarray_none_b_277(self):
		"""Test fma as *infarray_oknum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_okarray_a_278(self):
		"""Test fma as *infarray_oknum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_okarray_b_278(self):
		"""Test fma as *infarray_oknum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_none_a_279(self):
		"""Test fma as *infarray_oknum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_oknum_ninfnum_none_b_279(self):
		"""Test fma as *infarray_oknum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_okarray_a_280(self):
		"""Test fma as *infarray_nanarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_okarray_b_280(self):
		"""Test fma as *infarray_nanarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_none_a_281(self):
		"""Test fma as *infarray_nanarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_okarray_none_b_281(self):
		"""Test fma as *infarray_nanarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_okarray_a_282(self):
		"""Test fma as *infarray_nanarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_okarray_b_282(self):
		"""Test fma as *infarray_nanarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_none_a_283(self):
		"""Test fma as *infarray_nanarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_oknum_none_b_283(self):
		"""Test fma as *infarray_nanarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_okarray_a_284(self):
		"""Test fma as *infarray_nanarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_okarray_b_284(self):
		"""Test fma as *infarray_nanarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_none_a_285(self):
		"""Test fma as *infarray_nanarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nanarray_none_b_285(self):
		"""Test fma as *infarray_nanarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_okarray_a_286(self):
		"""Test fma as *infarray_nanarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_okarray_b_286(self):
		"""Test fma as *infarray_nanarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_none_a_287(self):
		"""Test fma as *infarray_nanarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_nannum_none_b_287(self):
		"""Test fma as *infarray_nanarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_okarray_a_288(self):
		"""Test fma as *infarray_nanarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_okarray_b_288(self):
		"""Test fma as *infarray_nanarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_none_a_289(self):
		"""Test fma as *infarray_nanarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infarray_none_b_289(self):
		"""Test fma as *infarray_nanarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_okarray_a_290(self):
		"""Test fma as *infarray_nanarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_okarray_b_290(self):
		"""Test fma as *infarray_nanarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_none_a_291(self):
		"""Test fma as *infarray_nanarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_infnum_none_b_291(self):
		"""Test fma as *infarray_nanarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_okarray_a_292(self):
		"""Test fma as *infarray_nanarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_okarray_b_292(self):
		"""Test fma as *infarray_nanarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_none_a_293(self):
		"""Test fma as *infarray_nanarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfarray_none_b_293(self):
		"""Test fma as *infarray_nanarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_okarray_a_294(self):
		"""Test fma as *infarray_nanarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_okarray_b_294(self):
		"""Test fma as *infarray_nanarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_none_a_295(self):
		"""Test fma as *infarray_nanarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_nanarray_ninfnum_none_b_295(self):
		"""Test fma as *infarray_nanarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_okarray_a_296(self):
		"""Test fma as *infarray_nannum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_okarray_b_296(self):
		"""Test fma as *infarray_nannum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_none_a_297(self):
		"""Test fma as *infarray_nannum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_okarray_none_b_297(self):
		"""Test fma as *infarray_nannum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_okarray_a_298(self):
		"""Test fma as *infarray_nannum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_okarray_b_298(self):
		"""Test fma as *infarray_nannum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_none_a_299(self):
		"""Test fma as *infarray_nannum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_oknum_none_b_299(self):
		"""Test fma as *infarray_nannum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_okarray_a_300(self):
		"""Test fma as *infarray_nannum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_okarray_b_300(self):
		"""Test fma as *infarray_nannum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_none_a_301(self):
		"""Test fma as *infarray_nannum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_nanarray_none_b_301(self):
		"""Test fma as *infarray_nannum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_okarray_a_302(self):
		"""Test fma as *infarray_nannum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_okarray_b_302(self):
		"""Test fma as *infarray_nannum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_none_a_303(self):
		"""Test fma as *infarray_nannum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_nannum_none_b_303(self):
		"""Test fma as *infarray_nannum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_okarray_a_304(self):
		"""Test fma as *infarray_nannum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_okarray_b_304(self):
		"""Test fma as *infarray_nannum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_none_a_305(self):
		"""Test fma as *infarray_nannum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_infarray_none_b_305(self):
		"""Test fma as *infarray_nannum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_okarray_a_306(self):
		"""Test fma as *infarray_nannum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_okarray_b_306(self):
		"""Test fma as *infarray_nannum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_none_a_307(self):
		"""Test fma as *infarray_nannum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_infnum_none_b_307(self):
		"""Test fma as *infarray_nannum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_okarray_a_308(self):
		"""Test fma as *infarray_nannum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_okarray_b_308(self):
		"""Test fma as *infarray_nannum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_none_a_309(self):
		"""Test fma as *infarray_nannum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfarray_none_b_309(self):
		"""Test fma as *infarray_nannum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_okarray_a_310(self):
		"""Test fma as *infarray_nannum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_okarray_b_310(self):
		"""Test fma as *infarray_nannum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_none_a_311(self):
		"""Test fma as *infarray_nannum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_nannum_ninfnum_none_b_311(self):
		"""Test fma as *infarray_nannum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_okarray_a_312(self):
		"""Test fma as *infarray_infarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_okarray_b_312(self):
		"""Test fma as *infarray_infarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_none_a_313(self):
		"""Test fma as *infarray_infarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_okarray_none_b_313(self):
		"""Test fma as *infarray_infarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_okarray_a_314(self):
		"""Test fma as *infarray_infarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_okarray_b_314(self):
		"""Test fma as *infarray_infarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_none_a_315(self):
		"""Test fma as *infarray_infarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_oknum_none_b_315(self):
		"""Test fma as *infarray_infarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_okarray_a_316(self):
		"""Test fma as *infarray_infarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_okarray_b_316(self):
		"""Test fma as *infarray_infarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_none_a_317(self):
		"""Test fma as *infarray_infarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_nanarray_none_b_317(self):
		"""Test fma as *infarray_infarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_okarray_a_318(self):
		"""Test fma as *infarray_infarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_okarray_b_318(self):
		"""Test fma as *infarray_infarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_none_a_319(self):
		"""Test fma as *infarray_infarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_nannum_none_b_319(self):
		"""Test fma as *infarray_infarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_okarray_a_320(self):
		"""Test fma as *infarray_infarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_okarray_b_320(self):
		"""Test fma as *infarray_infarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_none_a_321(self):
		"""Test fma as *infarray_infarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_infarray_none_b_321(self):
		"""Test fma as *infarray_infarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_okarray_a_322(self):
		"""Test fma as *infarray_infarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_okarray_b_322(self):
		"""Test fma as *infarray_infarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_none_a_323(self):
		"""Test fma as *infarray_infarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_infnum_none_b_323(self):
		"""Test fma as *infarray_infarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_okarray_a_324(self):
		"""Test fma as *infarray_infarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_okarray_b_324(self):
		"""Test fma as *infarray_infarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_none_a_325(self):
		"""Test fma as *infarray_infarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfarray_none_b_325(self):
		"""Test fma as *infarray_infarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_okarray_a_326(self):
		"""Test fma as *infarray_infarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_okarray_b_326(self):
		"""Test fma as *infarray_infarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_none_a_327(self):
		"""Test fma as *infarray_infarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_infarray_ninfnum_none_b_327(self):
		"""Test fma as *infarray_infarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_okarray_a_328(self):
		"""Test fma as *infarray_infnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_okarray_b_328(self):
		"""Test fma as *infarray_infnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_none_a_329(self):
		"""Test fma as *infarray_infnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_okarray_none_b_329(self):
		"""Test fma as *infarray_infnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_okarray_a_330(self):
		"""Test fma as *infarray_infnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_okarray_b_330(self):
		"""Test fma as *infarray_infnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_none_a_331(self):
		"""Test fma as *infarray_infnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_oknum_none_b_331(self):
		"""Test fma as *infarray_infnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_okarray_a_332(self):
		"""Test fma as *infarray_infnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_okarray_b_332(self):
		"""Test fma as *infarray_infnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_none_a_333(self):
		"""Test fma as *infarray_infnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_nanarray_none_b_333(self):
		"""Test fma as *infarray_infnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_okarray_a_334(self):
		"""Test fma as *infarray_infnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_okarray_b_334(self):
		"""Test fma as *infarray_infnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_none_a_335(self):
		"""Test fma as *infarray_infnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_nannum_none_b_335(self):
		"""Test fma as *infarray_infnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_okarray_a_336(self):
		"""Test fma as *infarray_infnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_okarray_b_336(self):
		"""Test fma as *infarray_infnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_none_a_337(self):
		"""Test fma as *infarray_infnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_infarray_none_b_337(self):
		"""Test fma as *infarray_infnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_okarray_a_338(self):
		"""Test fma as *infarray_infnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_okarray_b_338(self):
		"""Test fma as *infarray_infnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_none_a_339(self):
		"""Test fma as *infarray_infnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_infnum_none_b_339(self):
		"""Test fma as *infarray_infnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_okarray_a_340(self):
		"""Test fma as *infarray_infnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_okarray_b_340(self):
		"""Test fma as *infarray_infnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_none_a_341(self):
		"""Test fma as *infarray_infnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfarray_none_b_341(self):
		"""Test fma as *infarray_infnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_okarray_a_342(self):
		"""Test fma as *infarray_infnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_okarray_b_342(self):
		"""Test fma as *infarray_infnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_none_a_343(self):
		"""Test fma as *infarray_infnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_infnum_ninfnum_none_b_343(self):
		"""Test fma as *infarray_infnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_okarray_a_344(self):
		"""Test fma as *infarray_ninfarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_okarray_b_344(self):
		"""Test fma as *infarray_ninfarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_none_a_345(self):
		"""Test fma as *infarray_ninfarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_okarray_none_b_345(self):
		"""Test fma as *infarray_ninfarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_okarray_a_346(self):
		"""Test fma as *infarray_ninfarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_okarray_b_346(self):
		"""Test fma as *infarray_ninfarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_none_a_347(self):
		"""Test fma as *infarray_ninfarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_oknum_none_b_347(self):
		"""Test fma as *infarray_ninfarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_okarray_a_348(self):
		"""Test fma as *infarray_ninfarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_okarray_b_348(self):
		"""Test fma as *infarray_ninfarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_none_a_349(self):
		"""Test fma as *infarray_ninfarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nanarray_none_b_349(self):
		"""Test fma as *infarray_ninfarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_okarray_a_350(self):
		"""Test fma as *infarray_ninfarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_okarray_b_350(self):
		"""Test fma as *infarray_ninfarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_none_a_351(self):
		"""Test fma as *infarray_ninfarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_nannum_none_b_351(self):
		"""Test fma as *infarray_ninfarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_okarray_a_352(self):
		"""Test fma as *infarray_ninfarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_okarray_b_352(self):
		"""Test fma as *infarray_ninfarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_none_a_353(self):
		"""Test fma as *infarray_ninfarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infarray_none_b_353(self):
		"""Test fma as *infarray_ninfarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_okarray_a_354(self):
		"""Test fma as *infarray_ninfarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_okarray_b_354(self):
		"""Test fma as *infarray_ninfarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_none_a_355(self):
		"""Test fma as *infarray_ninfarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_infnum_none_b_355(self):
		"""Test fma as *infarray_ninfarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_okarray_a_356(self):
		"""Test fma as *infarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_okarray_b_356(self):
		"""Test fma as *infarray_ninfarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_none_a_357(self):
		"""Test fma as *infarray_ninfarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfarray_none_b_357(self):
		"""Test fma as *infarray_ninfarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_okarray_a_358(self):
		"""Test fma as *infarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_okarray_b_358(self):
		"""Test fma as *infarray_ninfarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_none_a_359(self):
		"""Test fma as *infarray_ninfarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfarray_ninfnum_none_b_359(self):
		"""Test fma as *infarray_ninfarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_okarray_a_360(self):
		"""Test fma as *infarray_ninfnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_okarray_b_360(self):
		"""Test fma as *infarray_ninfnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_none_a_361(self):
		"""Test fma as *infarray_ninfnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_okarray_none_b_361(self):
		"""Test fma as *infarray_ninfnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_okarray_a_362(self):
		"""Test fma as *infarray_ninfnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_okarray_b_362(self):
		"""Test fma as *infarray_ninfnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_none_a_363(self):
		"""Test fma as *infarray_ninfnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_oknum_none_b_363(self):
		"""Test fma as *infarray_ninfnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_okarray_a_364(self):
		"""Test fma as *infarray_ninfnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_okarray_b_364(self):
		"""Test fma as *infarray_ninfnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_none_a_365(self):
		"""Test fma as *infarray_ninfnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nanarray_none_b_365(self):
		"""Test fma as *infarray_ninfnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_okarray_a_366(self):
		"""Test fma as *infarray_ninfnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_okarray_b_366(self):
		"""Test fma as *infarray_ninfnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_none_a_367(self):
		"""Test fma as *infarray_ninfnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_nannum_none_b_367(self):
		"""Test fma as *infarray_ninfnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_okarray_a_368(self):
		"""Test fma as *infarray_ninfnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_okarray_b_368(self):
		"""Test fma as *infarray_ninfnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_none_a_369(self):
		"""Test fma as *infarray_ninfnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infarray_none_b_369(self):
		"""Test fma as *infarray_ninfnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_okarray_a_370(self):
		"""Test fma as *infarray_ninfnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_okarray_b_370(self):
		"""Test fma as *infarray_ninfnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_none_a_371(self):
		"""Test fma as *infarray_ninfnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_infnum_none_b_371(self):
		"""Test fma as *infarray_ninfnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_okarray_a_372(self):
		"""Test fma as *infarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_okarray_b_372(self):
		"""Test fma as *infarray_ninfnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_none_a_373(self):
		"""Test fma as *infarray_ninfnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfarray_none_b_373(self):
		"""Test fma as *infarray_ninfnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_okarray_a_374(self):
		"""Test fma as *infarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_okarray_b_374(self):
		"""Test fma as *infarray_ninfnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_none_a_375(self):
		"""Test fma as *infarray_ninfnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_infarray_ninfnum_ninfnum_none_b_375(self):
		"""Test fma as *infarray_ninfnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.infarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.infarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.infarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_okarray_a_376(self):
		"""Test fma as *ninfarray_okarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_okarray_b_376(self):
		"""Test fma as *ninfarray_okarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_none_a_377(self):
		"""Test fma as *ninfarray_okarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_okarray_none_b_377(self):
		"""Test fma as *ninfarray_okarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_okarray_a_378(self):
		"""Test fma as *ninfarray_okarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_okarray_b_378(self):
		"""Test fma as *ninfarray_okarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_none_a_379(self):
		"""Test fma as *ninfarray_okarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_oknum_none_b_379(self):
		"""Test fma as *ninfarray_okarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_okarray_a_380(self):
		"""Test fma as *ninfarray_okarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_okarray_b_380(self):
		"""Test fma as *ninfarray_okarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_none_a_381(self):
		"""Test fma as *ninfarray_okarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nanarray_none_b_381(self):
		"""Test fma as *ninfarray_okarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_okarray_a_382(self):
		"""Test fma as *ninfarray_okarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_okarray_b_382(self):
		"""Test fma as *ninfarray_okarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_none_a_383(self):
		"""Test fma as *ninfarray_okarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_nannum_none_b_383(self):
		"""Test fma as *ninfarray_okarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_okarray_a_384(self):
		"""Test fma as *ninfarray_okarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_okarray_b_384(self):
		"""Test fma as *ninfarray_okarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_none_a_385(self):
		"""Test fma as *ninfarray_okarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infarray_none_b_385(self):
		"""Test fma as *ninfarray_okarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_okarray_a_386(self):
		"""Test fma as *ninfarray_okarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_okarray_b_386(self):
		"""Test fma as *ninfarray_okarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_none_a_387(self):
		"""Test fma as *ninfarray_okarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_infnum_none_b_387(self):
		"""Test fma as *ninfarray_okarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_okarray_a_388(self):
		"""Test fma as *ninfarray_okarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_okarray_b_388(self):
		"""Test fma as *ninfarray_okarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_none_a_389(self):
		"""Test fma as *ninfarray_okarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfarray_none_b_389(self):
		"""Test fma as *ninfarray_okarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_okarray_a_390(self):
		"""Test fma as *ninfarray_okarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_okarray_b_390(self):
		"""Test fma as *ninfarray_okarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_none_a_391(self):
		"""Test fma as *ninfarray_okarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_okarray_ninfnum_none_b_391(self):
		"""Test fma as *ninfarray_okarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.okarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.okarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_okarray_a_392(self):
		"""Test fma as *ninfarray_oknum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_okarray_b_392(self):
		"""Test fma as *ninfarray_oknum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_none_a_393(self):
		"""Test fma as *ninfarray_oknum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_okarray_none_b_393(self):
		"""Test fma as *ninfarray_oknum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_okarray_a_394(self):
		"""Test fma as *ninfarray_oknum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_okarray_b_394(self):
		"""Test fma as *ninfarray_oknum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_none_a_395(self):
		"""Test fma as *ninfarray_oknum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_oknum_none_b_395(self):
		"""Test fma as *ninfarray_oknum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_okarray_a_396(self):
		"""Test fma as *ninfarray_oknum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_okarray_b_396(self):
		"""Test fma as *ninfarray_oknum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_none_a_397(self):
		"""Test fma as *ninfarray_oknum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nanarray_none_b_397(self):
		"""Test fma as *ninfarray_oknum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_okarray_a_398(self):
		"""Test fma as *ninfarray_oknum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_okarray_b_398(self):
		"""Test fma as *ninfarray_oknum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_none_a_399(self):
		"""Test fma as *ninfarray_oknum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_nannum_none_b_399(self):
		"""Test fma as *ninfarray_oknum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_okarray_a_400(self):
		"""Test fma as *ninfarray_oknum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_okarray_b_400(self):
		"""Test fma as *ninfarray_oknum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_none_a_401(self):
		"""Test fma as *ninfarray_oknum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infarray_none_b_401(self):
		"""Test fma as *ninfarray_oknum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_okarray_a_402(self):
		"""Test fma as *ninfarray_oknum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_okarray_b_402(self):
		"""Test fma as *ninfarray_oknum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_none_a_403(self):
		"""Test fma as *ninfarray_oknum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_infnum_none_b_403(self):
		"""Test fma as *ninfarray_oknum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_okarray_a_404(self):
		"""Test fma as *ninfarray_oknum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_okarray_b_404(self):
		"""Test fma as *ninfarray_oknum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_none_a_405(self):
		"""Test fma as *ninfarray_oknum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfarray_none_b_405(self):
		"""Test fma as *ninfarray_oknum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_okarray_a_406(self):
		"""Test fma as *ninfarray_oknum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_okarray_b_406(self):
		"""Test fma as *ninfarray_oknum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_none_a_407(self):
		"""Test fma as *ninfarray_oknum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_oknum_ninfnum_none_b_407(self):
		"""Test fma as *ninfarray_oknum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.oknumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.oknumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_okarray_a_408(self):
		"""Test fma as *ninfarray_nanarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_okarray_b_408(self):
		"""Test fma as *ninfarray_nanarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_none_a_409(self):
		"""Test fma as *ninfarray_nanarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_okarray_none_b_409(self):
		"""Test fma as *ninfarray_nanarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_okarray_a_410(self):
		"""Test fma as *ninfarray_nanarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_okarray_b_410(self):
		"""Test fma as *ninfarray_nanarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_none_a_411(self):
		"""Test fma as *ninfarray_nanarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_oknum_none_b_411(self):
		"""Test fma as *ninfarray_nanarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_okarray_a_412(self):
		"""Test fma as *ninfarray_nanarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_okarray_b_412(self):
		"""Test fma as *ninfarray_nanarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_none_a_413(self):
		"""Test fma as *ninfarray_nanarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nanarray_none_b_413(self):
		"""Test fma as *ninfarray_nanarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_okarray_a_414(self):
		"""Test fma as *ninfarray_nanarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_okarray_b_414(self):
		"""Test fma as *ninfarray_nanarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_none_a_415(self):
		"""Test fma as *ninfarray_nanarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_nannum_none_b_415(self):
		"""Test fma as *ninfarray_nanarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_okarray_a_416(self):
		"""Test fma as *ninfarray_nanarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_okarray_b_416(self):
		"""Test fma as *ninfarray_nanarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_none_a_417(self):
		"""Test fma as *ninfarray_nanarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infarray_none_b_417(self):
		"""Test fma as *ninfarray_nanarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_okarray_a_418(self):
		"""Test fma as *ninfarray_nanarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_okarray_b_418(self):
		"""Test fma as *ninfarray_nanarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_none_a_419(self):
		"""Test fma as *ninfarray_nanarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_infnum_none_b_419(self):
		"""Test fma as *ninfarray_nanarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_okarray_a_420(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_okarray_b_420(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_none_a_421(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfarray_none_b_421(self):
		"""Test fma as *ninfarray_nanarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_okarray_a_422(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_okarray_b_422(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_none_a_423(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nanarray_ninfnum_none_b_423(self):
		"""Test fma as *ninfarray_nanarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.nanarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nanarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_okarray_a_424(self):
		"""Test fma as *ninfarray_nannum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_okarray_b_424(self):
		"""Test fma as *ninfarray_nannum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_none_a_425(self):
		"""Test fma as *ninfarray_nannum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_okarray_none_b_425(self):
		"""Test fma as *ninfarray_nannum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_okarray_a_426(self):
		"""Test fma as *ninfarray_nannum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_okarray_b_426(self):
		"""Test fma as *ninfarray_nannum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_none_a_427(self):
		"""Test fma as *ninfarray_nannum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_oknum_none_b_427(self):
		"""Test fma as *ninfarray_nannum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_okarray_a_428(self):
		"""Test fma as *ninfarray_nannum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_okarray_b_428(self):
		"""Test fma as *ninfarray_nannum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_none_a_429(self):
		"""Test fma as *ninfarray_nannum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nanarray_none_b_429(self):
		"""Test fma as *ninfarray_nannum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_okarray_a_430(self):
		"""Test fma as *ninfarray_nannum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_okarray_b_430(self):
		"""Test fma as *ninfarray_nannum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_none_a_431(self):
		"""Test fma as *ninfarray_nannum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_nannum_none_b_431(self):
		"""Test fma as *ninfarray_nannum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_okarray_a_432(self):
		"""Test fma as *ninfarray_nannum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_okarray_b_432(self):
		"""Test fma as *ninfarray_nannum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_none_a_433(self):
		"""Test fma as *ninfarray_nannum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infarray_none_b_433(self):
		"""Test fma as *ninfarray_nannum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_okarray_a_434(self):
		"""Test fma as *ninfarray_nannum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_okarray_b_434(self):
		"""Test fma as *ninfarray_nannum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_none_a_435(self):
		"""Test fma as *ninfarray_nannum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_infnum_none_b_435(self):
		"""Test fma as *ninfarray_nannum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_okarray_a_436(self):
		"""Test fma as *ninfarray_nannum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_okarray_b_436(self):
		"""Test fma as *ninfarray_nannum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_none_a_437(self):
		"""Test fma as *ninfarray_nannum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfarray_none_b_437(self):
		"""Test fma as *ninfarray_nannum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_okarray_a_438(self):
		"""Test fma as *ninfarray_nannum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_okarray_b_438(self):
		"""Test fma as *ninfarray_nannum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_none_a_439(self):
		"""Test fma as *ninfarray_nannum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_nannum_ninfnum_none_b_439(self):
		"""Test fma as *ninfarray_nannum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.nannumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.nannumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_okarray_a_440(self):
		"""Test fma as *ninfarray_infarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_okarray_b_440(self):
		"""Test fma as *ninfarray_infarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_none_a_441(self):
		"""Test fma as *ninfarray_infarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_okarray_none_b_441(self):
		"""Test fma as *ninfarray_infarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_okarray_a_442(self):
		"""Test fma as *ninfarray_infarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_okarray_b_442(self):
		"""Test fma as *ninfarray_infarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_none_a_443(self):
		"""Test fma as *ninfarray_infarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_oknum_none_b_443(self):
		"""Test fma as *ninfarray_infarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_okarray_a_444(self):
		"""Test fma as *ninfarray_infarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_okarray_b_444(self):
		"""Test fma as *ninfarray_infarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_none_a_445(self):
		"""Test fma as *ninfarray_infarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nanarray_none_b_445(self):
		"""Test fma as *ninfarray_infarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_okarray_a_446(self):
		"""Test fma as *ninfarray_infarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_okarray_b_446(self):
		"""Test fma as *ninfarray_infarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_none_a_447(self):
		"""Test fma as *ninfarray_infarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_nannum_none_b_447(self):
		"""Test fma as *ninfarray_infarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_okarray_a_448(self):
		"""Test fma as *ninfarray_infarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_okarray_b_448(self):
		"""Test fma as *ninfarray_infarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_none_a_449(self):
		"""Test fma as *ninfarray_infarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infarray_none_b_449(self):
		"""Test fma as *ninfarray_infarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_okarray_a_450(self):
		"""Test fma as *ninfarray_infarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_okarray_b_450(self):
		"""Test fma as *ninfarray_infarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_none_a_451(self):
		"""Test fma as *ninfarray_infarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_infnum_none_b_451(self):
		"""Test fma as *ninfarray_infarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_okarray_a_452(self):
		"""Test fma as *ninfarray_infarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_okarray_b_452(self):
		"""Test fma as *ninfarray_infarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_none_a_453(self):
		"""Test fma as *ninfarray_infarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfarray_none_b_453(self):
		"""Test fma as *ninfarray_infarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_okarray_a_454(self):
		"""Test fma as *ninfarray_infarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_okarray_b_454(self):
		"""Test fma as *ninfarray_infarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_none_a_455(self):
		"""Test fma as *ninfarray_infarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infarray_ninfnum_none_b_455(self):
		"""Test fma as *ninfarray_infarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.infarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_okarray_a_456(self):
		"""Test fma as *ninfarray_infnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_okarray_b_456(self):
		"""Test fma as *ninfarray_infnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_none_a_457(self):
		"""Test fma as *ninfarray_infnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_okarray_none_b_457(self):
		"""Test fma as *ninfarray_infnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_okarray_a_458(self):
		"""Test fma as *ninfarray_infnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_okarray_b_458(self):
		"""Test fma as *ninfarray_infnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_none_a_459(self):
		"""Test fma as *ninfarray_infnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_oknum_none_b_459(self):
		"""Test fma as *ninfarray_infnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_okarray_a_460(self):
		"""Test fma as *ninfarray_infnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_okarray_b_460(self):
		"""Test fma as *ninfarray_infnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_none_a_461(self):
		"""Test fma as *ninfarray_infnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nanarray_none_b_461(self):
		"""Test fma as *ninfarray_infnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_okarray_a_462(self):
		"""Test fma as *ninfarray_infnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_okarray_b_462(self):
		"""Test fma as *ninfarray_infnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_none_a_463(self):
		"""Test fma as *ninfarray_infnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_nannum_none_b_463(self):
		"""Test fma as *ninfarray_infnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_okarray_a_464(self):
		"""Test fma as *ninfarray_infnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_okarray_b_464(self):
		"""Test fma as *ninfarray_infnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_none_a_465(self):
		"""Test fma as *ninfarray_infnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infarray_none_b_465(self):
		"""Test fma as *ninfarray_infnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_okarray_a_466(self):
		"""Test fma as *ninfarray_infnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_okarray_b_466(self):
		"""Test fma as *ninfarray_infnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_none_a_467(self):
		"""Test fma as *ninfarray_infnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_infnum_none_b_467(self):
		"""Test fma as *ninfarray_infnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_okarray_a_468(self):
		"""Test fma as *ninfarray_infnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_okarray_b_468(self):
		"""Test fma as *ninfarray_infnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_none_a_469(self):
		"""Test fma as *ninfarray_infnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfarray_none_b_469(self):
		"""Test fma as *ninfarray_infnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_okarray_a_470(self):
		"""Test fma as *ninfarray_infnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_okarray_b_470(self):
		"""Test fma as *ninfarray_infnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_none_a_471(self):
		"""Test fma as *ninfarray_infnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_infnum_ninfnum_none_b_471(self):
		"""Test fma as *ninfarray_infnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.infnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.infnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_okarray_a_472(self):
		"""Test fma as *ninfarray_ninfarray_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_okarray_b_472(self):
		"""Test fma as *ninfarray_ninfarray_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_none_a_473(self):
		"""Test fma as *ninfarray_ninfarray_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_okarray_none_b_473(self):
		"""Test fma as *ninfarray_ninfarray_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_okarray_a_474(self):
		"""Test fma as *ninfarray_ninfarray_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_okarray_b_474(self):
		"""Test fma as *ninfarray_ninfarray_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_none_a_475(self):
		"""Test fma as *ninfarray_ninfarray_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_oknum_none_b_475(self):
		"""Test fma as *ninfarray_ninfarray_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_okarray_a_476(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_okarray_b_476(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_none_a_477(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nanarray_none_b_477(self):
		"""Test fma as *ninfarray_ninfarray_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_okarray_a_478(self):
		"""Test fma as *ninfarray_ninfarray_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_okarray_b_478(self):
		"""Test fma as *ninfarray_ninfarray_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_none_a_479(self):
		"""Test fma as *ninfarray_ninfarray_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_nannum_none_b_479(self):
		"""Test fma as *ninfarray_ninfarray_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_okarray_a_480(self):
		"""Test fma as *ninfarray_ninfarray_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_okarray_b_480(self):
		"""Test fma as *ninfarray_ninfarray_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_none_a_481(self):
		"""Test fma as *ninfarray_ninfarray_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infarray_none_b_481(self):
		"""Test fma as *ninfarray_ninfarray_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_okarray_a_482(self):
		"""Test fma as *ninfarray_ninfarray_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_okarray_b_482(self):
		"""Test fma as *ninfarray_ninfarray_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_none_a_483(self):
		"""Test fma as *ninfarray_ninfarray_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_infnum_none_b_483(self):
		"""Test fma as *ninfarray_ninfarray_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_okarray_a_484(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_okarray_b_484(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_none_a_485(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfarray_none_b_485(self):
		"""Test fma as *ninfarray_ninfarray_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_okarray_a_486(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_okarray_b_486(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_none_a_487(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.okarrayy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfarray_ninfnum_none_b_487(self):
		"""Test fma as *ninfarray_ninfarray_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, self.ninfarrayy, itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfarrayy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_okarray_a_488(self):
		"""Test fma as *ninfarray_ninfnum_okarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_okarray_b_488(self):
		"""Test fma as *ninfarray_ninfnum_okarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_none_a_489(self):
		"""Test fma as *ninfarray_ninfnum_okarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_okarray_none_b_489(self):
		"""Test fma as *ninfarray_ninfnum_okarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.okarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.okarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_okarray_a_490(self):
		"""Test fma as *ninfarray_ninfnum_oknum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_okarray_b_490(self):
		"""Test fma as *ninfarray_ninfnum_oknum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_none_a_491(self):
		"""Test fma as *ninfarray_ninfnum_oknum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_oknum_none_b_491(self):
		"""Test fma as *ninfarray_ninfnum_oknum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.oknumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.oknumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_okarray_a_492(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_okarray_b_492(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_none_a_493(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nanarray_none_b_493(self):
		"""Test fma as *ninfarray_ninfnum_nanarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.nanarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nanarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_okarray_a_494(self):
		"""Test fma as *ninfarray_ninfnum_nannum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_okarray_b_494(self):
		"""Test fma as *ninfarray_ninfnum_nannum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_none_a_495(self):
		"""Test fma as *ninfarray_ninfnum_nannum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_nannum_none_b_495(self):
		"""Test fma as *ninfarray_ninfnum_nannum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.nannumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.nannumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_okarray_a_496(self):
		"""Test fma as *ninfarray_ninfnum_infarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_okarray_b_496(self):
		"""Test fma as *ninfarray_ninfnum_infarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_none_a_497(self):
		"""Test fma as *ninfarray_ninfnum_infarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infarray_none_b_497(self):
		"""Test fma as *ninfarray_ninfnum_infarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.infarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_okarray_a_498(self):
		"""Test fma as *ninfarray_ninfnum_infnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_okarray_b_498(self):
		"""Test fma as *ninfarray_ninfnum_infnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_none_a_499(self):
		"""Test fma as *ninfarray_ninfnum_infnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_infnum_none_b_499(self):
		"""Test fma as *ninfarray_ninfnum_infnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.infnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.infnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_okarray_a_500(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_okarray_b_500(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_none_a_501(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.okarrayz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfarray_none_b_501(self):
		"""Test fma as *ninfarray_ninfnum_ninfarray_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), self.ninfarrayz)]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfarrayz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_okarray_a_502(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_okarray* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, self.arrayout, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz, self.arrayout)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_okarray_b_502(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_okarray* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz, self.arrayout, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(self.arrayout, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_none_a_503(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_none* with matherrors=True - Array code d.
		"""
		# This version is expected to pass.
		arrayfunc.fma(self.okarrayx, self.oknumy, self.oknumz, matherrors=True)

		# This should raise an error.
		with self.assertRaises(ArithmeticError):
			arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz)


	########################################################
	def test_fma_nan_param_ninfarray_ninfnum_ninfnum_none_b_503(self):
		"""Test fma as *ninfarray_ninfnum_ninfnum_none* with error checking - Array code d.
		"""
		# The expected results.
		expected = [(x * y + z) for x,y,z in zip(self.ninfarrayx, itertools.repeat(self.ninfnumy), itertools.repeat(self.ninfnumz))]

		# Exceptions are turned off so we can use the results to test for correct values.
		arrayfunc.fma(self.ninfarrayx, self.ninfnumy, self.ninfnumz, matherrors=True)

		# This is used to make template handling simpler.
		inputarray = self.ninfarrayx

		# Compare the actual results to see if they are the same as the expected.
		for dataoutitem, expecteditem in zip(inputarray, expected):
			# The behavour of assertEqual is modified by addTypeEqualityFunc.
			self.assertEqual(dataoutitem, expecteditem)



##############################################################################


##############################################################################
if __name__ == '__main__':

	# Check to see if the log file option has been selected. This is an option
	# which we have added in order to decide where to output the results.
	if '-l' in sys.argv:
		# Remove the option from the argument list so that "unittest" does 
		# not complain about unknown options.
		sys.argv.remove('-l')

		with open('arrayfunc_unittest.txt', 'a') as f:
			f.write('\n\n')
			f.write('fma\n\n')
			trun = unittest.TextTestRunner(f)
			unittest.main(testRunner=trun)
	else:
		unittest.main()

##############################################################################
